<%@ jet 

	package="com.genband.m5.maps.ide.model.template" 

	class="ListMBean" 

	imports="com.genband.m5.maps.ide.CPFPlugin 

			 com.genband.m5.maps.common.CPFConstants 

			 com.genband.m5.maps.ide.model.* 

			 java.util.* 

			 java.util.List 

			 com.genband.m5.maps.ide.model.util.*"
%> 
<%
	CPFPlugin LOG = CPFPlugin.getDefault();

		//CPFResource will come as an argument to this function Generate
	CPFResource CPFArgument = (CPFResource)argument; 

 	CPFScreen cpfScreen = (CPFScreen)CPFArgument.getCpfScreen();

 	ResourceInfo resourceInfo = (ResourceInfo)CPFArgument.getResourceInfo();

 	String resourceName = resourceInfo.getResourceName();

 	ModelEntity modelEntity = null;

 	modelEntity = (ModelEntity)cpfScreen.getBaseEntity();

 	ModelEntity baseEntity = cpfScreen.getPortletRef().getBaseEntity();	

 	List<CPFAttribute> selectedAttributes = null;				

 	int operationId = cpfScreen.getPortletRef().getPortletId();		//Holds Operation Id of the method

	Map<RelationKey, List<CPFAttribute>> nestedAttributes = cpfScreen.getNestedAttributes();

	List<CPFConstants.OperationType> actionsSupported  = cpfScreen.getActionsSupported ();

	String fields = new String();

	String from = new String();

	String where = new String();

	List<List<String>> attrbVisibility = new ArrayList<List<String>>();		//Holds values related to getListVisibility()

		//Holds Text for String and Numeric for other search supported data types and NOTPOSSIBLE otherwise
	List<String> dataTypes = new ArrayList<String>();			//FOR SEARCHING PURPOSE ONLY

		//Holds EntityName.Attribtuename to set this in criteria
	List<String> attbsValues = new ArrayList<String>();			//FOR SEARCHING PURPOSE ONLY
	
	List<String> attbsLabels = new ArrayList<String>();	

		//Holds true if the column represents a many relation Link else false
	List<Boolean> nestedLink = new ArrayList<Boolean>();		//FOR SEARCHING PURPOSE ONLY

	String mainPropertyName = null;	//Holds PropertyName of resource Name in Base Entity if resource Name is not equals to base entity name	

 	LOG.info("generating managed Bean for : " + resourceName); 	

 	selectedAttributes = cpfScreen.getSelectedAttributes ();
 	
 	if(CPFArgument.getOperationId() > 0) {

 		CPFScreen baseScreen = cpfScreen.getPortletRef().getListScreen();

 		Map<RelationKey, CPFScreen> nestedJsp = baseScreen.getNestedJspNames();

 		Iterator<RelationKey> itrRelationKey = nestedJsp.keySet().iterator();

 		while(itrRelationKey.hasNext()) {

 			RelationKey relKey = itrRelationKey.next(); 

 			CPFScreen thisCpfScreen = nestedJsp.get(relKey);

 			if(thisCpfScreen.getJspName().equals(cpfScreen.getJspName())) {

 				mainPropertyName = new String(relKey.getRelationShipInfo().getPropertyName());

 				LOG.info("The resource is not Base Entity and its property name in Base entiy is : " 

 							+ mainPropertyName);

 				break;

 			}

 		}

 	} 	

 	/**
 	*Doing process for Seleceted attributes......Getting criteria, attr visibility, data types, etc...
 	**/

 	LOG.info("Started process for Seleceted attributes......Getting criteria, attr visibility, data types, etc... ");

 	Iterator<CPFAttribute> itrCPFAttributes = selectedAttributes.iterator();

 	int counterForTest = 0;

 	while(itrCPFAttributes.hasNext()) {

 		CPFAttribute cpfAttribute = (CPFAttribute)itrCPFAttributes.next();

 		ModelAttribute modelAttribute = cpfAttribute.getModelAttrib();

 		CPFConstants.AttributeDataType dt = null;

 		dt = modelAttribute.getDataType();

 		modelAttribute.getDataType();

 		String temp = new String();
 		
 		String tempLabel =new String();
 		
 		int portletId = cpfScreen.getPortletRef().getPortletId();	
 		
 		String baseEntityName = cpfScreen.getPortletRef().getBaseEntity().getName();
 		
 		tempLabel = tempLabel.concat("L"+portletId+"_");

		if(CPFArgument.getOperationId() > 0 && resourceName.equals(baseEntity.getName())) {
		
			fields = fields.concat(mainPropertyName);
        	temp = temp.concat(mainPropertyName);
			
		} else {		
		
 			fields = fields.concat(resourceName);
        	temp = temp.concat(resourceName);
 			
 		}
        //temp = temp.concat(resourceName);
        
        if(CPFArgument.getOperationId() > 0) {
        
        	tempLabel =tempLabel.concat(mainPropertyName);
        	
        } else {
        
        	tempLabel =tempLabel.concat(baseEntityName);
        	
        }
         
 		fields = fields.concat(".");
 		
        temp = temp.concat(".");
         
        tempLabel = tempLabel.concat("_"); //reeta

 		fields = fields.concat(modelAttribute.getName());

// reeta
        String label=cpfAttribute.getLabel();
        
        if(label != null) {
        
           if(label.indexOf(" ")!=-1){
           
        	label=label.replace(" ","_");
        	
        	}
         	tempLabel = tempLabel.concat(label);
        }
 		temp = temp.concat(modelAttribute.getName());


 		fields = fields.concat(", ");

 		if(cpfAttribute.getRolesException() != null) {

 			List<String> rolesList = cpfAttribute.getRolesException().get(CPFConstants.OperationType.LIST);

 			attrbVisibility.add(rolesList);

 		} else {

 			attrbVisibility.add(null);

 		}

 		LOG.info("Attb Vis counter : " + counterForTest++);

 		if(dt != null && dt.equals(CPFConstants.AttributeDataType.TEXT)) {

 			dataTypes.add("TEXT");

 		} else if(dt != null && (dt.equals(CPFConstants.AttributeDataType.NUMERIC) 

 					|| dt.equals(CPFConstants.AttributeDataType.INTEGRAL) 

 						|| dt.equals(CPFConstants.AttributeDataType.DATE)

 							|| dt.equals(CPFConstants.AttributeDataType.INTERVAL)

 								|| dt.equals(CPFConstants.AttributeDataType.TIMESTAMP))) {

 			dataTypes.add("NUMERIC");	

 		} else {

 			dataTypes.add("NOTPOSSIBLE");

 		}

 		attbsValues.add(temp);
 		attbsLabels.add(tempLabel);
        nestedLink.add(false);

 	}

	fields = fields.substring(0, fields.lastIndexOf(","));

	//if(!resourceName.equals(baseEntity.getName())) {

	if(CPFArgument.getOperationId() > 0) {

		from = from.concat(baseEntity.getName());

		from = from.concat(" ");

		from = from.concat(baseEntity.getName());

		from = from.concat(" left join ");

		from = from.concat(baseEntity.getName() + ".");

		from = from.concat(mainPropertyName);

		from = from.concat(" ");
		
		if (resourceName.equals(baseEntity.getName())) {
			from = from.concat(mainPropertyName);
		} else {
			from = from.concat(resourceName);
		}

	} else {

		from = from.concat(resourceName);

		from = from.concat(" ");

		from = from.concat(resourceName);

	}

	

		//Only in case of generating Managed bean for Base Entity ....

		//Edited on 23rd Feb..

	//if(resourceName.equals(baseEntity.getName ()) && nestedAttributes != null) {

	if(CPFArgument.getOperationId() == 0 && nestedAttributes != null) {

		LOG.info("Doing for dependent entities..");

		Iterator<RelationKey> itrModelEntity = nestedAttributes.keySet().iterator();

		while(itrModelEntity.hasNext()) {

			RelationKey relationKey = itrModelEntity.next();  

			List<CPFAttribute> cpfAttributes = nestedAttributes.get(relationKey);

			RelationShipInfo tempRSI = relationKey.getRelationShipInfo();

			CPFConstants.RelationshipType relation = tempRSI.getMapping(); 

			//ModelEntity tempModelEntity = relationKey.getReferencedEntity();

			if((!relation.equals(CPFConstants.RelationshipType.OneToMany)) && (!relation.equals(CPFConstants.RelationshipType.ManyToMany))) {

				RelationShipInfo relationShipInfo = tempRSI;

				from = from.concat(" left join ");

				from = from.concat(baseEntity.getName());

				from = from.concat(".");

				from = from.concat(relationShipInfo.getPropertyName());

				from = from.concat(" ");

				//from = from.concat(tempModelEntity.getName());

				from = from.concat(relationShipInfo.getPropertyName());

		

				Iterator<CPFAttribute> itrCpfAttributes = cpfAttributes.iterator();

				while(itrCpfAttributes.hasNext()) {

					CPFAttribute otherCpfAttribute = (CPFAttribute)itrCpfAttributes.next();

					ModelAttribute otherModelAttribute = otherCpfAttribute.getModelAttrib();

					CPFConstants.AttributeDataType dt = otherModelAttribute.getDataType();

					String temp = new String();
					String tempLabel= new String();

					fields = fields.concat(", ");

					//fields = fields.concat(tempModelEntity.getName());

					fields = fields.concat(relationShipInfo.getPropertyName());

					temp = temp.concat(relationShipInfo.getPropertyName());

                    //Reeta added
                    int portletId = cpfScreen.getPortletRef().getPortletId();	
 		            tempLabel = tempLabel.concat("L"+portletId+"_");
					tempLabel = tempLabel.concat(relationShipInfo.getPropertyName());

					fields = fields.concat(".");
                    temp = temp.concat("."); 
					//reeta
					tempLabel= tempLabel.concat("_");
					

					fields = fields.concat(otherModelAttribute.getName());

                    //reeta
                     String label=otherCpfAttribute.getLabel();
                     if(label!=null){
                       if(label.indexOf(" ")!=-1)
                      label=label.replace(" " ,"_");
                     }
                     tempLabel = tempLabel.concat(label);
					temp = temp.concat(otherModelAttribute.getName());

                   
                     
					if(otherCpfAttribute.getRolesException() != null) {

						List<String> rolesList = otherCpfAttribute.getRolesException().get(CPFConstants.OperationType.LIST);

 						attrbVisibility.add(rolesList);

 					} else {

 						attrbVisibility.add(null);

 					}

 					LOG.info("Attb Vis counter : " + counterForTest++);

 					if(dt.equals(CPFConstants.AttributeDataType.TEXT)) {

 						dataTypes.add("TEXT");

 					} else if(dt.equals(CPFConstants.AttributeDataType.NUMERIC) 

 								|| dt.equals(CPFConstants.AttributeDataType.INTEGRAL) 

 									|| dt.equals(CPFConstants.AttributeDataType.DATE)

 										|| dt.equals(CPFConstants.AttributeDataType.INTERVAL)

 											|| dt.equals(CPFConstants.AttributeDataType.TIMESTAMP)) {

 						dataTypes.add("NUMERIC");

 					} else {

 						dataTypes.add("NOTPOSSIBLE");

 					}

 					attbsValues.add(temp);
 					attbsLabels.add(tempLabel);
                    nestedLink.add(false);

				}

			} else {

				List<String> rolesList = null;

				attrbVisibility.add(rolesList);	//TODO How to get rolesList in case of nested?..

				String jspName = cpfScreen.getNestedJspNames().get(relationKey).getJspName();

				LOG.info("Attb Vis counter nested relation : " + jspName + " : " + counterForTest++);

				dataTypes.add("NOTPOSSIBLE");

				nestedLink.add(true);

				attbsValues.add("NOTPOSSIBLE");
				
				attbsLabels.add(null);

			}

		}

	}

		//Added cpfScreen.getExtraListPredicate ().trim().length() > 0 on 16th Feb

	if(cpfScreen.getExtraListPredicate () != null && cpfScreen.getExtraListPredicate ().trim().length() > 0) {

		LOG.info("Filter has been defined for this screen...and adding it as where field..");

		where = where.concat(cpfScreen.getExtraListPredicate ());

		where = where.concat(" and ");

	}

	//if(!resourceName.equals(baseEntity.getName())) {

	if(CPFArgument.getOperationId() > 0) {

		where = where.concat(baseEntity.getName());

		where = where.concat(".");

		where = where.concat(baseEntity.getPrimaryKey());

		where = where.concat("=\" + ");

		where = where.concat("this.primaryKeyValue + ");

		where = where.concat(" \" and  ");

	}

	where = where.concat(baseEntity.getName());

	where = where.concat(".merchantAccount= (select merchantAccount from Organization merchantAccount where merchantAccount.organizationId=");

	

	String className = new String();

	

	if(CPFArgument.getOperationId() > 0) {

		className = "ListMBean" + operationId + "_nested" + CPFArgument.getClassName();

	} else {

		className = "ListMBean_"+operationId;

	}

	LOG.info("Adding imports to Class..");

%>



/**********************************************************************
* GENBAND, Inc. Confidential and Proprietary
*
* This work contains valuable confidential and proprietary
* information.
* Disclosure, use or reproduction without the written authorization of
* GENBAND, Inc. is prohibited. This unpublished work by GENBAND, Inc.
* is protected by the laws of the United States and other countries.
* If publication of the work should occur the following notice shall
* apply:
*
* "Copyright 2008 GENBAND, Inc. All rights reserved."
**********************************************************************
**/

/**********************************************************************
*
* Project: MAPS
*
* Package: com.genband.m5.maps.mbeans
*
* File: <%= className %>.java
*
* Desc: Managed Bean for <%= cpfScreen.getJspName() %>.
*
* Author Date Description
* ---------------------------------------------------------
* Genband <%= new java.util.Date(System.currentTimeMillis()) %> Initial Creation
*
**********************************************************************
**/

package com.genband.m5.maps.mbeans;

<%

	if(CPFArgument.getOperationId() > 0) {

%>
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

<%

	}

%>
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.HashMap;
import javax.faces.model.*;
import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import com.genband.m5.maps.common.CPFException;
import com.genband.m5.maps.common.AuxiliaryDetails;
import com.genband.m5.maps.common.Criteria;
import com.genband.m5.maps.common.SS_Constants;
import com.genband.m5.maps.common.CPFConstants;
import com.genband.m5.maps.common.User;
import com.genband.m5.maps.common.AuxiliaryDetails.SearchInfo;
import com.genband.m5.maps.common.CPFManager;
import com.genband.m5.maps.common.PortletFacesUtils;
import javax.portlet.PortletPreferences;
import javax.portlet.PortletRequest;
import javax.portlet.PortletSession;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Set;
import org.jboss.security.SecurityAssociation;
import java.security.Principal;
import com.genband.m5.maps.identity.GBUserPrincipal;
import <%= baseEntity.getCanonicalTypeName() %>;
<%

	if(!modelEntity.getName().equals(baseEntity.getName())) {

%>
import <%= modelEntity.getCanonicalTypeName() %>;
<%

	}

%>
<%

	if(!baseEntity.getName().equals("Organization")) {

%>
import com.genband.m5.maps.common.entity.Organization;
<%

	}

%>

public class <%= className %> {

//Variables Declaration
	private boolean canCreate;
	
	private boolean canModify;

	private boolean canView;

	private boolean canDelete;	

<%

	LOG.info("Declaring variables in clss");

	if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

%>	
	private String searchKey;

	private String searchOperator;

	private Object searchValue;	

	private boolean searechCaseSensitive;	

	private Map<String, SelectItemGroup> searchFields = new HashMap<String, SelectItemGroup>();  //Map of Attribute and their supportable search Operators depending upon its DataType	

	private List<SelectItem> attbs;	

	private SelectItemGroup operators;

<%

	}

%>
	private String primaryKeyName;

<%

	//if(actionsSupported.contains(CPFConstants.OperationType.SORT)) {

%>	
	private String orderBy;

	private String orderByState = null;	

	private boolean ascending;

<%

	//}

%>
	private int pageSize = <%= cpfScreen.getPreference().getPagination() %>;

	private int rowNumber;	

	private Criteria criteria;	

	private Long primaryKeyValue;	

	private int operationId;	

	private int numberOfRecords;	

	private boolean initialCall = true;	

	private boolean nextDisabled;	

	private boolean previousDisabled;

	private String userRole;	

	private List<Boolean> listVisibility;	

	private List<SelectItem> radio;	

	private int mode;	

	private List<Object[]> coll;
	
	private Integer delStatus;
//End of variables Declaration

	//Default Constructor

	public <%= className %> () {

	}

//Start Of Setters and Getters
	public boolean isCanCreate() {
		return canCreate;
	}	

	public void setCanCreate(boolean canCreate) {
		this.canCreate = canCreate;
	}

	public boolean isCanModify() {
		return canModify;
	}	

	public void setCanModify(boolean canModify) {
		this.canModify = canModify;
	}		

	public boolean isCanView() {
		return canView;
	}	

	public void setCanView(boolean canView) {
		this.canView = canView;
	}	

	public boolean isCanDelete() {
		return canDelete;
	}	

	public void setCanDelete(boolean canDelete) {
		this.canDelete = canDelete;
	}	

<%

	LOG.info("Defining Getters and Setters...");

	if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

%>	
	public String getSearchKey() {
		return searchKey;
	}

	public void setSearchKey(String searchKey) {
		this.searchKey = searchKey;
	}

	public String getSearchOperator() {
		return searchOperator;
	}

	public void setSearchOperator(String searchOperator) {
		this.searchOperator = searchOperator;
	}

	public Object getSearchValue() {
		return searchValue;
	}

	public void setSearchValue(Object searchValue) {
		this.searchValue = searchValue;
	}

	public boolean isSearechCaseSensitive() {
		return searechCaseSensitive;
	}

	public void setSearechCaseSensitive(boolean searechCaseSensitive) {
		this.searechCaseSensitive = searechCaseSensitive;
	}

	public List<SelectItem> getAttbs() {
		return this.attbs;
	}	

	public void getAttbs(List<SelectItem> attbs) {
		this.attbs = attbs;
	}	

	public SelectItemGroup getOperators() {
		this.operators = getSearchFields().get(this.getSearchKey());
		return operators;
	}

	public void setOperators(SelectItemGroup operators) {
		this.operators = operators;
	}

	public Map<String, SelectItemGroup> getSearchFields() {
		return searchFields;
	}

	public void setSearchFields(Map<String, SelectItemGroup> searchFields) {
		this.searchFields = searchFields;
	}

<%

	}

%>
	public String getPrimaryKeyName() {
		return primaryKeyName;
	}

	public void setPrimaryKeyName(String primaryKeyName) {
		this.primaryKeyName = primaryKeyName;
	}

<%

	if(actionsSupported.contains(CPFConstants.OperationType.SORT)) {

%>
	public String getOrderBy() {
		return orderBy;
	}

	public void setOrderBy(String orderBy) {
		this.orderBy = orderBy;
	}	

	public String getOrderByState() {
		return orderByState;
	}

	public void setOrderByState(String orderByState) {
		this.orderByState = orderByState;
	}

	public boolean isAscending() {
		return ascending;
	}

	public void setAscending(boolean ascending) {
		this.ascending = ascending;
	}

<%

	}

%>
	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getRowNumber() {
		return rowNumber;
	}

	public void setRowNumber(int rowNumber) {
		this.rowNumber = rowNumber;
	}

	public Criteria getCriteria() {
		return criteria;
	}

	public void setCriteria(Criteria criteria) {
		this.criteria = criteria;
	}

	public int getOperationId() {
		return operationId;
	}

	public void setOperationId(int operationId) {
		this.operationId = operationId;
	}	

	public Long getPrimaryKeyValue() {
		return primaryKeyValue;
	}

	public void setPrimaryKeyValue(Long primaryKeyValue) {
		this.primaryKeyValue = primaryKeyValue;
	}	

	public int getNumberOfRecords() {
		return numberOfRecords;
	}

	public void setNumberOfRecords(int numberOfRecords) {
		this.numberOfRecords = numberOfRecords;
	}

	public boolean isNextDisabled() {
		return nextDisabled;
	}

	public void setNextDisabled(boolean nextDisabled) {
		this.nextDisabled = nextDisabled;
	}

	public boolean isPreviousDisabled() {
		this.mode = 0;
		return previousDisabled;
	}

	public void setPreviousDisabled(boolean previousDisabled) {
		this.previousDisabled = previousDisabled;
	}	

	public String getUserRole() {
		return userRole;
	}

	public void setUserRole(String userRole) {
		this.userRole = userRole;
	}	

	public List<Boolean> getListVisibility() {
		return listVisibility;
	}

	public void setListVisibility(List<Boolean> listVisibility) {
		this.listVisibility = listVisibility;
	}	

	public List<SelectItem> getRadio() {
		return radio;
	}

	public void setRadio(List<SelectItem> radio) {
		this.radio = radio;
	}	

	public int getMode() {
		return mode;
	}

	public void setMode(int mode) {
		this.mode = mode;
	}	

	public List<Object[]> getColl() {
		return coll;
	}

	public void setColl(List<Object[]> coll) {
		this.coll = coll;
	}
	
	public Integer getDelStatus() {
		return delStatus;
	}

	public void setDelStatus(Integer delStatus) {
		this.delStatus = delStatus;
	}
//End of Setters and Getters


	//For deleting a record (If User does not have permission then this will throw Exception or failure Message)
	public String delete (ActionEvent e) {

		FacesContext ctx = FacesContext.getCurrentInstance();
		Locale currentLocal=ctx.getViewRoot().getLocale();
		String code=currentLocal.getLanguage() + "_"+ currentLocal.getCountry();
		InputStream stream=this.getClass().getClassLoader().getResourceAsStream("bundle/resources_"+code+".properties");
		if(stream==null){
			stream=this.getClass().getClassLoader().getResourceAsStream("bundle/resources.properties");
		}
		Properties bundle=new Properties();
	    try {
			bundle.load(stream);
		} catch (IOException ie) {
			ie.printStackTrace();
		}
		
		this.mode = 0;

		this.operationId = this.getOperationId(CPFConstants.OperationType.DELETE);
		
		String returnValue = null;

		try{
			returnValue = CPFManager.delete (this.getBaseObject(), this.primaryKeyValue, this.operationId);
		} catch (CPFException e1) {
			ctx.addMessage(e.getComponent().getClientId(ctx), new FacesMessage(bundle.getProperty("del_failure") + e1.getMessage()));
			this.delStatus = new Integer(0);
			return SS_Constants.ReturnMessage.PROVERROR.toString();
		}
		ctx.addMessage(e.getComponent().getClientId(ctx), new FacesMessage(bundle.getProperty("del_success")));
		
		this.operationId = this.getOperationId(CPFConstants.OperationType.LIST);	

		if(this.coll.size() == 1 && this.rowNumber != 0) {

			this.rowNumber = this.rowNumber - this.pageSize;

			this.criteria.getSearchDetails().setRowNumber(this.rowNumber);

		}
		this.delStatus = new Integer(1);
		this.primaryKeyValue = null;

		return returnValue;

	}
	//End of Deleting a record	

	//Getting result as Collection of Array Objects to display the result on listing page
	public Collection<Object[]> getCollec () throws Exception {

		List<Object[]> coll = new ArrayList<Object[]>();

<%

		if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

%>
		this.searechCaseSensitive = false;

		this.searchValue = null;

<%

		}

%>
<%

		if(CPFArgument.getOperationId() == 0) {

%>
		this.primaryKeyValue = null;

<%

		}

%>
		if(this.initialCall) {

			FacesContext ctx = FacesContext.getCurrentInstance();

			//PortletPreferences pref = PortletFacesUtils.getPortletPreferences(ctx);

			//String val = pref.getValue("pageSize", "10");

			//this.pageSize = Integer.parseInt(val);

			this.userIsInRole(ctx);

			this.getListVisibility(this.userRole);

			this.setRowNumber(0);

			this.criteria = this.getDefaultCriteria();

			this.initialCall = false;

<%

	LOG.info("Definign getCollec method in class..");

	if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

%>
			this.loadAttbsOperators(this.userRole);

<%

	}

%>
		}

		//coll = (List<Object[]>)CPFManager.getResult(this.operationId, this.criteria);

		this.setOperationId(this.getOperationId(CPFConstants.OperationType.LIST));

		if(this.mode == 0) {

			if(this.orderByState == null) {

				this.ascending = true;

				this.criteria.getSearchDetails().setAscending(this.ascending);
				
<%
				if(CPFArgument.getOperationId() > 0 && resourceName.equals(baseEntity.getName())) {
%>
					this.orderBy = new String("<%= mainPropertyName %>.<%= selectedAttributes.get(1).getModelAttrib().getName() %>");
<%
				} else {
%>
					this.orderBy = new String("<%= modelEntity.getName() %>.<%= selectedAttributes.get(1).getModelAttrib().getName() %>");
<%
				}
%>

				this.criteria.getSearchDetails().setOrderBy(this.orderBy);

				this.orderByState = this.orderBy;

			}

			coll = (List<Object[]>)CPFManager.getResult(this.operationId, this.criteria);

			this.mode = 1;

			this.coll = coll;

		//}			

		if(this.coll.size() != this.pageSize + 1) {

			this.setNextDisabled(true);

		} else {

			this.setNextDisabled(false);

		}		

		if(this.coll.size() < this.pageSize + 1) {

			this.setNextDisabled(true);

		}		

		if(this.rowNumber == 0) {

			this.setPreviousDisabled(true);

		} else {

			this.setPreviousDisabled(false);

		}		

		if(this.coll.size() == this.pageSize + 1) {

			this.coll.remove(this.pageSize);

		}		

		radio = new ArrayList<SelectItem>();

		for (Object[] objects : this.coll) {

				SelectItem item = new SelectItem();

				item.setValue(objects[0]);

				item.setLabel("");

				radio.add(item);

		}

		}

		return (Collection<Object[]>) this.coll;

	}
	//End of Listing

<%

	if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

	LOG.info("Search is supported and defining search method in Class..");

%>	
		//Funtion for Searching details
	public String search () throws Exception  {

		if(this.searchValue != null && this.searchValue.toString().trim().length() > 0) {	

			this.criteria = this.getDefaultCriteria();

			AuxiliaryDetails searchDetails = this.criteria.getSearchDetails();

			SearchInfo searchInfo = new SearchInfo ();

			CPFConstants.Operators operator = CPFConstants.Operators.valueOf(searchOperator);

			searchInfo.setOperator(operator);

			searchInfo.setSearchKey(this.searchKey);

			searchInfo.setSearchValue(searchValue);

			searchInfo.setSearechCaseSensitive(searechCaseSensitive);		

			searchDetails.setSearchInfo(searchInfo);

			searchDetails.setSearch(true);

			this.rowNumber = 0;

			searchDetails.setRowNumber(rowNumber);

			this.criteria.setSearchDetails(searchDetails);

			this.mode = 0;

		}		

		this.initialCall = false;

		return SS_Constants.ReturnMessage.SUCCESS.toString();

	}
	//End of searching details	

	public String reset () {

		this.mode = 0;

		this.initialCall = true;

		this.searchValue = null;

		this.orderByState = null;

		this.criteria.reset(this.pageSize);

		return "SUCCESS";

	}	

<%

	}

%>
<%

	LOG.info("Sort is also supported and defining sort method to Class");

	if(actionsSupported.contains(CPFConstants.OperationType.SORT)) {

%>
		//Function to Sort on one Column
	public String sort () throws Exception {

		this.mode = 0;

		FacesContext ctx = FacesContext.getCurrentInstance();

		ExternalContext exCtx = ctx.getExternalContext();

		Map<String, String> params = exCtx.getRequestParameterMap();

		String val = (String)params.get("sortBy");

		System.out.println("Order By: " + val);

		this.criteria = this.getDefaultCriteria();

		AuxiliaryDetails searchDetails = this.criteria.getSearchDetails();

		//this.ascending = true;

		this.orderBy = val;

		if(orderBy.equals(this.orderByState)) {

			this.ascending = !(this.ascending);	

		} else {

			this.ascending = true;

			this.orderByState = this.orderBy;

		}

		searchDetails.setAscending(this.ascending);

		this.rowNumber = 0;

		searchDetails.setRowNumber(rowNumber);

		searchDetails.setOrderBy(orderBy);

		searchDetails.setSearch(false);

		this.criteria.setSearchDetails(searchDetails);

		this.setCriteria(criteria);

		String returnString = "SUCCESS";

		this.initialCall = false;

		return returnString;

	}
	//End of Sorting

<%

	}

	LOG.info("Adding pageChange method to clas...");

%>
		//For viewing list of next records
	public String pageChange (ActionEvent e) throws Exception {

		this.mode = 0;

		String componentId = e.getComponent().getId();

		//this.criteria = this.getDefaultCriteria();

		AuxiliaryDetails auxiliaryDetails = this.criteria.getSearchDetails();

		if(componentId.equals(SS_Constants.PAGEFLOW_NEXT)) {

			this.rowNumber = this.rowNumber + this.pageSize;

		} else if(componentId.equals(SS_Constants.PAGEFLOW_PREVIOUS)) {

			this.rowNumber = this.rowNumber - this.pageSize;

		} 

		auxiliaryDetails.setRowNumber(rowNumber);

		criteria.setSearchDetails(auxiliaryDetails);

		this.setCriteria(criteria);

		this.initialCall = false;

		return "SUCCESS";

	}
	

	private <%= resourceName %> getBaseObject () {

		<%= resourceName %> baseObject = new <%= resourceName %> ();

		return baseObject;

	}

		//This will return default Criteria Object 
	private Criteria getDefaultCriteria () throws Exception {

		Criteria c = new Criteria();

		String fields = "<%= fields %>";

		c.setFields(fields);

		c.setFrom("<%= from %>");

		Organization merchantAccount = _getMerchantAccount ();

		Long merchantId = merchantAccount.getOrganizationId();

		c.setWhere("<%= where %>" + merchantId + ")");	

		c.setBaseEntityName("<%= modelEntity.getName() %>");

		c.setBasePrimaryKey("<%= modelEntity.getPrimaryKey () %>");

		AuxiliaryDetails auxiliaryDetails = new AuxiliaryDetails();

		auxiliaryDetails.setPageSize(pageSize);

		auxiliaryDetails.setRowNumber(rowNumber);

		auxiliaryDetails.setSearch(false);

		c.setSearchDetails(auxiliaryDetails);

		return c;

	}	

		//This will returns MerchantAccount Object of Current User
	private Organization _getMerchantAccount() throws Exception {

		//commenting out security ...
<%

	if(modelEntity.isStatic()) {

%>
		Organization o =  new Organization ();

		o.setOrganizationId (new Long (-1));

		return o;

<%

	} else {

%>
		/*FacesContext ctx = FacesContext.getCurrentInstance();

		PortletRequest request = PortletFacesUtils.getPortletRequest(ctx);

		PortletSession session = request.getPortletSession();

		Object obj = session.getAttribute ("User");

		User user = (User)obj;

		return user.getMerchantAccount ();*/
            Set<Principal> s = SecurityAssociation.getSubject().getPrincipals();            

            for (Principal principal : s) {

            	//LOG.debug ("sub principal: " + principal.getClass().getName());

                if (principal instanceof GBUserPrincipal) {

                	//LOG.debug ("p: " + principal);                              

                    Organization enterprise = ((GBUserPrincipal) principal).getMerchantAccount();

                    long enterpriseId = enterprise.getOrganizationId();

                    //LOG.debug("enterpriseId = " + enterpriseId);

                    return enterprise;

                }
                        
            }            

            //Organization o = new Organization ();

            //o.setOrganizationId (new Long (0));

            return null;
            
<%

	}

%>
	}

		//This will return Operation Id depending upon user's Role and OperationType
	private int getOperationId (CPFConstants.OperationType opType){
		int opId = -99;
		FacesContext ctx = FacesContext.getCurrentInstance();
		ExternalContext exCtx = ctx.getExternalContext();
<%
		LOG.info("Adding getOperaionId method to Class...");
		//Iterator<CPFConstants.OperationType> supportedOpTypes = actionsSupported.iterator();
		Iterator<CPFConstants.OperationType> supportedOpTypes = cpfScreen.getMappedRoles().keySet().iterator();
		while(supportedOpTypes.hasNext()) {
			CPFConstants.OperationType operation = supportedOpTypes.next();
			String operationType = operation.toString();
			//if(operation.equals(CPFConstants.OperationType.LIST) || operation.equals(CPFConstants.OperationType.DELETE)) {
%>
			if(opType.equals(CPFConstants.OperationType.<%= operationType %>)) {
<%
				Map<Integer, String[]> mappedRoles = cpfScreen.getOperationRoleMap(operation);
				if(mappedRoles != null) {
				Iterator<Integer> mappedOperationId = mappedRoles.keySet().iterator();
				while(mappedOperationId.hasNext()) {
					Integer opId = mappedOperationId.next();
					String ifCondition = new String();
					String[] roles = mappedRoles.get(opId);
					for (String roleName : roles) {
						ifCondition = ifCondition.concat("exCtx.isUserInRole(\"");
						ifCondition = ifCondition.concat(roleName);
						ifCondition = ifCondition.concat("\") || ");
					}  
					ifCondition = ifCondition.substring(0, ifCondition.lastIndexOf(")")+1);
%>
				if(<%= ifCondition %>) {
					opId = <%= opId.intValue() %>;
				}
<%
				}
				}
%>
			}
<%		
			//}
		}
%>
		return opId;
		//return -1;
	}

	private void userIsInRole (FacesContext context) throws CPFException {

		ExternalContext exContext = context.getExternalContext();
<%
		LOG.info("Adding userUsInRole method to Class...");
		List<String> roles = cpfScreen.getMappedRoles().get(CPFConstants.OperationType.LIST);
		Iterator<String> itrRoles = roles.iterator();
		while(itrRoles.hasNext()) {
			String roleIs = itrRoles.next();
%>
			if (exContext.isUserInRole("<%= roleIs %>")) {
				this.setUserRole("<%= roleIs %>");
			} else
<%
		}
%>
			{
				throw new CPFException("Not Authenticated please contact provider for necessary  privileges", 4046);
			}
<%
		String ifCond4Role = null;
%>
<%
			if(actionsSupported.contains(CPFConstants.OperationType.CREATE)
				&& cpfScreen.getPortletRef().getDetailsScreen().getMappedRoles()
					.get(CPFConstants.OperationType.CREATE) != null) {

				List<String> createRoles = cpfScreen.getPortletRef().getDetailsScreen()
											.getMappedRoles().get(CPFConstants.OperationType.CREATE);
				ifCond4Role = new String();
				for(Iterator<String> itrRole=createRoles.iterator(); itrRole.hasNext();itrRole.hasNext()) {
					ifCond4Role = ifCond4Role.concat("exContext.isUserInRole(");
					ifCond4Role = ifCond4Role.concat("\"" + itrRole.next() + "\")");
					if(itrRole.hasNext()) {
						ifCond4Role = ifCond4Role.concat(" || ");
					}
				}
				//if(createRoles.contains(roleIs)) {
%>
		if(<%= ifCond4Role %>) {
			this.canCreate = true;
		} else {
			this.canCreate = false;
		}
<%
				//}
			} else {	//End of if(actionsSupported.contains(CPFConstants.OperationType.CREATE))
%>
			this.canCreate = false;
<%
			}
			
			if(actionsSupported.contains(CPFConstants.OperationType.MODIFY)
				&& cpfScreen.getPortletRef().getDetailsScreen().getMappedRoles()
					.get(CPFConstants.OperationType.MODIFY) != null) {

				List<String> modifyRoles = cpfScreen.getPortletRef().getDetailsScreen()
											.getMappedRoles().get(CPFConstants.OperationType.MODIFY);
				ifCond4Role = new String();
				for(Iterator<String> itrRole=modifyRoles.iterator(); itrRole.hasNext();itrRole.hasNext()) {
					ifCond4Role = ifCond4Role.concat("exContext.isUserInRole(");
					ifCond4Role = ifCond4Role.concat("\"" + itrRole.next() + "\")");
					if(itrRole.hasNext()) {
						ifCond4Role = ifCond4Role.concat(" || ");
					}
				}
				//if(modifyRoles.contains(roleIs)) {
%>
		if(<%= ifCond4Role %>) {
			this.canModify = true;
		} else {
			this.canModify = false;
		}
<%
				//}
			} else {	//End of if(actionsSupported.contains(CPFConstants.OperationType.MODIFY))
%>
			this.canModify = false;
<%
			}
			if(actionsSupported.contains(CPFConstants.OperationType.VIEW)
				&& cpfScreen.getPortletRef().getDetailsScreen().getMappedRoles()
					.get(CPFConstants.OperationType.VIEW) != null) {

				List<String> viewRoles = cpfScreen.getPortletRef().getDetailsScreen()
											.getMappedRoles().get(CPFConstants.OperationType.VIEW);
				ifCond4Role = new String();
				for(Iterator<String> itrRole=viewRoles.iterator(); itrRole.hasNext();itrRole.hasNext()) {
					ifCond4Role = ifCond4Role.concat("exContext.isUserInRole(");
					ifCond4Role = ifCond4Role.concat("\"" + itrRole.next() + "\")");
					if(itrRole.hasNext()) {
						ifCond4Role = ifCond4Role.concat(" || ");
					}
				}
				//if(viewRoles.contains(roleIs)) {
%>
		if(<%= ifCond4Role %>) {
			this.canView = true;
		} else {
			this.canView = false;
		}
<%
			//	}
			} else {	//End of if(actionsSupported.contains(CPFConstants.OperationType.VIEW))
%>
			this.canView = false;
<%
			}
			if(actionsSupported.contains(CPFConstants.OperationType.DELETE)
				&& cpfScreen.getMappedRoles().get(CPFConstants.OperationType.DELETE) != null) {

				List<String> deleteRoles = cpfScreen.getMappedRoles().get(CPFConstants.OperationType.DELETE);
				ifCond4Role = new String();
				for(Iterator<String> itrRole=deleteRoles.iterator(); itrRole.hasNext();itrRole.hasNext()) {
					ifCond4Role = ifCond4Role.concat("exContext.isUserInRole(");
					ifCond4Role = ifCond4Role.concat("\"" + itrRole.next() + "\")");
					if(itrRole.hasNext()) {
						ifCond4Role = ifCond4Role.concat(" || ");
					}
				}
				//if(deleteRoles.contains(roleIs)) {
%>
		if(<%= ifCond4Role %>) {
			this.canDelete = true;
		} else {
			this.canDelete = false;
		}
<%
				//}
			} else {	//End of if(actionsSupported.contains(CPFConstants.OperationType.DELETE))
%>
			this.canDelete = false;
<%
			}
%>
		//} else
<%
		//}  //End of while();
%>
		//{
		//	throw new CPFException("Not Authenticated please contact provider for necessary  privileges", 4046);
		//}
	}

//Start of getting visibility for listing columns	

	private void getListVisibility(String userRole) {

		this.listVisibility = new ArrayList<Boolean>();

<%

		LOG.info("Adding getListVisibility method to Class...");

		itrRoles = roles.iterator();

		while(itrRoles.hasNext()) {

			String roleIs = itrRoles.next();

%>

		if(userRole.equals("<%= roleIs %>")) {

<%

			Iterator<List<String>> itrAttrbVisibility = attrbVisibility.iterator();

			while(itrAttrbVisibility.hasNext()) {

				List<String> tempRoles = itrAttrbVisibility.next();

				if(tempRoles == null) {

%>

			this.listVisibility.add(true);

<%

				} else if(tempRoles.size() == 0 || !tempRoles.contains(roleIs)) {

%>

			this.listVisibility.add(true);

<%

				} else {

%>

			this.listVisibility.add(false);

<%

				}

			}

%>

		}

<%

		}

%>

	}

//End of getting visibility for listing columns

<%

	if(actionsSupported.contains(CPFConstants.OperationType.SEARCH)) {

	LOG.info("As Search is supporting adding loadAttbsOperato");

%>	

	private void loadAttbsOperators(String userRole) {

			//Independent of User Role
		searchFields = new HashMap<String, SelectItemGroup>();
		Map<String, SelectItemGroup> temp = new HashMap<String, SelectItemGroup>();
		SelectItemGroup selectItemGrp = null;
		SelectItem[] supportedOperators = null;
		selectItemGrp = new SelectItemGroup();
		supportedOperators = new SelectItem[6];
		supportedOperators[0] = new SelectItem();
		supportedOperators[0].setLabel(CPFConstants.Operators.EQUAL.toString());
		supportedOperators[0].setValue(CPFConstants.Operators.EQUAL.toString());
		supportedOperators[1] = new SelectItem();
		supportedOperators[1].setLabel(CPFConstants.Operators.GREATER_THAN.toString());
		supportedOperators[1].setValue(CPFConstants.Operators.GREATER_THAN.toString());
		supportedOperators[2] = new SelectItem();
		supportedOperators[2].setLabel(CPFConstants.Operators.GREATER_THAN_EQUAL.toString());
		supportedOperators[2].setValue(CPFConstants.Operators.GREATER_THAN_EQUAL.toString());
		supportedOperators[3] = new SelectItem();
		supportedOperators[3].setLabel(CPFConstants.Operators.LESS_THAN.toString());
		supportedOperators[3].setValue(CPFConstants.Operators.LESS_THAN.toString());
		supportedOperators[4] = new SelectItem();
		supportedOperators[4].setLabel(CPFConstants.Operators.LESS_THAN_EQUAL.toString());
		supportedOperators[4].setValue(CPFConstants.Operators.LESS_THAN_EQUAL.toString());
		supportedOperators[5] = new SelectItem();
		supportedOperators[5].setLabel(CPFConstants.Operators.NOT_EQUAL.toString());
		supportedOperators[5].setValue(CPFConstants.Operators.NOT_EQUAL.toString());
		
		selectItemGrp.setSelectItems(supportedOperators);
		
		temp.put("NUMERIC", selectItemGrp);
		
		selectItemGrp = new SelectItemGroup();
		supportedOperators = new SelectItem[3];
		supportedOperators[0] = new SelectItem();
		supportedOperators[0].setLabel(CPFConstants.Operators.CONTAINS.toString());
		supportedOperators[0].setValue(CPFConstants.Operators.CONTAINS.toString());
		supportedOperators[1] = new SelectItem();
		supportedOperators[1].setLabel(CPFConstants.Operators.NOT_CONTAINS.toString());
		supportedOperators[1].setValue(CPFConstants.Operators.NOT_CONTAINS.toString());
		supportedOperators[2] = new SelectItem();
		supportedOperators[2].setLabel(CPFConstants.Operators.EQUAL.toString());
		supportedOperators[2].setValue(CPFConstants.Operators.EQUAL.toString());
		selectItemGrp.setSelectItems(supportedOperators);
		temp.put("TEXT", selectItemGrp);
		
		attbs = new ArrayList<SelectItem>();
		FacesContext ctx = FacesContext.getCurrentInstance();
		Locale currentLocal=ctx.getViewRoot().getLocale();
		String code=currentLocal.getLanguage() + "_"+ currentLocal.getCountry();
		InputStream stream=this.getClass().getClassLoader().getResourceAsStream("bundle/resources_"+code+".properties");
		if(stream==null){
			stream=this.getClass().getClassLoader().getResourceAsStream("bundle/resources.properties");
		}
		Properties bundle=new Properties();
	    try {
			bundle.load(stream);
		} catch (IOException e) {
			e.printStackTrace();
		}
<%
		Iterator<String> itrAttbsValues = attbsValues.iterator();
		Iterator<String> itrDataTypes = dataTypes.iterator();
	    Iterator<String> itrAttLabels = attbsLabels.iterator();
	    
			//If U donot add it in code generator then u can delete these two lines
		itrDataTypes.next();	//Because added primaryKey extra so omitting that one
		itrAttbsValues.next();	//Because added primaryKey extra so omitting that one
		itrAttLabels.next();

		int i = 0;
		while(itrAttbsValues.hasNext()) {
			String dt = itrDataTypes.next();
			String t = itrAttbsValues.next();
			String l = itrAttLabels.next();
//			String la = t.replace('.', ' ');
			if(!dt.equals("NOTPOSSIBLE")) {
%>

		SelectItem s<%= i %> = new SelectItem();
		s<%= i %>.setValue("<%= t %>");
		s<%= i %>.setLabel(bundle.getProperty("<%= l %>"));
		attbs.add(s<%= i %>); 
		searchFields.put("<%= t %>", temp.get("<%= dt %>"));
<%
			}
			i++;
		}
%>

		//depends upon User Role
<%
		itrRoles = roles.iterator();
		while(itrRoles.hasNext()) {
			String roleIs = itrRoles.next();
			boolean skBool = true;	//SearchKey Boolean To set SearchKey initially to load in JSF.. First Visible Attribute name is setting
%>

		if(userRole.equals("<%= roleIs %>")) {
<%
			itrDataTypes = dataTypes.iterator();
			Iterator<Boolean> bool = nestedLink.iterator();
			Iterator<List<String>> itrAttrbVisibility = attrbVisibility.iterator();
			itrAttbsValues = attbsValues.iterator();
			
				//If U donot add it in code generator then u can delete these two lines
			itrDataTypes.next();	//Because added primaryKey extra so omitting that one
			itrAttbsValues.next();	//Because added primaryKey extra so omitting that one
			bool.next();			//Because added primaryKey extra so omitting that one
			itrAttrbVisibility.next();	//Because added primaryKey extra so omitting that one
			
			i = 0;
			while(itrDataTypes.hasNext()) {
				String dataType = itrDataTypes.next();
				String val = itrAttbsValues.next();
				List<String> vis = itrAttrbVisibility.next();
				boolean v = true;
				boolean b = bool.next();
				if(b) {
					continue;
				}
				if(vis != null && vis.contains(roleIs)) {
					v = false;
				}
				if(dataType.equals("NOTPOSSIBLE") || !v) {
%> 

					attbs.remove("<%= i %>");
					searchFields.remove("<%= val %>");
<%
				} else if(skBool){
					skBool = false;
%>

					this.searchKey = "<%= val %>";
<%
				}
				i++;
			}
%>

		}
<%
		}
%>

	}
<%
	}		//End of if loop for actionsSupported.contains(CPFConstants.OperationType.SEARCH)
	
		//These two functions are related to Nested Managed Beans only...
	if(CPFArgument.getOperationId() > 0) {
		LOG.info("As this is a nested screen managed bean adding r2Parent and action methods to the class to" +
					" return back to parent and come form parent into this screen ");
%>

	public String r2Parent(ActionEvent e) {
		this.initialCall = true;
		this.searchValue = null;
		this.primaryKeyValue = null;
		FacesContext ctx = FacesContext.getCurrentInstance();
		ELContext elCtx = ctx.getELContext();
		ExpressionFactory exF = ctx.getApplication().getExpressionFactory();
		ValueExpression ve = exF.createValueExpression(elCtx, "#{listMBean<%= operationId %>}", ListMBean_<%= operationId %>.class);
		ListMBean_<%= operationId %> res = (ListMBean_<%= operationId %>) ve.getValue(elCtx);
		res.setMode(0);	
		return "SUCCESS";
	}

	public String action(ActionEvent e) {
	
		FacesContext ctx = FacesContext.getCurrentInstance();
		ExternalContext ex = ctx.getExternalContext();
		String val1 = ex.getRequestParameterMap().get("pkValue");	//Getting primaryKey value to which nested list has to display from request parameters
		this.primaryKeyValue = new Long(val1);
		this.mode = 0;
		return "SUCCESS";
	}
<%
	}
	LOG.info("Managed Bean geenration completed from template side.....");
%>
}