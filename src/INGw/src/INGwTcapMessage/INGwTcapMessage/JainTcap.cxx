// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "JainTcap.hxx"

// error_req_event_type
// 

const error_req_event_type::parameters_optional& error_req_event_type::
parameters () const
{
  return this->parameters_;
}

error_req_event_type::parameters_optional& error_req_event_type::
parameters ()
{
  return this->parameters_;
}

void error_req_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void error_req_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void error_req_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const error_req_event_type::error_code_type& error_req_event_type::
error_code () const
{
  return this->error_code_.get ();
}

error_req_event_type::error_code_type& error_req_event_type::
error_code ()
{
  return this->error_code_.get ();
}

void error_req_event_type::
error_code (const error_code_type& error_code)
{
  this->error_code_.set (error_code);
}

void error_req_event_type::
error_code (::std::auto_ptr< error_code_type > error_code)
{
  this->error_code_.set (error_code);
}

const error_req_event_type::dialogue_id_optional& error_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

error_req_event_type::dialogue_id_optional& error_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void error_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void error_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const error_req_event_type::invoke_id_optional& error_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

error_req_event_type::invoke_id_optional& error_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void error_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void error_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const error_req_event_type::link_id_optional& error_req_event_type::
link_id () const
{
  return this->link_id_;
}

error_req_event_type::link_id_optional& error_req_event_type::
link_id ()
{
  return this->link_id_;
}

void error_req_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void error_req_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const error_req_event_type::error_type_type& error_req_event_type::
error_type () const
{
  return this->error_type_.get ();
}

error_req_event_type::error_type_type& error_req_event_type::
error_type ()
{
  return this->error_type_.get ();
}

void error_req_event_type::
error_type (const error_type_type& error_type)
{
  this->error_type_.set (error_type);
}

void error_req_event_type::
error_type (::std::auto_ptr< error_type_type > error_type)
{
  this->error_type_.set (error_type);
}


// timer_reset_req_event_type
// 

const timer_reset_req_event_type::dialogue_id_optional& timer_reset_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

timer_reset_req_event_type::dialogue_id_optional& timer_reset_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void timer_reset_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void timer_reset_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const timer_reset_req_event_type::invoke_id_optional& timer_reset_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

timer_reset_req_event_type::invoke_id_optional& timer_reset_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void timer_reset_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void timer_reset_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}


// gtindicator0001_type
// 

const gtindicator0001_type::address_information_optional& gtindicator0001_type::
address_information () const
{
  return this->address_information_;
}

gtindicator0001_type::address_information_optional& gtindicator0001_type::
address_information ()
{
  return this->address_information_;
}

void gtindicator0001_type::
address_information (const address_information_type& address_information)
{
  this->address_information_.set (address_information);
}

void gtindicator0001_type::
address_information (const address_information_optional& address_information)
{
  this->address_information_ = address_information;
}

void gtindicator0001_type::
address_information (::std::auto_ptr< address_information_type > address_information)
{
  this->address_information_.set (address_information);
}

const gtindicator0001_type::translation_type_optional& gtindicator0001_type::
translation_type () const
{
  return this->translation_type_;
}

gtindicator0001_type::translation_type_optional& gtindicator0001_type::
translation_type ()
{
  return this->translation_type_;
}

void gtindicator0001_type::
translation_type (const translation_type_type& translation_type)
{
  this->translation_type_.set (translation_type);
}

void gtindicator0001_type::
translation_type (const translation_type_optional& translation_type)
{
  this->translation_type_ = translation_type;
}

const gtindicator0001_type::numbering_plan_optional& gtindicator0001_type::
numbering_plan () const
{
  return this->numbering_plan_;
}

gtindicator0001_type::numbering_plan_optional& gtindicator0001_type::
numbering_plan ()
{
  return this->numbering_plan_;
}

void gtindicator0001_type::
numbering_plan (const numbering_plan_type& numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

void gtindicator0001_type::
numbering_plan (const numbering_plan_optional& numbering_plan)
{
  this->numbering_plan_ = numbering_plan;
}

void gtindicator0001_type::
numbering_plan (::std::auto_ptr< numbering_plan_type > numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

const gtindicator0001_type::nature_of_addr_ind_optional& gtindicator0001_type::
nature_of_addr_ind () const
{
  return this->nature_of_addr_ind_;
}

gtindicator0001_type::nature_of_addr_ind_optional& gtindicator0001_type::
nature_of_addr_ind ()
{
  return this->nature_of_addr_ind_;
}

void gtindicator0001_type::
nature_of_addr_ind (const nature_of_addr_ind_type& nature_of_addr_ind)
{
  this->nature_of_addr_ind_.set (nature_of_addr_ind);
}

void gtindicator0001_type::
nature_of_addr_ind (const nature_of_addr_ind_optional& nature_of_addr_ind)
{
  this->nature_of_addr_ind_ = nature_of_addr_ind;
}

void gtindicator0001_type::
nature_of_addr_ind (::std::auto_ptr< nature_of_addr_ind_type > nature_of_addr_ind)
{
  this->nature_of_addr_ind_.set (nature_of_addr_ind);
}

const gtindicator0001_type::encoding_scheme_optional& gtindicator0001_type::
encoding_scheme () const
{
  return this->encoding_scheme_;
}

gtindicator0001_type::encoding_scheme_optional& gtindicator0001_type::
encoding_scheme ()
{
  return this->encoding_scheme_;
}

void gtindicator0001_type::
encoding_scheme (const encoding_scheme_type& encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}

void gtindicator0001_type::
encoding_scheme (const encoding_scheme_optional& encoding_scheme)
{
  this->encoding_scheme_ = encoding_scheme;
}

void gtindicator0001_type::
encoding_scheme (::std::auto_ptr< encoding_scheme_type > encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}


// user_abort_ind_event_type
// 

const user_abort_ind_event_type::dialogue_portion_optional& user_abort_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

user_abort_ind_event_type::dialogue_portion_optional& user_abort_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void user_abort_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void user_abort_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void user_abort_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const user_abort_ind_event_type::component_ind_event_sequence& user_abort_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

user_abort_ind_event_type::component_ind_event_sequence& user_abort_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void user_abort_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const user_abort_ind_event_type::user_abort_information_optional& user_abort_ind_event_type::
user_abort_information () const
{
  return this->user_abort_information_;
}

user_abort_ind_event_type::user_abort_information_optional& user_abort_ind_event_type::
user_abort_information ()
{
  return this->user_abort_information_;
}

void user_abort_ind_event_type::
user_abort_information (const user_abort_information_type& user_abort_information)
{
  this->user_abort_information_.set (user_abort_information);
}

void user_abort_ind_event_type::
user_abort_information (const user_abort_information_optional& user_abort_information)
{
  this->user_abort_information_ = user_abort_information;
}

void user_abort_ind_event_type::
user_abort_information (::std::auto_ptr< user_abort_information_type > user_abort_information)
{
  this->user_abort_information_.set (user_abort_information);
}

const user_abort_ind_event_type::dialogue_id_optional& user_abort_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

user_abort_ind_event_type::dialogue_id_optional& user_abort_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void user_abort_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void user_abort_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const user_abort_ind_event_type::abort_reason_optional& user_abort_ind_event_type::
abort_reason () const
{
  return this->abort_reason_;
}

user_abort_ind_event_type::abort_reason_optional& user_abort_ind_event_type::
abort_reason ()
{
  return this->abort_reason_;
}

void user_abort_ind_event_type::
abort_reason (const abort_reason_type& abort_reason)
{
  this->abort_reason_.set (abort_reason);
}

void user_abort_ind_event_type::
abort_reason (const abort_reason_optional& abort_reason)
{
  this->abort_reason_ = abort_reason;
}

void user_abort_ind_event_type::
abort_reason (::std::auto_ptr< abort_reason_type > abort_reason)
{
  this->abort_reason_.set (abort_reason);
}

const user_abort_ind_event_type::quality_of_service_optional& user_abort_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

user_abort_ind_event_type::quality_of_service_optional& user_abort_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void user_abort_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void user_abort_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}


// reject_req_event_type
// 

const reject_req_event_type::parameters_optional& reject_req_event_type::
parameters () const
{
  return this->parameters_;
}

reject_req_event_type::parameters_optional& reject_req_event_type::
parameters ()
{
  return this->parameters_;
}

void reject_req_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void reject_req_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void reject_req_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const reject_req_event_type::dialogue_id_optional& reject_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

reject_req_event_type::dialogue_id_optional& reject_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void reject_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void reject_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const reject_req_event_type::invoke_id_optional& reject_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

reject_req_event_type::invoke_id_optional& reject_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void reject_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void reject_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const reject_req_event_type::link_id_optional& reject_req_event_type::
link_id () const
{
  return this->link_id_;
}

reject_req_event_type::link_id_optional& reject_req_event_type::
link_id ()
{
  return this->link_id_;
}

void reject_req_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void reject_req_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const reject_req_event_type::problem_type_type& reject_req_event_type::
problem_type () const
{
  return this->problem_type_.get ();
}

reject_req_event_type::problem_type_type& reject_req_event_type::
problem_type ()
{
  return this->problem_type_.get ();
}

void reject_req_event_type::
problem_type (const problem_type_type& problem_type)
{
  this->problem_type_.set (problem_type);
}

void reject_req_event_type::
problem_type (::std::auto_ptr< problem_type_type > problem_type)
{
  this->problem_type_.set (problem_type);
}

const reject_req_event_type::problem_type1& reject_req_event_type::
problem () const
{
  return this->problem_.get ();
}

reject_req_event_type::problem_type1& reject_req_event_type::
problem ()
{
  return this->problem_.get ();
}

void reject_req_event_type::
problem (const problem_type1& problem)
{
  this->problem_.set (problem);
}

void reject_req_event_type::
problem (::std::auto_ptr< problem_type1 > problem)
{
  this->problem_.set (problem);
}

const reject_req_event_type::reject_type_optional& reject_req_event_type::
reject_type () const
{
  return this->reject_type_;
}

reject_req_event_type::reject_type_optional& reject_req_event_type::
reject_type ()
{
  return this->reject_type_;
}

void reject_req_event_type::
reject_type (const reject_type_type& reject_type)
{
  this->reject_type_.set (reject_type);
}

void reject_req_event_type::
reject_type (const reject_type_optional& reject_type)
{
  this->reject_type_ = reject_type;
}

void reject_req_event_type::
reject_type (::std::auto_ptr< reject_type_type > reject_type)
{
  this->reject_type_.set (reject_type);
}


// end_ind_event_type
// 

const end_ind_event_type::dialogue_portion_optional& end_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

end_ind_event_type::dialogue_portion_optional& end_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void end_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void end_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void end_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const end_ind_event_type::component_ind_event_sequence& end_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

end_ind_event_type::component_ind_event_sequence& end_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void end_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const end_ind_event_type::dialogue_id_optional& end_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

end_ind_event_type::dialogue_id_optional& end_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void end_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void end_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const end_ind_event_type::quality_of_service_optional& end_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

end_ind_event_type::quality_of_service_optional& end_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void end_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void end_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}


// user_cancel_req_event_type
// 

const user_cancel_req_event_type::dialogue_id_optional& user_cancel_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

user_cancel_req_event_type::dialogue_id_optional& user_cancel_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void user_cancel_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void user_cancel_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const user_cancel_req_event_type::invoke_id_optional& user_cancel_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

user_cancel_req_event_type::invoke_id_optional& user_cancel_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void user_cancel_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void user_cancel_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}


// operation_type_def
// 

const operation_type_def::operation_code_type& operation_type_def::
operation_code () const
{
  return this->operation_code_.get ();
}

operation_type_def::operation_code_type& operation_type_def::
operation_code ()
{
  return this->operation_code_.get ();
}

void operation_type_def::
operation_code (const operation_code_type& operation_code)
{
  this->operation_code_.set (operation_code);
}

void operation_type_def::
operation_code (::std::auto_ptr< operation_code_type > operation_code)
{
  this->operation_code_.set (operation_code);
}

const operation_type_def::private_operation_data_optional& operation_type_def::
private_operation_data () const
{
  return this->private_operation_data_;
}

operation_type_def::private_operation_data_optional& operation_type_def::
private_operation_data ()
{
  return this->private_operation_data_;
}

void operation_type_def::
private_operation_data (const private_operation_data_type& private_operation_data)
{
  this->private_operation_data_.set (private_operation_data);
}

void operation_type_def::
private_operation_data (const private_operation_data_optional& private_operation_data)
{
  this->private_operation_data_ = private_operation_data;
}

void operation_type_def::
private_operation_data (::std::auto_ptr< private_operation_data_type > private_operation_data)
{
  this->private_operation_data_.set (private_operation_data);
}

const operation_type_def::operation_type_type& operation_type_def::
operation_type () const
{
  return this->operation_type_.get ();
}

operation_type_def::operation_type_type& operation_type_def::
operation_type ()
{
  return this->operation_type_.get ();
}

void operation_type_def::
operation_type (const operation_type_type& operation_type)
{
  this->operation_type_.set (operation_type);
}

void operation_type_def::
operation_type (::std::auto_ptr< operation_type_type > operation_type)
{
  this->operation_type_.set (operation_type);
}


// error_ind_event_type
// 

const error_ind_event_type::parameters_optional& error_ind_event_type::
parameters () const
{
  return this->parameters_;
}

error_ind_event_type::parameters_optional& error_ind_event_type::
parameters ()
{
  return this->parameters_;
}

void error_ind_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void error_ind_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void error_ind_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const error_ind_event_type::error_code_type& error_ind_event_type::
error_code () const
{
  return this->error_code_.get ();
}

error_ind_event_type::error_code_type& error_ind_event_type::
error_code ()
{
  return this->error_code_.get ();
}

void error_ind_event_type::
error_code (const error_code_type& error_code)
{
  this->error_code_.set (error_code);
}

void error_ind_event_type::
error_code (::std::auto_ptr< error_code_type > error_code)
{
  this->error_code_.set (error_code);
}

const error_ind_event_type::dialogue_id_optional& error_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

error_ind_event_type::dialogue_id_optional& error_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void error_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void error_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const error_ind_event_type::invoke_id_optional& error_ind_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

error_ind_event_type::invoke_id_optional& error_ind_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void error_ind_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void error_ind_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const error_ind_event_type::last_component_optional& error_ind_event_type::
last_component () const
{
  return this->last_component_;
}

error_ind_event_type::last_component_optional& error_ind_event_type::
last_component ()
{
  return this->last_component_;
}

void error_ind_event_type::
last_component (const last_component_type& last_component)
{
  this->last_component_.set (last_component);
}

void error_ind_event_type::
last_component (const last_component_optional& last_component)
{
  this->last_component_ = last_component;
}

const error_ind_event_type::link_id_optional& error_ind_event_type::
link_id () const
{
  return this->link_id_;
}

error_ind_event_type::link_id_optional& error_ind_event_type::
link_id ()
{
  return this->link_id_;
}

void error_ind_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void error_ind_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const error_ind_event_type::error_type_type& error_ind_event_type::
error_type () const
{
  return this->error_type_.get ();
}

error_ind_event_type::error_type_type& error_ind_event_type::
error_type ()
{
  return this->error_type_.get ();
}

void error_ind_event_type::
error_type (const error_type_type& error_type)
{
  this->error_type_.set (error_type);
}

void error_ind_event_type::
error_type (::std::auto_ptr< error_type_type > error_type)
{
  this->error_type_.set (error_type);
}


// dialogue_portion_type
// 

const dialogue_portion_type::app_context_name_optional& dialogue_portion_type::
app_context_name () const
{
  return this->app_context_name_;
}

dialogue_portion_type::app_context_name_optional& dialogue_portion_type::
app_context_name ()
{
  return this->app_context_name_;
}

void dialogue_portion_type::
app_context_name (const app_context_name_type& app_context_name)
{
  this->app_context_name_.set (app_context_name);
}

void dialogue_portion_type::
app_context_name (const app_context_name_optional& app_context_name)
{
  this->app_context_name_ = app_context_name;
}

void dialogue_portion_type::
app_context_name (::std::auto_ptr< app_context_name_type > app_context_name)
{
  this->app_context_name_.set (app_context_name);
}

const dialogue_portion_type::user_information_optional& dialogue_portion_type::
user_information () const
{
  return this->user_information_;
}

dialogue_portion_type::user_information_optional& dialogue_portion_type::
user_information ()
{
  return this->user_information_;
}

void dialogue_portion_type::
user_information (const user_information_type& user_information)
{
  this->user_information_.set (user_information);
}

void dialogue_portion_type::
user_information (const user_information_optional& user_information)
{
  this->user_information_ = user_information;
}

void dialogue_portion_type::
user_information (::std::auto_ptr< user_information_type > user_information)
{
  this->user_information_.set (user_information);
}

const dialogue_portion_type::security_context_information_optional& dialogue_portion_type::
security_context_information () const
{
  return this->security_context_information_;
}

dialogue_portion_type::security_context_information_optional& dialogue_portion_type::
security_context_information ()
{
  return this->security_context_information_;
}

void dialogue_portion_type::
security_context_information (const security_context_information_type& security_context_information)
{
  this->security_context_information_.set (security_context_information);
}

void dialogue_portion_type::
security_context_information (const security_context_information_optional& security_context_information)
{
  this->security_context_information_ = security_context_information;
}

void dialogue_portion_type::
security_context_information (::std::auto_ptr< security_context_information_type > security_context_information)
{
  this->security_context_information_.set (security_context_information);
}

const dialogue_portion_type::confidentiality_information_optional& dialogue_portion_type::
confidentiality_information () const
{
  return this->confidentiality_information_;
}

dialogue_portion_type::confidentiality_information_optional& dialogue_portion_type::
confidentiality_information ()
{
  return this->confidentiality_information_;
}

void dialogue_portion_type::
confidentiality_information (const confidentiality_information_type& confidentiality_information)
{
  this->confidentiality_information_.set (confidentiality_information);
}

void dialogue_portion_type::
confidentiality_information (const confidentiality_information_optional& confidentiality_information)
{
  this->confidentiality_information_ = confidentiality_information;
}

void dialogue_portion_type::
confidentiality_information (::std::auto_ptr< confidentiality_information_type > confidentiality_information)
{
  this->confidentiality_information_.set (confidentiality_information);
}

const dialogue_portion_type::protocol_version_optional& dialogue_portion_type::
protocol_version () const
{
  return this->protocol_version_;
}

dialogue_portion_type::protocol_version_optional& dialogue_portion_type::
protocol_version ()
{
  return this->protocol_version_;
}

void dialogue_portion_type::
protocol_version (const protocol_version_type& protocol_version)
{
  this->protocol_version_.set (protocol_version);
}

void dialogue_portion_type::
protocol_version (const protocol_version_optional& protocol_version)
{
  this->protocol_version_ = protocol_version;
}

void dialogue_portion_type::
protocol_version (::std::auto_ptr< protocol_version_type > protocol_version)
{
  this->protocol_version_.set (protocol_version);
}

const dialogue_portion_type::app_context_identifier_optional& dialogue_portion_type::
app_context_identifier () const
{
  return this->app_context_identifier_;
}

dialogue_portion_type::app_context_identifier_optional& dialogue_portion_type::
app_context_identifier ()
{
  return this->app_context_identifier_;
}

void dialogue_portion_type::
app_context_identifier (const app_context_identifier_type& app_context_identifier)
{
  this->app_context_identifier_.set (app_context_identifier);
}

void dialogue_portion_type::
app_context_identifier (const app_context_identifier_optional& app_context_identifier)
{
  this->app_context_identifier_ = app_context_identifier;
}

void dialogue_portion_type::
app_context_identifier (::std::auto_ptr< app_context_identifier_type > app_context_identifier)
{
  this->app_context_identifier_.set (app_context_identifier);
}

const dialogue_portion_type::security_context_identifier_optional& dialogue_portion_type::
security_context_identifier () const
{
  return this->security_context_identifier_;
}

dialogue_portion_type::security_context_identifier_optional& dialogue_portion_type::
security_context_identifier ()
{
  return this->security_context_identifier_;
}

void dialogue_portion_type::
security_context_identifier (const security_context_identifier_type& security_context_identifier)
{
  this->security_context_identifier_.set (security_context_identifier);
}

void dialogue_portion_type::
security_context_identifier (const security_context_identifier_optional& security_context_identifier)
{
  this->security_context_identifier_ = security_context_identifier;
}

void dialogue_portion_type::
security_context_identifier (::std::auto_ptr< security_context_identifier_type > security_context_identifier)
{
  this->security_context_identifier_.set (security_context_identifier);
}


// tcap_user_address_type
// 


// nstate_ind_event_type
// 

const nstate_ind_event_type::affected_user_type& nstate_ind_event_type::
affected_user () const
{
  return this->affected_user_.get ();
}

nstate_ind_event_type::affected_user_type& nstate_ind_event_type::
affected_user ()
{
  return this->affected_user_.get ();
}

void nstate_ind_event_type::
affected_user (const affected_user_type& affected_user)
{
  this->affected_user_.set (affected_user);
}

void nstate_ind_event_type::
affected_user (::std::auto_ptr< affected_user_type > affected_user)
{
  this->affected_user_.set (affected_user);
}

const nstate_ind_event_type::own_point_code_type& nstate_ind_event_type::
own_point_code () const
{
  return this->own_point_code_.get ();
}

nstate_ind_event_type::own_point_code_type& nstate_ind_event_type::
own_point_code ()
{
  return this->own_point_code_.get ();
}

void nstate_ind_event_type::
own_point_code (const own_point_code_type& own_point_code)
{
  this->own_point_code_.set (own_point_code);
}

void nstate_ind_event_type::
own_point_code (::std::auto_ptr< own_point_code_type > own_point_code)
{
  this->own_point_code_.set (own_point_code);
}

const nstate_ind_event_type::user_status_type& nstate_ind_event_type::
user_status () const
{
  return this->user_status_.get ();
}

nstate_ind_event_type::user_status_type& nstate_ind_event_type::
user_status ()
{
  return this->user_status_.get ();
}

void nstate_ind_event_type::
user_status (const user_status_type& user_status)
{
  this->user_status_.set (user_status);
}

void nstate_ind_event_type::
user_status (::std::auto_ptr< user_status_type > user_status)
{
  this->user_status_.set (user_status);
}


// provider_abort_ind_event_type
// 

const provider_abort_ind_event_type::dialogue_portion_optional& provider_abort_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

provider_abort_ind_event_type::dialogue_portion_optional& provider_abort_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void provider_abort_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void provider_abort_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void provider_abort_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const provider_abort_ind_event_type::component_ind_event_sequence& provider_abort_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

provider_abort_ind_event_type::component_ind_event_sequence& provider_abort_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void provider_abort_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const provider_abort_ind_event_type::dialogue_id_optional& provider_abort_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

provider_abort_ind_event_type::dialogue_id_optional& provider_abort_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void provider_abort_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void provider_abort_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const provider_abort_ind_event_type::quality_of_service_optional& provider_abort_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

provider_abort_ind_event_type::quality_of_service_optional& provider_abort_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void provider_abort_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void provider_abort_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const provider_abort_ind_event_type::p_abort_type& provider_abort_ind_event_type::
p_abort () const
{
  return this->p_abort_.get ();
}

provider_abort_ind_event_type::p_abort_type& provider_abort_ind_event_type::
p_abort ()
{
  return this->p_abort_.get ();
}

void provider_abort_ind_event_type::
p_abort (const p_abort_type& p_abort)
{
  this->p_abort_.set (p_abort);
}

void provider_abort_ind_event_type::
p_abort (::std::auto_ptr< p_abort_type > p_abort)
{
  this->p_abort_.set (p_abort);
}


// user_abort_req_event_type
// 

const user_abort_req_event_type::dialogue_portion_optional& user_abort_req_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

user_abort_req_event_type::dialogue_portion_optional& user_abort_req_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void user_abort_req_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void user_abort_req_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void user_abort_req_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const user_abort_req_event_type::component_req_event_sequence& user_abort_req_event_type::
component_req_event () const
{
  return this->component_req_event_;
}

user_abort_req_event_type::component_req_event_sequence& user_abort_req_event_type::
component_req_event ()
{
  return this->component_req_event_;
}

void user_abort_req_event_type::
component_req_event (const component_req_event_sequence& component_req_event)
{
  this->component_req_event_ = component_req_event;
}

const user_abort_req_event_type::user_abort_information_optional& user_abort_req_event_type::
user_abort_information () const
{
  return this->user_abort_information_;
}

user_abort_req_event_type::user_abort_information_optional& user_abort_req_event_type::
user_abort_information ()
{
  return this->user_abort_information_;
}

void user_abort_req_event_type::
user_abort_information (const user_abort_information_type& user_abort_information)
{
  this->user_abort_information_.set (user_abort_information);
}

void user_abort_req_event_type::
user_abort_information (const user_abort_information_optional& user_abort_information)
{
  this->user_abort_information_ = user_abort_information;
}

void user_abort_req_event_type::
user_abort_information (::std::auto_ptr< user_abort_information_type > user_abort_information)
{
  this->user_abort_information_.set (user_abort_information);
}

const user_abort_req_event_type::dialogue_id_optional& user_abort_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

user_abort_req_event_type::dialogue_id_optional& user_abort_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void user_abort_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void user_abort_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const user_abort_req_event_type::quality_of_service_optional& user_abort_req_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

user_abort_req_event_type::quality_of_service_optional& user_abort_req_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void user_abort_req_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void user_abort_req_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const user_abort_req_event_type::abort_reason_optional& user_abort_req_event_type::
abort_reason () const
{
  return this->abort_reason_;
}

user_abort_req_event_type::abort_reason_optional& user_abort_req_event_type::
abort_reason ()
{
  return this->abort_reason_;
}

void user_abort_req_event_type::
abort_reason (const abort_reason_type& abort_reason)
{
  this->abort_reason_.set (abort_reason);
}

void user_abort_req_event_type::
abort_reason (const abort_reason_optional& abort_reason)
{
  this->abort_reason_ = abort_reason;
}

void user_abort_req_event_type::
abort_reason (::std::auto_ptr< abort_reason_type > abort_reason)
{
  this->abort_reason_.set (abort_reason);
}


// begin_ind_event_type
// 

const begin_ind_event_type::dialogue_portion_optional& begin_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

begin_ind_event_type::dialogue_portion_optional& begin_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void begin_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void begin_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void begin_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const begin_ind_event_type::component_ind_event_sequence& begin_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

begin_ind_event_type::component_ind_event_sequence& begin_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void begin_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const begin_ind_event_type::destination_address_type& begin_ind_event_type::
destination_address () const
{
  return this->destination_address_.get ();
}

begin_ind_event_type::destination_address_type& begin_ind_event_type::
destination_address ()
{
  return this->destination_address_.get ();
}

void begin_ind_event_type::
destination_address (const destination_address_type& destination_address)
{
  this->destination_address_.set (destination_address);
}

void begin_ind_event_type::
destination_address (::std::auto_ptr< destination_address_type > destination_address)
{
  this->destination_address_.set (destination_address);
}

const begin_ind_event_type::originating_address_type& begin_ind_event_type::
originating_address () const
{
  return this->originating_address_.get ();
}

begin_ind_event_type::originating_address_type& begin_ind_event_type::
originating_address ()
{
  return this->originating_address_.get ();
}

void begin_ind_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void begin_ind_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const begin_ind_event_type::dialogue_id_optional& begin_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

begin_ind_event_type::dialogue_id_optional& begin_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void begin_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void begin_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const begin_ind_event_type::quality_of_service_optional& begin_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

begin_ind_event_type::quality_of_service_optional& begin_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void begin_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void begin_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const begin_ind_event_type::allowed_permission_optional& begin_ind_event_type::
allowed_permission () const
{
  return this->allowed_permission_;
}

begin_ind_event_type::allowed_permission_optional& begin_ind_event_type::
allowed_permission ()
{
  return this->allowed_permission_;
}

void begin_ind_event_type::
allowed_permission (const allowed_permission_type& allowed_permission)
{
  this->allowed_permission_.set (allowed_permission);
}

void begin_ind_event_type::
allowed_permission (const allowed_permission_optional& allowed_permission)
{
  this->allowed_permission_ = allowed_permission;
}


// invoke_req_event_type
// 

const invoke_req_event_type::operation_type& invoke_req_event_type::
operation () const
{
  return this->operation_.get ();
}

invoke_req_event_type::operation_type& invoke_req_event_type::
operation ()
{
  return this->operation_.get ();
}

void invoke_req_event_type::
operation (const operation_type& operation)
{
  this->operation_.set (operation);
}

void invoke_req_event_type::
operation (::std::auto_ptr< operation_type > operation)
{
  this->operation_.set (operation);
}

const invoke_req_event_type::parameters_optional& invoke_req_event_type::
parameters () const
{
  return this->parameters_;
}

invoke_req_event_type::parameters_optional& invoke_req_event_type::
parameters ()
{
  return this->parameters_;
}

void invoke_req_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void invoke_req_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void invoke_req_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const invoke_req_event_type::time_out_optional& invoke_req_event_type::
time_out () const
{
  return this->time_out_;
}

invoke_req_event_type::time_out_optional& invoke_req_event_type::
time_out ()
{
  return this->time_out_;
}

void invoke_req_event_type::
time_out (const time_out_type& time_out)
{
  this->time_out_.set (time_out);
}

void invoke_req_event_type::
time_out (const time_out_optional& time_out)
{
  this->time_out_ = time_out;
}

const invoke_req_event_type::dialogue_id_optional& invoke_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

invoke_req_event_type::dialogue_id_optional& invoke_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void invoke_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void invoke_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const invoke_req_event_type::invoke_id_optional& invoke_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

invoke_req_event_type::invoke_id_optional& invoke_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void invoke_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void invoke_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const invoke_req_event_type::linked_id_optional& invoke_req_event_type::
linked_id () const
{
  return this->linked_id_;
}

invoke_req_event_type::linked_id_optional& invoke_req_event_type::
linked_id ()
{
  return this->linked_id_;
}

void invoke_req_event_type::
linked_id (const linked_id_type& linked_id)
{
  this->linked_id_.set (linked_id);
}

void invoke_req_event_type::
linked_id (const linked_id_optional& linked_id)
{
  this->linked_id_ = linked_id;
}

const invoke_req_event_type::class_type_optional& invoke_req_event_type::
class_type () const
{
  return this->class_type_;
}

invoke_req_event_type::class_type_optional& invoke_req_event_type::
class_type ()
{
  return this->class_type_;
}

void invoke_req_event_type::
class_type (const class_type_type& class_type)
{
  this->class_type_.set (class_type);
}

void invoke_req_event_type::
class_type (const class_type_optional& class_type)
{
  this->class_type_ = class_type;
}

void invoke_req_event_type::
class_type (::std::auto_ptr< class_type_type > class_type)
{
  this->class_type_.set (class_type);
}

const invoke_req_event_type::last_invoke_event_optional& invoke_req_event_type::
last_invoke_event () const
{
  return this->last_invoke_event_;
}

invoke_req_event_type::last_invoke_event_optional& invoke_req_event_type::
last_invoke_event ()
{
  return this->last_invoke_event_;
}

void invoke_req_event_type::
last_invoke_event (const last_invoke_event_type& last_invoke_event)
{
  this->last_invoke_event_.set (last_invoke_event);
}

void invoke_req_event_type::
last_invoke_event (const last_invoke_event_optional& last_invoke_event)
{
  this->last_invoke_event_ = last_invoke_event;
}


// gtindicator0100_type
// 

const gtindicator0100_type::address_information_optional& gtindicator0100_type::
address_information () const
{
  return this->address_information_;
}

gtindicator0100_type::address_information_optional& gtindicator0100_type::
address_information ()
{
  return this->address_information_;
}

void gtindicator0100_type::
address_information (const address_information_type& address_information)
{
  this->address_information_.set (address_information);
}

void gtindicator0100_type::
address_information (const address_information_optional& address_information)
{
  this->address_information_ = address_information;
}

void gtindicator0100_type::
address_information (::std::auto_ptr< address_information_type > address_information)
{
  this->address_information_.set (address_information);
}

const gtindicator0100_type::translation_type_type& gtindicator0100_type::
translation_type () const
{
  return this->translation_type_.get ();
}

gtindicator0100_type::translation_type_type& gtindicator0100_type::
translation_type ()
{
  return this->translation_type_.get ();
}

void gtindicator0100_type::
translation_type (const translation_type_type& translation_type)
{
  this->translation_type_.set (translation_type);
}

const gtindicator0100_type::numbering_plan_type& gtindicator0100_type::
numbering_plan () const
{
  return this->numbering_plan_.get ();
}

gtindicator0100_type::numbering_plan_type& gtindicator0100_type::
numbering_plan ()
{
  return this->numbering_plan_.get ();
}

void gtindicator0100_type::
numbering_plan (const numbering_plan_type& numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

void gtindicator0100_type::
numbering_plan (::std::auto_ptr< numbering_plan_type > numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

const gtindicator0100_type::nature_of_addr_ind_type& gtindicator0100_type::
nature_of_addr_ind () const
{
  return this->nature_of_addr_ind_.get ();
}

gtindicator0100_type::nature_of_addr_ind_type& gtindicator0100_type::
nature_of_addr_ind ()
{
  return this->nature_of_addr_ind_.get ();
}

void gtindicator0100_type::
nature_of_addr_ind (const nature_of_addr_ind_type& nature_of_addr_ind)
{
  this->nature_of_addr_ind_.set (nature_of_addr_ind);
}

void gtindicator0100_type::
nature_of_addr_ind (::std::auto_ptr< nature_of_addr_ind_type > nature_of_addr_ind)
{
  this->nature_of_addr_ind_.set (nature_of_addr_ind);
}

const gtindicator0100_type::encoding_scheme_type& gtindicator0100_type::
encoding_scheme () const
{
  return this->encoding_scheme_.get ();
}

gtindicator0100_type::encoding_scheme_type& gtindicator0100_type::
encoding_scheme ()
{
  return this->encoding_scheme_.get ();
}

void gtindicator0100_type::
encoding_scheme (const encoding_scheme_type& encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}

void gtindicator0100_type::
encoding_scheme (::std::auto_ptr< encoding_scheme_type > encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}


// sub_system_address_type
// 

const sub_system_address_type::signaling_point_code_type& sub_system_address_type::
signaling_point_code () const
{
  return this->signaling_point_code_.get ();
}

sub_system_address_type::signaling_point_code_type& sub_system_address_type::
signaling_point_code ()
{
  return this->signaling_point_code_.get ();
}

void sub_system_address_type::
signaling_point_code (const signaling_point_code_type& signaling_point_code)
{
  this->signaling_point_code_.set (signaling_point_code);
}

void sub_system_address_type::
signaling_point_code (::std::auto_ptr< signaling_point_code_type > signaling_point_code)
{
  this->signaling_point_code_.set (signaling_point_code);
}

const sub_system_address_type::sub_system_number_type& sub_system_address_type::
sub_system_number () const
{
  return this->sub_system_number_.get ();
}

sub_system_address_type::sub_system_number_type& sub_system_address_type::
sub_system_number ()
{
  return this->sub_system_number_.get ();
}

void sub_system_address_type::
sub_system_number (const sub_system_number_type& sub_system_number)
{
  this->sub_system_number_.set (sub_system_number);
}


// signaling_point_code_type
// 

const signaling_point_code_type::member_type& signaling_point_code_type::
member () const
{
  return this->member_.get ();
}

signaling_point_code_type::member_type& signaling_point_code_type::
member ()
{
  return this->member_.get ();
}

void signaling_point_code_type::
member (const member_type& member)
{
  this->member_.set (member);
}

const signaling_point_code_type::cluster_type& signaling_point_code_type::
cluster () const
{
  return this->cluster_.get ();
}

signaling_point_code_type::cluster_type& signaling_point_code_type::
cluster ()
{
  return this->cluster_.get ();
}

void signaling_point_code_type::
cluster (const cluster_type& cluster)
{
  this->cluster_.set (cluster);
}

const signaling_point_code_type::zone_type& signaling_point_code_type::
zone () const
{
  return this->zone_.get ();
}

signaling_point_code_type::zone_type& signaling_point_code_type::
zone ()
{
  return this->zone_.get ();
}

void signaling_point_code_type::
zone (const zone_type& zone)
{
  this->zone_.set (zone);
}


// unidirectional_req_event_type
// 

const unidirectional_req_event_type::dialogue_portion_optional& unidirectional_req_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

unidirectional_req_event_type::dialogue_portion_optional& unidirectional_req_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void unidirectional_req_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void unidirectional_req_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void unidirectional_req_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const unidirectional_req_event_type::component_req_event_sequence& unidirectional_req_event_type::
component_req_event () const
{
  return this->component_req_event_;
}

unidirectional_req_event_type::component_req_event_sequence& unidirectional_req_event_type::
component_req_event ()
{
  return this->component_req_event_;
}

void unidirectional_req_event_type::
component_req_event (const component_req_event_sequence& component_req_event)
{
  this->component_req_event_ = component_req_event;
}

const unidirectional_req_event_type::destination_address_type& unidirectional_req_event_type::
destination_address () const
{
  return this->destination_address_.get ();
}

unidirectional_req_event_type::destination_address_type& unidirectional_req_event_type::
destination_address ()
{
  return this->destination_address_.get ();
}

void unidirectional_req_event_type::
destination_address (const destination_address_type& destination_address)
{
  this->destination_address_.set (destination_address);
}

void unidirectional_req_event_type::
destination_address (::std::auto_ptr< destination_address_type > destination_address)
{
  this->destination_address_.set (destination_address);
}

const unidirectional_req_event_type::originating_address_type& unidirectional_req_event_type::
originating_address () const
{
  return this->originating_address_.get ();
}

unidirectional_req_event_type::originating_address_type& unidirectional_req_event_type::
originating_address ()
{
  return this->originating_address_.get ();
}

void unidirectional_req_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void unidirectional_req_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const unidirectional_req_event_type::dialogue_id_optional& unidirectional_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

unidirectional_req_event_type::dialogue_id_optional& unidirectional_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void unidirectional_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void unidirectional_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const unidirectional_req_event_type::quality_of_service_optional& unidirectional_req_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

unidirectional_req_event_type::quality_of_service_optional& unidirectional_req_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void unidirectional_req_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void unidirectional_req_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}


// reject_ind_event_type
// 

const reject_ind_event_type::parameters_optional& reject_ind_event_type::
parameters () const
{
  return this->parameters_;
}

reject_ind_event_type::parameters_optional& reject_ind_event_type::
parameters ()
{
  return this->parameters_;
}

void reject_ind_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void reject_ind_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void reject_ind_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const reject_ind_event_type::dialogue_id_optional& reject_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

reject_ind_event_type::dialogue_id_optional& reject_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void reject_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void reject_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const reject_ind_event_type::invoke_id_optional& reject_ind_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

reject_ind_event_type::invoke_id_optional& reject_ind_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void reject_ind_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void reject_ind_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const reject_ind_event_type::last_component_optional& reject_ind_event_type::
last_component () const
{
  return this->last_component_;
}

reject_ind_event_type::last_component_optional& reject_ind_event_type::
last_component ()
{
  return this->last_component_;
}

void reject_ind_event_type::
last_component (const last_component_type& last_component)
{
  this->last_component_.set (last_component);
}

void reject_ind_event_type::
last_component (const last_component_optional& last_component)
{
  this->last_component_ = last_component;
}

const reject_ind_event_type::link_id_optional& reject_ind_event_type::
link_id () const
{
  return this->link_id_;
}

reject_ind_event_type::link_id_optional& reject_ind_event_type::
link_id ()
{
  return this->link_id_;
}

void reject_ind_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void reject_ind_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const reject_ind_event_type::problem_type_type& reject_ind_event_type::
problem_type () const
{
  return this->problem_type_.get ();
}

reject_ind_event_type::problem_type_type& reject_ind_event_type::
problem_type ()
{
  return this->problem_type_.get ();
}

void reject_ind_event_type::
problem_type (const problem_type_type& problem_type)
{
  this->problem_type_.set (problem_type);
}

void reject_ind_event_type::
problem_type (::std::auto_ptr< problem_type_type > problem_type)
{
  this->problem_type_.set (problem_type);
}

const reject_ind_event_type::problem_type1& reject_ind_event_type::
problem () const
{
  return this->problem_.get ();
}

reject_ind_event_type::problem_type1& reject_ind_event_type::
problem ()
{
  return this->problem_.get ();
}

void reject_ind_event_type::
problem (const problem_type1& problem)
{
  this->problem_.set (problem);
}

void reject_ind_event_type::
problem (::std::auto_ptr< problem_type1 > problem)
{
  this->problem_.set (problem);
}

const reject_ind_event_type::reject_type_optional& reject_ind_event_type::
reject_type () const
{
  return this->reject_type_;
}

reject_ind_event_type::reject_type_optional& reject_ind_event_type::
reject_type ()
{
  return this->reject_type_;
}

void reject_ind_event_type::
reject_type (const reject_type_type& reject_type)
{
  this->reject_type_.set (reject_type);
}

void reject_ind_event_type::
reject_type (const reject_type_optional& reject_type)
{
  this->reject_type_ = reject_type;
}

void reject_ind_event_type::
reject_type (::std::auto_ptr< reject_type_type > reject_type)
{
  this->reject_type_.set (reject_type);
}


// local_cancel_ind_event_type
// 

const local_cancel_ind_event_type::dialogue_id_optional& local_cancel_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

local_cancel_ind_event_type::dialogue_id_optional& local_cancel_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void local_cancel_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void local_cancel_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const local_cancel_ind_event_type::invoke_id_optional& local_cancel_ind_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

local_cancel_ind_event_type::invoke_id_optional& local_cancel_ind_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void local_cancel_ind_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void local_cancel_ind_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const local_cancel_ind_event_type::last_component_optional& local_cancel_ind_event_type::
last_component () const
{
  return this->last_component_;
}

local_cancel_ind_event_type::last_component_optional& local_cancel_ind_event_type::
last_component ()
{
  return this->last_component_;
}

void local_cancel_ind_event_type::
last_component (const last_component_type& last_component)
{
  this->last_component_.set (last_component);
}

void local_cancel_ind_event_type::
last_component (const last_component_optional& last_component)
{
  this->last_component_ = last_component;
}


// gtindicator0011_type
// 

const gtindicator0011_type::address_information_optional& gtindicator0011_type::
address_information () const
{
  return this->address_information_;
}

gtindicator0011_type::address_information_optional& gtindicator0011_type::
address_information ()
{
  return this->address_information_;
}

void gtindicator0011_type::
address_information (const address_information_type& address_information)
{
  this->address_information_.set (address_information);
}

void gtindicator0011_type::
address_information (const address_information_optional& address_information)
{
  this->address_information_ = address_information;
}

void gtindicator0011_type::
address_information (::std::auto_ptr< address_information_type > address_information)
{
  this->address_information_.set (address_information);
}

const gtindicator0011_type::translation_type_type& gtindicator0011_type::
translation_type () const
{
  return this->translation_type_.get ();
}

gtindicator0011_type::translation_type_type& gtindicator0011_type::
translation_type ()
{
  return this->translation_type_.get ();
}

void gtindicator0011_type::
translation_type (const translation_type_type& translation_type)
{
  this->translation_type_.set (translation_type);
}

const gtindicator0011_type::numbering_plan_type& gtindicator0011_type::
numbering_plan () const
{
  return this->numbering_plan_.get ();
}

gtindicator0011_type::numbering_plan_type& gtindicator0011_type::
numbering_plan ()
{
  return this->numbering_plan_.get ();
}

void gtindicator0011_type::
numbering_plan (const numbering_plan_type& numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

void gtindicator0011_type::
numbering_plan (::std::auto_ptr< numbering_plan_type > numbering_plan)
{
  this->numbering_plan_.set (numbering_plan);
}

const gtindicator0011_type::encoding_scheme_type& gtindicator0011_type::
encoding_scheme () const
{
  return this->encoding_scheme_.get ();
}

gtindicator0011_type::encoding_scheme_type& gtindicator0011_type::
encoding_scheme ()
{
  return this->encoding_scheme_.get ();
}

void gtindicator0011_type::
encoding_scheme (const encoding_scheme_type& encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}

void gtindicator0011_type::
encoding_scheme (::std::auto_ptr< encoding_scheme_type > encoding_scheme)
{
  this->encoding_scheme_.set (encoding_scheme);
}


// continue_req_event_type
// 

const continue_req_event_type::dialogue_portion_optional& continue_req_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

continue_req_event_type::dialogue_portion_optional& continue_req_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void continue_req_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void continue_req_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void continue_req_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const continue_req_event_type::component_req_event_sequence& continue_req_event_type::
component_req_event () const
{
  return this->component_req_event_;
}

continue_req_event_type::component_req_event_sequence& continue_req_event_type::
component_req_event ()
{
  return this->component_req_event_;
}

void continue_req_event_type::
component_req_event (const component_req_event_sequence& component_req_event)
{
  this->component_req_event_ = component_req_event;
}

const continue_req_event_type::originating_address_optional& continue_req_event_type::
originating_address () const
{
  return this->originating_address_;
}

continue_req_event_type::originating_address_optional& continue_req_event_type::
originating_address ()
{
  return this->originating_address_;
}

void continue_req_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void continue_req_event_type::
originating_address (const originating_address_optional& originating_address)
{
  this->originating_address_ = originating_address;
}

void continue_req_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const continue_req_event_type::dialogue_id_optional& continue_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

continue_req_event_type::dialogue_id_optional& continue_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void continue_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void continue_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const continue_req_event_type::quality_of_service_optional& continue_req_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

continue_req_event_type::quality_of_service_optional& continue_req_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void continue_req_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void continue_req_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const continue_req_event_type::allowed_permission_optional& continue_req_event_type::
allowed_permission () const
{
  return this->allowed_permission_;
}

continue_req_event_type::allowed_permission_optional& continue_req_event_type::
allowed_permission ()
{
  return this->allowed_permission_;
}

void continue_req_event_type::
allowed_permission (const allowed_permission_type& allowed_permission)
{
  this->allowed_permission_.set (allowed_permission);
}

void continue_req_event_type::
allowed_permission (const allowed_permission_optional& allowed_permission)
{
  this->allowed_permission_ = allowed_permission;
}


// nstate_req_event_type
// 

const nstate_req_event_type::affected_user_type& nstate_req_event_type::
affected_user () const
{
  return this->affected_user_.get ();
}

nstate_req_event_type::affected_user_type& nstate_req_event_type::
affected_user ()
{
  return this->affected_user_.get ();
}

void nstate_req_event_type::
affected_user (const affected_user_type& affected_user)
{
  this->affected_user_.set (affected_user);
}

void nstate_req_event_type::
affected_user (::std::auto_ptr< affected_user_type > affected_user)
{
  this->affected_user_.set (affected_user);
}

const nstate_req_event_type::user_status_type& nstate_req_event_type::
user_status () const
{
  return this->user_status_.get ();
}

nstate_req_event_type::user_status_type& nstate_req_event_type::
user_status ()
{
  return this->user_status_.get ();
}

void nstate_req_event_type::
user_status (const user_status_type& user_status)
{
  this->user_status_.set (user_status);
}

void nstate_req_event_type::
user_status (::std::auto_ptr< user_status_type > user_status)
{
  this->user_status_.set (user_status);
}


// unidirectional_ind_event_type
// 

const unidirectional_ind_event_type::dialogue_portion_optional& unidirectional_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

unidirectional_ind_event_type::dialogue_portion_optional& unidirectional_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void unidirectional_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void unidirectional_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void unidirectional_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const unidirectional_ind_event_type::component_ind_event_sequence& unidirectional_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

unidirectional_ind_event_type::component_ind_event_sequence& unidirectional_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void unidirectional_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const unidirectional_ind_event_type::destination_address_type& unidirectional_ind_event_type::
destination_address () const
{
  return this->destination_address_.get ();
}

unidirectional_ind_event_type::destination_address_type& unidirectional_ind_event_type::
destination_address ()
{
  return this->destination_address_.get ();
}

void unidirectional_ind_event_type::
destination_address (const destination_address_type& destination_address)
{
  this->destination_address_.set (destination_address);
}

void unidirectional_ind_event_type::
destination_address (::std::auto_ptr< destination_address_type > destination_address)
{
  this->destination_address_.set (destination_address);
}

const unidirectional_ind_event_type::originating_address_type& unidirectional_ind_event_type::
originating_address () const
{
  return this->originating_address_.get ();
}

unidirectional_ind_event_type::originating_address_type& unidirectional_ind_event_type::
originating_address ()
{
  return this->originating_address_.get ();
}

void unidirectional_ind_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void unidirectional_ind_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const unidirectional_ind_event_type::dialogue_id_optional& unidirectional_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

unidirectional_ind_event_type::dialogue_id_optional& unidirectional_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void unidirectional_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void unidirectional_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const unidirectional_ind_event_type::quality_of_service_optional& unidirectional_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

unidirectional_ind_event_type::quality_of_service_optional& unidirectional_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void unidirectional_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void unidirectional_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}


// continue_ind_event_type
// 

const continue_ind_event_type::dialogue_portion_optional& continue_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

continue_ind_event_type::dialogue_portion_optional& continue_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void continue_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void continue_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void continue_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const continue_ind_event_type::component_ind_event_sequence& continue_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

continue_ind_event_type::component_ind_event_sequence& continue_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void continue_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const continue_ind_event_type::dialogue_id_optional& continue_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

continue_ind_event_type::dialogue_id_optional& continue_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void continue_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void continue_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const continue_ind_event_type::quality_of_service_optional& continue_ind_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

continue_ind_event_type::quality_of_service_optional& continue_ind_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void continue_ind_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void continue_ind_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const continue_ind_event_type::allowed_permission_optional& continue_ind_event_type::
allowed_permission () const
{
  return this->allowed_permission_;
}

continue_ind_event_type::allowed_permission_optional& continue_ind_event_type::
allowed_permission ()
{
  return this->allowed_permission_;
}

void continue_ind_event_type::
allowed_permission (const allowed_permission_type& allowed_permission)
{
  this->allowed_permission_.set (allowed_permission);
}

void continue_ind_event_type::
allowed_permission (const allowed_permission_optional& allowed_permission)
{
  this->allowed_permission_ = allowed_permission;
}


// gtindicator0010_type
// 

const gtindicator0010_type::address_information_optional& gtindicator0010_type::
address_information () const
{
  return this->address_information_;
}

gtindicator0010_type::address_information_optional& gtindicator0010_type::
address_information ()
{
  return this->address_information_;
}

void gtindicator0010_type::
address_information (const address_information_type& address_information)
{
  this->address_information_.set (address_information);
}

void gtindicator0010_type::
address_information (const address_information_optional& address_information)
{
  this->address_information_ = address_information;
}

void gtindicator0010_type::
address_information (::std::auto_ptr< address_information_type > address_information)
{
  this->address_information_.set (address_information);
}

const gtindicator0010_type::translation_type_type& gtindicator0010_type::
translation_type () const
{
  return this->translation_type_.get ();
}

gtindicator0010_type::translation_type_type& gtindicator0010_type::
translation_type ()
{
  return this->translation_type_.get ();
}

void gtindicator0010_type::
translation_type (const translation_type_type& translation_type)
{
  this->translation_type_.set (translation_type);
}


// npcstate_ind_event_type
// 

const npcstate_ind_event_type::affected_dpc_type& npcstate_ind_event_type::
affected_dpc () const
{
  return this->affected_dpc_.get ();
}

npcstate_ind_event_type::affected_dpc_type& npcstate_ind_event_type::
affected_dpc ()
{
  return this->affected_dpc_.get ();
}

void npcstate_ind_event_type::
affected_dpc (const affected_dpc_type& affected_dpc)
{
  this->affected_dpc_.set (affected_dpc);
}

void npcstate_ind_event_type::
affected_dpc (::std::auto_ptr< affected_dpc_type > affected_dpc)
{
  this->affected_dpc_.set (affected_dpc);
}

const npcstate_ind_event_type::own_point_code_type& npcstate_ind_event_type::
own_point_code () const
{
  return this->own_point_code_.get ();
}

npcstate_ind_event_type::own_point_code_type& npcstate_ind_event_type::
own_point_code ()
{
  return this->own_point_code_.get ();
}

void npcstate_ind_event_type::
own_point_code (const own_point_code_type& own_point_code)
{
  this->own_point_code_.set (own_point_code);
}

void npcstate_ind_event_type::
own_point_code (::std::auto_ptr< own_point_code_type > own_point_code)
{
  this->own_point_code_.set (own_point_code);
}

const npcstate_ind_event_type::signaling_point_status_type& npcstate_ind_event_type::
signaling_point_status () const
{
  return this->signaling_point_status_.get ();
}

npcstate_ind_event_type::signaling_point_status_type& npcstate_ind_event_type::
signaling_point_status ()
{
  return this->signaling_point_status_.get ();
}

void npcstate_ind_event_type::
signaling_point_status (const signaling_point_status_type& signaling_point_status)
{
  this->signaling_point_status_.set (signaling_point_status);
}

void npcstate_ind_event_type::
signaling_point_status (::std::auto_ptr< signaling_point_status_type > signaling_point_status)
{
  this->signaling_point_status_.set (signaling_point_status);
}


// begin_req_event_type
// 

const begin_req_event_type::dialogue_portion_optional& begin_req_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

begin_req_event_type::dialogue_portion_optional& begin_req_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void begin_req_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void begin_req_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void begin_req_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const begin_req_event_type::component_req_event_sequence& begin_req_event_type::
component_req_event () const
{
  return this->component_req_event_;
}

begin_req_event_type::component_req_event_sequence& begin_req_event_type::
component_req_event ()
{
  return this->component_req_event_;
}

void begin_req_event_type::
component_req_event (const component_req_event_sequence& component_req_event)
{
  this->component_req_event_ = component_req_event;
}

const begin_req_event_type::destination_address_type& begin_req_event_type::
destination_address () const
{
  return this->destination_address_.get ();
}

begin_req_event_type::destination_address_type& begin_req_event_type::
destination_address ()
{
  return this->destination_address_.get ();
}

void begin_req_event_type::
destination_address (const destination_address_type& destination_address)
{
  this->destination_address_.set (destination_address);
}

void begin_req_event_type::
destination_address (::std::auto_ptr< destination_address_type > destination_address)
{
  this->destination_address_.set (destination_address);
}

const begin_req_event_type::originating_address_type& begin_req_event_type::
originating_address () const
{
  return this->originating_address_.get ();
}

begin_req_event_type::originating_address_type& begin_req_event_type::
originating_address ()
{
  return this->originating_address_.get ();
}

void begin_req_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void begin_req_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const begin_req_event_type::dialogue_id_optional& begin_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

begin_req_event_type::dialogue_id_optional& begin_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void begin_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void begin_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const begin_req_event_type::quality_of_service_optional& begin_req_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

begin_req_event_type::quality_of_service_optional& begin_req_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void begin_req_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void begin_req_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const begin_req_event_type::allowed_permission_optional& begin_req_event_type::
allowed_permission () const
{
  return this->allowed_permission_;
}

begin_req_event_type::allowed_permission_optional& begin_req_event_type::
allowed_permission ()
{
  return this->allowed_permission_;
}

void begin_req_event_type::
allowed_permission (const allowed_permission_type& allowed_permission)
{
  this->allowed_permission_.set (allowed_permission);
}

void begin_req_event_type::
allowed_permission (const allowed_permission_optional& allowed_permission)
{
  this->allowed_permission_ = allowed_permission;
}


// notice_ind_event_type
// 

const notice_ind_event_type::dialogue_portion_optional& notice_ind_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

notice_ind_event_type::dialogue_portion_optional& notice_ind_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void notice_ind_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void notice_ind_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void notice_ind_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const notice_ind_event_type::component_ind_event_sequence& notice_ind_event_type::
component_ind_event () const
{
  return this->component_ind_event_;
}

notice_ind_event_type::component_ind_event_sequence& notice_ind_event_type::
component_ind_event ()
{
  return this->component_ind_event_;
}

void notice_ind_event_type::
component_ind_event (const component_ind_event_sequence& component_ind_event)
{
  this->component_ind_event_ = component_ind_event;
}

const notice_ind_event_type::destination_address_optional& notice_ind_event_type::
destination_address () const
{
  return this->destination_address_;
}

notice_ind_event_type::destination_address_optional& notice_ind_event_type::
destination_address ()
{
  return this->destination_address_;
}

void notice_ind_event_type::
destination_address (const destination_address_type& destination_address)
{
  this->destination_address_.set (destination_address);
}

void notice_ind_event_type::
destination_address (const destination_address_optional& destination_address)
{
  this->destination_address_ = destination_address;
}

void notice_ind_event_type::
destination_address (::std::auto_ptr< destination_address_type > destination_address)
{
  this->destination_address_.set (destination_address);
}

const notice_ind_event_type::originating_address_optional& notice_ind_event_type::
originating_address () const
{
  return this->originating_address_;
}

notice_ind_event_type::originating_address_optional& notice_ind_event_type::
originating_address ()
{
  return this->originating_address_;
}

void notice_ind_event_type::
originating_address (const originating_address_type& originating_address)
{
  this->originating_address_.set (originating_address);
}

void notice_ind_event_type::
originating_address (const originating_address_optional& originating_address)
{
  this->originating_address_ = originating_address;
}

void notice_ind_event_type::
originating_address (::std::auto_ptr< originating_address_type > originating_address)
{
  this->originating_address_.set (originating_address);
}

const notice_ind_event_type::report_cause_type& notice_ind_event_type::
report_cause () const
{
  return this->report_cause_.get ();
}

notice_ind_event_type::report_cause_type& notice_ind_event_type::
report_cause ()
{
  return this->report_cause_.get ();
}

void notice_ind_event_type::
report_cause (const report_cause_type& report_cause)
{
  this->report_cause_.set (report_cause);
}

void notice_ind_event_type::
report_cause (::std::auto_ptr< report_cause_type > report_cause)
{
  this->report_cause_.set (report_cause);
}

const notice_ind_event_type::dialogue_id_optional& notice_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

notice_ind_event_type::dialogue_id_optional& notice_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void notice_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void notice_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}


// invoke_ind_event_type
// 

const invoke_ind_event_type::operation_type& invoke_ind_event_type::
operation () const
{
  return this->operation_.get ();
}

invoke_ind_event_type::operation_type& invoke_ind_event_type::
operation ()
{
  return this->operation_.get ();
}

void invoke_ind_event_type::
operation (const operation_type& operation)
{
  this->operation_.set (operation);
}

void invoke_ind_event_type::
operation (::std::auto_ptr< operation_type > operation)
{
  this->operation_.set (operation);
}

const invoke_ind_event_type::parameters_optional& invoke_ind_event_type::
parameters () const
{
  return this->parameters_;
}

invoke_ind_event_type::parameters_optional& invoke_ind_event_type::
parameters ()
{
  return this->parameters_;
}

void invoke_ind_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void invoke_ind_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void invoke_ind_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const invoke_ind_event_type::dialogue_id_optional& invoke_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

invoke_ind_event_type::dialogue_id_optional& invoke_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void invoke_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void invoke_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const invoke_ind_event_type::invoke_id_optional& invoke_ind_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

invoke_ind_event_type::invoke_id_optional& invoke_ind_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void invoke_ind_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void invoke_ind_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const invoke_ind_event_type::last_component_optional& invoke_ind_event_type::
last_component () const
{
  return this->last_component_;
}

invoke_ind_event_type::last_component_optional& invoke_ind_event_type::
last_component ()
{
  return this->last_component_;
}

void invoke_ind_event_type::
last_component (const last_component_type& last_component)
{
  this->last_component_.set (last_component);
}

void invoke_ind_event_type::
last_component (const last_component_optional& last_component)
{
  this->last_component_ = last_component;
}

const invoke_ind_event_type::linked_id_optional& invoke_ind_event_type::
linked_id () const
{
  return this->linked_id_;
}

invoke_ind_event_type::linked_id_optional& invoke_ind_event_type::
linked_id ()
{
  return this->linked_id_;
}

void invoke_ind_event_type::
linked_id (const linked_id_type& linked_id)
{
  this->linked_id_.set (linked_id);
}

void invoke_ind_event_type::
linked_id (const linked_id_optional& linked_id)
{
  this->linked_id_ = linked_id;
}

const invoke_ind_event_type::class_type_optional& invoke_ind_event_type::
class_type () const
{
  return this->class_type_;
}

invoke_ind_event_type::class_type_optional& invoke_ind_event_type::
class_type ()
{
  return this->class_type_;
}

void invoke_ind_event_type::
class_type (const class_type_type& class_type)
{
  this->class_type_.set (class_type);
}

void invoke_ind_event_type::
class_type (const class_type_optional& class_type)
{
  this->class_type_ = class_type;
}

void invoke_ind_event_type::
class_type (::std::auto_ptr< class_type_type > class_type)
{
  this->class_type_.set (class_type);
}

const invoke_ind_event_type::last_invoke_event_optional& invoke_ind_event_type::
last_invoke_event () const
{
  return this->last_invoke_event_;
}

invoke_ind_event_type::last_invoke_event_optional& invoke_ind_event_type::
last_invoke_event ()
{
  return this->last_invoke_event_;
}

void invoke_ind_event_type::
last_invoke_event (const last_invoke_event_type& last_invoke_event)
{
  this->last_invoke_event_.set (last_invoke_event);
}

void invoke_ind_event_type::
last_invoke_event (const last_invoke_event_optional& last_invoke_event)
{
  this->last_invoke_event_ = last_invoke_event;
}


// result_ind_event_type
// 

const result_ind_event_type::operation_optional& result_ind_event_type::
operation () const
{
  return this->operation_;
}

result_ind_event_type::operation_optional& result_ind_event_type::
operation ()
{
  return this->operation_;
}

void result_ind_event_type::
operation (const operation_type& operation)
{
  this->operation_.set (operation);
}

void result_ind_event_type::
operation (const operation_optional& operation)
{
  this->operation_ = operation;
}

void result_ind_event_type::
operation (::std::auto_ptr< operation_type > operation)
{
  this->operation_.set (operation);
}

const result_ind_event_type::parameters_optional& result_ind_event_type::
parameters () const
{
  return this->parameters_;
}

result_ind_event_type::parameters_optional& result_ind_event_type::
parameters ()
{
  return this->parameters_;
}

void result_ind_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void result_ind_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void result_ind_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const result_ind_event_type::dialogue_id_optional& result_ind_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

result_ind_event_type::dialogue_id_optional& result_ind_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void result_ind_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void result_ind_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const result_ind_event_type::invoke_id_optional& result_ind_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

result_ind_event_type::invoke_id_optional& result_ind_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void result_ind_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void result_ind_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const result_ind_event_type::last_component_optional& result_ind_event_type::
last_component () const
{
  return this->last_component_;
}

result_ind_event_type::last_component_optional& result_ind_event_type::
last_component ()
{
  return this->last_component_;
}

void result_ind_event_type::
last_component (const last_component_type& last_component)
{
  this->last_component_.set (last_component);
}

void result_ind_event_type::
last_component (const last_component_optional& last_component)
{
  this->last_component_ = last_component;
}

const result_ind_event_type::link_id_optional& result_ind_event_type::
link_id () const
{
  return this->link_id_;
}

result_ind_event_type::link_id_optional& result_ind_event_type::
link_id ()
{
  return this->link_id_;
}

void result_ind_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void result_ind_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const result_ind_event_type::last_result_event_type& result_ind_event_type::
last_result_event () const
{
  return this->last_result_event_.get ();
}

result_ind_event_type::last_result_event_type& result_ind_event_type::
last_result_event ()
{
  return this->last_result_event_.get ();
}

void result_ind_event_type::
last_result_event (const last_result_event_type& last_result_event)
{
  this->last_result_event_.set (last_result_event);
}


// end_req_event_type
// 

const end_req_event_type::dialogue_portion_optional& end_req_event_type::
dialogue_portion () const
{
  return this->dialogue_portion_;
}

end_req_event_type::dialogue_portion_optional& end_req_event_type::
dialogue_portion ()
{
  return this->dialogue_portion_;
}

void end_req_event_type::
dialogue_portion (const dialogue_portion_type& dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

void end_req_event_type::
dialogue_portion (const dialogue_portion_optional& dialogue_portion)
{
  this->dialogue_portion_ = dialogue_portion;
}

void end_req_event_type::
dialogue_portion (::std::auto_ptr< dialogue_portion_type > dialogue_portion)
{
  this->dialogue_portion_.set (dialogue_portion);
}

const end_req_event_type::component_req_event_sequence& end_req_event_type::
component_req_event () const
{
  return this->component_req_event_;
}

end_req_event_type::component_req_event_sequence& end_req_event_type::
component_req_event ()
{
  return this->component_req_event_;
}

void end_req_event_type::
component_req_event (const component_req_event_sequence& component_req_event)
{
  this->component_req_event_ = component_req_event;
}

const end_req_event_type::dialogue_id_optional& end_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

end_req_event_type::dialogue_id_optional& end_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void end_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void end_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const end_req_event_type::quality_of_service_optional& end_req_event_type::
quality_of_service () const
{
  return this->quality_of_service_;
}

end_req_event_type::quality_of_service_optional& end_req_event_type::
quality_of_service ()
{
  return this->quality_of_service_;
}

void end_req_event_type::
quality_of_service (const quality_of_service_type& quality_of_service)
{
  this->quality_of_service_.set (quality_of_service);
}

void end_req_event_type::
quality_of_service (const quality_of_service_optional& quality_of_service)
{
  this->quality_of_service_ = quality_of_service;
}

const end_req_event_type::termination_optional& end_req_event_type::
termination () const
{
  return this->termination_;
}

end_req_event_type::termination_optional& end_req_event_type::
termination ()
{
  return this->termination_;
}

void end_req_event_type::
termination (const termination_type& termination)
{
  this->termination_.set (termination);
}

void end_req_event_type::
termination (const termination_optional& termination)
{
  this->termination_ = termination;
}

void end_req_event_type::
termination (::std::auto_ptr< termination_type > termination)
{
  this->termination_.set (termination);
}


// result_req_event_type
// 

const result_req_event_type::operation_optional& result_req_event_type::
operation () const
{
  return this->operation_;
}

result_req_event_type::operation_optional& result_req_event_type::
operation ()
{
  return this->operation_;
}

void result_req_event_type::
operation (const operation_type& operation)
{
  this->operation_.set (operation);
}

void result_req_event_type::
operation (const operation_optional& operation)
{
  this->operation_ = operation;
}

void result_req_event_type::
operation (::std::auto_ptr< operation_type > operation)
{
  this->operation_.set (operation);
}

const result_req_event_type::parameters_optional& result_req_event_type::
parameters () const
{
  return this->parameters_;
}

result_req_event_type::parameters_optional& result_req_event_type::
parameters ()
{
  return this->parameters_;
}

void result_req_event_type::
parameters (const parameters_type& parameters)
{
  this->parameters_.set (parameters);
}

void result_req_event_type::
parameters (const parameters_optional& parameters)
{
  this->parameters_ = parameters;
}

void result_req_event_type::
parameters (::std::auto_ptr< parameters_type > parameters)
{
  this->parameters_.set (parameters);
}

const result_req_event_type::dialogue_id_optional& result_req_event_type::
dialogue_id () const
{
  return this->dialogue_id_;
}

result_req_event_type::dialogue_id_optional& result_req_event_type::
dialogue_id ()
{
  return this->dialogue_id_;
}

void result_req_event_type::
dialogue_id (const dialogue_id_type& dialogue_id)
{
  this->dialogue_id_.set (dialogue_id);
}

void result_req_event_type::
dialogue_id (const dialogue_id_optional& dialogue_id)
{
  this->dialogue_id_ = dialogue_id;
}

const result_req_event_type::invoke_id_optional& result_req_event_type::
invoke_id () const
{
  return this->invoke_id_;
}

result_req_event_type::invoke_id_optional& result_req_event_type::
invoke_id ()
{
  return this->invoke_id_;
}

void result_req_event_type::
invoke_id (const invoke_id_type& invoke_id)
{
  this->invoke_id_.set (invoke_id);
}

void result_req_event_type::
invoke_id (const invoke_id_optional& invoke_id)
{
  this->invoke_id_ = invoke_id;
}

const result_req_event_type::link_id_optional& result_req_event_type::
link_id () const
{
  return this->link_id_;
}

result_req_event_type::link_id_optional& result_req_event_type::
link_id ()
{
  return this->link_id_;
}

void result_req_event_type::
link_id (const link_id_type& link_id)
{
  this->link_id_.set (link_id);
}

void result_req_event_type::
link_id (const link_id_optional& link_id)
{
  this->link_id_ = link_id;
}

const result_req_event_type::last_result_event_type& result_req_event_type::
last_result_event () const
{
  return this->last_result_event_.get ();
}

result_req_event_type::last_result_event_type& result_req_event_type::
last_result_event ()
{
  return this->last_result_event_.get ();
}

void result_req_event_type::
last_result_event (const last_result_event_type& last_result_event)
{
  this->last_result_event_.set (last_result_event);
}


// sccp_user_address_type
// 

const sccp_user_address_type::sub_system_address_optional& sccp_user_address_type::
sub_system_address () const
{
  return this->sub_system_address_;
}

sccp_user_address_type::sub_system_address_optional& sccp_user_address_type::
sub_system_address ()
{
  return this->sub_system_address_;
}

void sccp_user_address_type::
sub_system_address (const sub_system_address_type& sub_system_address)
{
  this->sub_system_address_.set (sub_system_address);
}

void sccp_user_address_type::
sub_system_address (const sub_system_address_optional& sub_system_address)
{
  this->sub_system_address_ = sub_system_address;
}

void sccp_user_address_type::
sub_system_address (::std::auto_ptr< sub_system_address_type > sub_system_address)
{
  this->sub_system_address_.set (sub_system_address);
}

const sccp_user_address_type::global_title_optional& sccp_user_address_type::
global_title () const
{
  return this->global_title_;
}

sccp_user_address_type::global_title_optional& sccp_user_address_type::
global_title ()
{
  return this->global_title_;
}

void sccp_user_address_type::
global_title (const global_title_type& global_title)
{
  this->global_title_.set (global_title);
}

void sccp_user_address_type::
global_title (const global_title_optional& global_title)
{
  this->global_title_ = global_title;
}

void sccp_user_address_type::
global_title (::std::auto_ptr< global_title_type > global_title)
{
  this->global_title_.set (global_title);
}

const sccp_user_address_type::routing_indicator_type& sccp_user_address_type::
routing_indicator () const
{
  return this->routing_indicator_.get ();
}

sccp_user_address_type::routing_indicator_type& sccp_user_address_type::
routing_indicator ()
{
  return this->routing_indicator_.get ();
}

void sccp_user_address_type::
routing_indicator (const routing_indicator_type& routing_indicator)
{
  this->routing_indicator_.set (routing_indicator);
}

void sccp_user_address_type::
routing_indicator (::std::auto_ptr< routing_indicator_type > routing_indicator)
{
  this->routing_indicator_.set (routing_indicator);
}

const sccp_user_address_type::national_use_optional& sccp_user_address_type::
national_use () const
{
  return this->national_use_;
}

sccp_user_address_type::national_use_optional& sccp_user_address_type::
national_use ()
{
  return this->national_use_;
}

void sccp_user_address_type::
national_use (const national_use_type& national_use)
{
  this->national_use_.set (national_use);
}

void sccp_user_address_type::
national_use (const national_use_optional& national_use)
{
  this->national_use_ = national_use;
}


// parameters_type
// 

const parameters_type::parameter_type& parameters_type::
parameter () const
{
  return this->parameter_.get ();
}

parameters_type::parameter_type& parameters_type::
parameter ()
{
  return this->parameter_.get ();
}

void parameters_type::
parameter (const parameter_type& parameter)
{
  this->parameter_.set (parameter);
}

void parameters_type::
parameter (::std::auto_ptr< parameter_type > parameter)
{
  this->parameter_.set (parameter);
}

const parameters_type::parameter_identifier_type& parameters_type::
parameter_identifier () const
{
  return this->parameter_identifier_.get ();
}

parameters_type::parameter_identifier_type& parameters_type::
parameter_identifier ()
{
  return this->parameter_identifier_.get ();
}

void parameters_type::
parameter_identifier (const parameter_identifier_type& parameter_identifier)
{
  this->parameter_identifier_.set (parameter_identifier);
}

void parameters_type::
parameter_identifier (::std::auto_ptr< parameter_identifier_type > parameter_identifier)
{
  this->parameter_identifier_.set (parameter_identifier);
}


// state_req_event_type
// 

const state_req_event_type::nstate_req_event_type& state_req_event_type::
nstate_req_event () const
{
  return this->nstate_req_event_.get ();
}

state_req_event_type::nstate_req_event_type& state_req_event_type::
nstate_req_event ()
{
  return this->nstate_req_event_.get ();
}

void state_req_event_type::
nstate_req_event (const nstate_req_event_type& nstate_req_event)
{
  this->nstate_req_event_.set (nstate_req_event);
}

void state_req_event_type::
nstate_req_event (::std::auto_ptr< nstate_req_event_type > nstate_req_event)
{
  this->nstate_req_event_.set (nstate_req_event);
}


// dialogue_ind_event_type
// 

const dialogue_ind_event_type::user_abort_ind_event_optional& dialogue_ind_event_type::
user_abort_ind_event () const
{
  return this->user_abort_ind_event_;
}

dialogue_ind_event_type::user_abort_ind_event_optional& dialogue_ind_event_type::
user_abort_ind_event ()
{
  return this->user_abort_ind_event_;
}

void dialogue_ind_event_type::
user_abort_ind_event (const user_abort_ind_event_type& user_abort_ind_event)
{
  this->user_abort_ind_event_.set (user_abort_ind_event);
}

void dialogue_ind_event_type::
user_abort_ind_event (const user_abort_ind_event_optional& user_abort_ind_event)
{
  this->user_abort_ind_event_ = user_abort_ind_event;
}

void dialogue_ind_event_type::
user_abort_ind_event (::std::auto_ptr< user_abort_ind_event_type > user_abort_ind_event)
{
  this->user_abort_ind_event_.set (user_abort_ind_event);
}

const dialogue_ind_event_type::end_ind_event_optional& dialogue_ind_event_type::
end_ind_event () const
{
  return this->end_ind_event_;
}

dialogue_ind_event_type::end_ind_event_optional& dialogue_ind_event_type::
end_ind_event ()
{
  return this->end_ind_event_;
}

void dialogue_ind_event_type::
end_ind_event (const end_ind_event_type& end_ind_event)
{
  this->end_ind_event_.set (end_ind_event);
}

void dialogue_ind_event_type::
end_ind_event (const end_ind_event_optional& end_ind_event)
{
  this->end_ind_event_ = end_ind_event;
}

void dialogue_ind_event_type::
end_ind_event (::std::auto_ptr< end_ind_event_type > end_ind_event)
{
  this->end_ind_event_.set (end_ind_event);
}

const dialogue_ind_event_type::provider_abort_ind_event_optional& dialogue_ind_event_type::
provider_abort_ind_event () const
{
  return this->provider_abort_ind_event_;
}

dialogue_ind_event_type::provider_abort_ind_event_optional& dialogue_ind_event_type::
provider_abort_ind_event ()
{
  return this->provider_abort_ind_event_;
}

void dialogue_ind_event_type::
provider_abort_ind_event (const provider_abort_ind_event_type& provider_abort_ind_event)
{
  this->provider_abort_ind_event_.set (provider_abort_ind_event);
}

void dialogue_ind_event_type::
provider_abort_ind_event (const provider_abort_ind_event_optional& provider_abort_ind_event)
{
  this->provider_abort_ind_event_ = provider_abort_ind_event;
}

void dialogue_ind_event_type::
provider_abort_ind_event (::std::auto_ptr< provider_abort_ind_event_type > provider_abort_ind_event)
{
  this->provider_abort_ind_event_.set (provider_abort_ind_event);
}

const dialogue_ind_event_type::begin_ind_event_optional& dialogue_ind_event_type::
begin_ind_event () const
{
  return this->begin_ind_event_;
}

dialogue_ind_event_type::begin_ind_event_optional& dialogue_ind_event_type::
begin_ind_event ()
{
  return this->begin_ind_event_;
}

void dialogue_ind_event_type::
begin_ind_event (const begin_ind_event_type& begin_ind_event)
{
  this->begin_ind_event_.set (begin_ind_event);
}

void dialogue_ind_event_type::
begin_ind_event (const begin_ind_event_optional& begin_ind_event)
{
  this->begin_ind_event_ = begin_ind_event;
}

void dialogue_ind_event_type::
begin_ind_event (::std::auto_ptr< begin_ind_event_type > begin_ind_event)
{
  this->begin_ind_event_.set (begin_ind_event);
}

const dialogue_ind_event_type::unidirectional_ind_event_optional& dialogue_ind_event_type::
unidirectional_ind_event () const
{
  return this->unidirectional_ind_event_;
}

dialogue_ind_event_type::unidirectional_ind_event_optional& dialogue_ind_event_type::
unidirectional_ind_event ()
{
  return this->unidirectional_ind_event_;
}

void dialogue_ind_event_type::
unidirectional_ind_event (const unidirectional_ind_event_type& unidirectional_ind_event)
{
  this->unidirectional_ind_event_.set (unidirectional_ind_event);
}

void dialogue_ind_event_type::
unidirectional_ind_event (const unidirectional_ind_event_optional& unidirectional_ind_event)
{
  this->unidirectional_ind_event_ = unidirectional_ind_event;
}

void dialogue_ind_event_type::
unidirectional_ind_event (::std::auto_ptr< unidirectional_ind_event_type > unidirectional_ind_event)
{
  this->unidirectional_ind_event_.set (unidirectional_ind_event);
}

const dialogue_ind_event_type::continue_ind_event_optional& dialogue_ind_event_type::
continue_ind_event () const
{
  return this->continue_ind_event_;
}

dialogue_ind_event_type::continue_ind_event_optional& dialogue_ind_event_type::
continue_ind_event ()
{
  return this->continue_ind_event_;
}

void dialogue_ind_event_type::
continue_ind_event (const continue_ind_event_type& continue_ind_event)
{
  this->continue_ind_event_.set (continue_ind_event);
}

void dialogue_ind_event_type::
continue_ind_event (const continue_ind_event_optional& continue_ind_event)
{
  this->continue_ind_event_ = continue_ind_event;
}

void dialogue_ind_event_type::
continue_ind_event (::std::auto_ptr< continue_ind_event_type > continue_ind_event)
{
  this->continue_ind_event_.set (continue_ind_event);
}

const dialogue_ind_event_type::notice_ind_event_optional& dialogue_ind_event_type::
notice_ind_event () const
{
  return this->notice_ind_event_;
}

dialogue_ind_event_type::notice_ind_event_optional& dialogue_ind_event_type::
notice_ind_event ()
{
  return this->notice_ind_event_;
}

void dialogue_ind_event_type::
notice_ind_event (const notice_ind_event_type& notice_ind_event)
{
  this->notice_ind_event_.set (notice_ind_event);
}

void dialogue_ind_event_type::
notice_ind_event (const notice_ind_event_optional& notice_ind_event)
{
  this->notice_ind_event_ = notice_ind_event;
}

void dialogue_ind_event_type::
notice_ind_event (::std::auto_ptr< notice_ind_event_type > notice_ind_event)
{
  this->notice_ind_event_.set (notice_ind_event);
}


// component_ind_event_type
// 

const component_ind_event_type::error_ind_event_optional& component_ind_event_type::
error_ind_event () const
{
  return this->error_ind_event_;
}

component_ind_event_type::error_ind_event_optional& component_ind_event_type::
error_ind_event ()
{
  return this->error_ind_event_;
}

void component_ind_event_type::
error_ind_event (const error_ind_event_type& error_ind_event)
{
  this->error_ind_event_.set (error_ind_event);
}

void component_ind_event_type::
error_ind_event (const error_ind_event_optional& error_ind_event)
{
  this->error_ind_event_ = error_ind_event;
}

void component_ind_event_type::
error_ind_event (::std::auto_ptr< error_ind_event_type > error_ind_event)
{
  this->error_ind_event_.set (error_ind_event);
}

const component_ind_event_type::reject_ind_event_optional& component_ind_event_type::
reject_ind_event () const
{
  return this->reject_ind_event_;
}

component_ind_event_type::reject_ind_event_optional& component_ind_event_type::
reject_ind_event ()
{
  return this->reject_ind_event_;
}

void component_ind_event_type::
reject_ind_event (const reject_ind_event_type& reject_ind_event)
{
  this->reject_ind_event_.set (reject_ind_event);
}

void component_ind_event_type::
reject_ind_event (const reject_ind_event_optional& reject_ind_event)
{
  this->reject_ind_event_ = reject_ind_event;
}

void component_ind_event_type::
reject_ind_event (::std::auto_ptr< reject_ind_event_type > reject_ind_event)
{
  this->reject_ind_event_.set (reject_ind_event);
}

const component_ind_event_type::local_cancel_ind_event_optional& component_ind_event_type::
local_cancel_ind_event () const
{
  return this->local_cancel_ind_event_;
}

component_ind_event_type::local_cancel_ind_event_optional& component_ind_event_type::
local_cancel_ind_event ()
{
  return this->local_cancel_ind_event_;
}

void component_ind_event_type::
local_cancel_ind_event (const local_cancel_ind_event_type& local_cancel_ind_event)
{
  this->local_cancel_ind_event_.set (local_cancel_ind_event);
}

void component_ind_event_type::
local_cancel_ind_event (const local_cancel_ind_event_optional& local_cancel_ind_event)
{
  this->local_cancel_ind_event_ = local_cancel_ind_event;
}

void component_ind_event_type::
local_cancel_ind_event (::std::auto_ptr< local_cancel_ind_event_type > local_cancel_ind_event)
{
  this->local_cancel_ind_event_.set (local_cancel_ind_event);
}

const component_ind_event_type::invoke_ind_event_optional& component_ind_event_type::
invoke_ind_event () const
{
  return this->invoke_ind_event_;
}

component_ind_event_type::invoke_ind_event_optional& component_ind_event_type::
invoke_ind_event ()
{
  return this->invoke_ind_event_;
}

void component_ind_event_type::
invoke_ind_event (const invoke_ind_event_type& invoke_ind_event)
{
  this->invoke_ind_event_.set (invoke_ind_event);
}

void component_ind_event_type::
invoke_ind_event (const invoke_ind_event_optional& invoke_ind_event)
{
  this->invoke_ind_event_ = invoke_ind_event;
}

void component_ind_event_type::
invoke_ind_event (::std::auto_ptr< invoke_ind_event_type > invoke_ind_event)
{
  this->invoke_ind_event_.set (invoke_ind_event);
}

const component_ind_event_type::result_ind_event_optional& component_ind_event_type::
result_ind_event () const
{
  return this->result_ind_event_;
}

component_ind_event_type::result_ind_event_optional& component_ind_event_type::
result_ind_event ()
{
  return this->result_ind_event_;
}

void component_ind_event_type::
result_ind_event (const result_ind_event_type& result_ind_event)
{
  this->result_ind_event_.set (result_ind_event);
}

void component_ind_event_type::
result_ind_event (const result_ind_event_optional& result_ind_event)
{
  this->result_ind_event_ = result_ind_event;
}

void component_ind_event_type::
result_ind_event (::std::auto_ptr< result_ind_event_type > result_ind_event)
{
  this->result_ind_event_.set (result_ind_event);
}


// state_ind_event_type
// 

const state_ind_event_type::nstate_ind_event_optional& state_ind_event_type::
nstate_ind_event () const
{
  return this->nstate_ind_event_;
}

state_ind_event_type::nstate_ind_event_optional& state_ind_event_type::
nstate_ind_event ()
{
  return this->nstate_ind_event_;
}

void state_ind_event_type::
nstate_ind_event (const nstate_ind_event_type& nstate_ind_event)
{
  this->nstate_ind_event_.set (nstate_ind_event);
}

void state_ind_event_type::
nstate_ind_event (const nstate_ind_event_optional& nstate_ind_event)
{
  this->nstate_ind_event_ = nstate_ind_event;
}

void state_ind_event_type::
nstate_ind_event (::std::auto_ptr< nstate_ind_event_type > nstate_ind_event)
{
  this->nstate_ind_event_.set (nstate_ind_event);
}

const state_ind_event_type::npcstate_ind_event_optional& state_ind_event_type::
npcstate_ind_event () const
{
  return this->npcstate_ind_event_;
}

state_ind_event_type::npcstate_ind_event_optional& state_ind_event_type::
npcstate_ind_event ()
{
  return this->npcstate_ind_event_;
}

void state_ind_event_type::
npcstate_ind_event (const npcstate_ind_event_type& npcstate_ind_event)
{
  this->npcstate_ind_event_.set (npcstate_ind_event);
}

void state_ind_event_type::
npcstate_ind_event (const npcstate_ind_event_optional& npcstate_ind_event)
{
  this->npcstate_ind_event_ = npcstate_ind_event;
}

void state_ind_event_type::
npcstate_ind_event (::std::auto_ptr< npcstate_ind_event_type > npcstate_ind_event)
{
  this->npcstate_ind_event_.set (npcstate_ind_event);
}


// dialogue_req_event_type
// 

const dialogue_req_event_type::user_abort_req_event_optional& dialogue_req_event_type::
user_abort_req_event () const
{
  return this->user_abort_req_event_;
}

dialogue_req_event_type::user_abort_req_event_optional& dialogue_req_event_type::
user_abort_req_event ()
{
  return this->user_abort_req_event_;
}

void dialogue_req_event_type::
user_abort_req_event (const user_abort_req_event_type& user_abort_req_event)
{
  this->user_abort_req_event_.set (user_abort_req_event);
}

void dialogue_req_event_type::
user_abort_req_event (const user_abort_req_event_optional& user_abort_req_event)
{
  this->user_abort_req_event_ = user_abort_req_event;
}

void dialogue_req_event_type::
user_abort_req_event (::std::auto_ptr< user_abort_req_event_type > user_abort_req_event)
{
  this->user_abort_req_event_.set (user_abort_req_event);
}

const dialogue_req_event_type::unidirectional_req_event_optional& dialogue_req_event_type::
unidirectional_req_event () const
{
  return this->unidirectional_req_event_;
}

dialogue_req_event_type::unidirectional_req_event_optional& dialogue_req_event_type::
unidirectional_req_event ()
{
  return this->unidirectional_req_event_;
}

void dialogue_req_event_type::
unidirectional_req_event (const unidirectional_req_event_type& unidirectional_req_event)
{
  this->unidirectional_req_event_.set (unidirectional_req_event);
}

void dialogue_req_event_type::
unidirectional_req_event (const unidirectional_req_event_optional& unidirectional_req_event)
{
  this->unidirectional_req_event_ = unidirectional_req_event;
}

void dialogue_req_event_type::
unidirectional_req_event (::std::auto_ptr< unidirectional_req_event_type > unidirectional_req_event)
{
  this->unidirectional_req_event_.set (unidirectional_req_event);
}

const dialogue_req_event_type::continue_req_event_optional& dialogue_req_event_type::
continue_req_event () const
{
  return this->continue_req_event_;
}

dialogue_req_event_type::continue_req_event_optional& dialogue_req_event_type::
continue_req_event ()
{
  return this->continue_req_event_;
}

void dialogue_req_event_type::
continue_req_event (const continue_req_event_type& continue_req_event)
{
  this->continue_req_event_.set (continue_req_event);
}

void dialogue_req_event_type::
continue_req_event (const continue_req_event_optional& continue_req_event)
{
  this->continue_req_event_ = continue_req_event;
}

void dialogue_req_event_type::
continue_req_event (::std::auto_ptr< continue_req_event_type > continue_req_event)
{
  this->continue_req_event_.set (continue_req_event);
}

const dialogue_req_event_type::begin_req_event_optional& dialogue_req_event_type::
begin_req_event () const
{
  return this->begin_req_event_;
}

dialogue_req_event_type::begin_req_event_optional& dialogue_req_event_type::
begin_req_event ()
{
  return this->begin_req_event_;
}

void dialogue_req_event_type::
begin_req_event (const begin_req_event_type& begin_req_event)
{
  this->begin_req_event_.set (begin_req_event);
}

void dialogue_req_event_type::
begin_req_event (const begin_req_event_optional& begin_req_event)
{
  this->begin_req_event_ = begin_req_event;
}

void dialogue_req_event_type::
begin_req_event (::std::auto_ptr< begin_req_event_type > begin_req_event)
{
  this->begin_req_event_.set (begin_req_event);
}

const dialogue_req_event_type::end_req_event_optional& dialogue_req_event_type::
end_req_event () const
{
  return this->end_req_event_;
}

dialogue_req_event_type::end_req_event_optional& dialogue_req_event_type::
end_req_event ()
{
  return this->end_req_event_;
}

void dialogue_req_event_type::
end_req_event (const end_req_event_type& end_req_event)
{
  this->end_req_event_.set (end_req_event);
}

void dialogue_req_event_type::
end_req_event (const end_req_event_optional& end_req_event)
{
  this->end_req_event_ = end_req_event;
}

void dialogue_req_event_type::
end_req_event (::std::auto_ptr< end_req_event_type > end_req_event)
{
  this->end_req_event_.set (end_req_event);
}


// global_title_type
// 

const global_title_type::gtindicator0001_optional& global_title_type::
gtindicator0001 () const
{
  return this->gtindicator0001_;
}

global_title_type::gtindicator0001_optional& global_title_type::
gtindicator0001 ()
{
  return this->gtindicator0001_;
}

void global_title_type::
gtindicator0001 (const gtindicator0001_type& gtindicator0001)
{
  this->gtindicator0001_.set (gtindicator0001);
}

void global_title_type::
gtindicator0001 (const gtindicator0001_optional& gtindicator0001)
{
  this->gtindicator0001_ = gtindicator0001;
}

void global_title_type::
gtindicator0001 (::std::auto_ptr< gtindicator0001_type > gtindicator0001)
{
  this->gtindicator0001_.set (gtindicator0001);
}

const global_title_type::gtindicator0100_optional& global_title_type::
gtindicator0100 () const
{
  return this->gtindicator0100_;
}

global_title_type::gtindicator0100_optional& global_title_type::
gtindicator0100 ()
{
  return this->gtindicator0100_;
}

void global_title_type::
gtindicator0100 (const gtindicator0100_type& gtindicator0100)
{
  this->gtindicator0100_.set (gtindicator0100);
}

void global_title_type::
gtindicator0100 (const gtindicator0100_optional& gtindicator0100)
{
  this->gtindicator0100_ = gtindicator0100;
}

void global_title_type::
gtindicator0100 (::std::auto_ptr< gtindicator0100_type > gtindicator0100)
{
  this->gtindicator0100_.set (gtindicator0100);
}

const global_title_type::gtindicator0011_optional& global_title_type::
gtindicator0011 () const
{
  return this->gtindicator0011_;
}

global_title_type::gtindicator0011_optional& global_title_type::
gtindicator0011 ()
{
  return this->gtindicator0011_;
}

void global_title_type::
gtindicator0011 (const gtindicator0011_type& gtindicator0011)
{
  this->gtindicator0011_.set (gtindicator0011);
}

void global_title_type::
gtindicator0011 (const gtindicator0011_optional& gtindicator0011)
{
  this->gtindicator0011_ = gtindicator0011;
}

void global_title_type::
gtindicator0011 (::std::auto_ptr< gtindicator0011_type > gtindicator0011)
{
  this->gtindicator0011_.set (gtindicator0011);
}

const global_title_type::gtindicator0010_optional& global_title_type::
gtindicator0010 () const
{
  return this->gtindicator0010_;
}

global_title_type::gtindicator0010_optional& global_title_type::
gtindicator0010 ()
{
  return this->gtindicator0010_;
}

void global_title_type::
gtindicator0010 (const gtindicator0010_type& gtindicator0010)
{
  this->gtindicator0010_.set (gtindicator0010);
}

void global_title_type::
gtindicator0010 (const gtindicator0010_optional& gtindicator0010)
{
  this->gtindicator0010_ = gtindicator0010;
}

void global_title_type::
gtindicator0010 (::std::auto_ptr< gtindicator0010_type > gtindicator0010)
{
  this->gtindicator0010_.set (gtindicator0010);
}


// component_req_event_type
// 

const component_req_event_type::error_req_event_optional& component_req_event_type::
error_req_event () const
{
  return this->error_req_event_;
}

component_req_event_type::error_req_event_optional& component_req_event_type::
error_req_event ()
{
  return this->error_req_event_;
}

void component_req_event_type::
error_req_event (const error_req_event_type& error_req_event)
{
  this->error_req_event_.set (error_req_event);
}

void component_req_event_type::
error_req_event (const error_req_event_optional& error_req_event)
{
  this->error_req_event_ = error_req_event;
}

void component_req_event_type::
error_req_event (::std::auto_ptr< error_req_event_type > error_req_event)
{
  this->error_req_event_.set (error_req_event);
}

const component_req_event_type::timer_reset_req_event_optional& component_req_event_type::
timer_reset_req_event () const
{
  return this->timer_reset_req_event_;
}

component_req_event_type::timer_reset_req_event_optional& component_req_event_type::
timer_reset_req_event ()
{
  return this->timer_reset_req_event_;
}

void component_req_event_type::
timer_reset_req_event (const timer_reset_req_event_type& timer_reset_req_event)
{
  this->timer_reset_req_event_.set (timer_reset_req_event);
}

void component_req_event_type::
timer_reset_req_event (const timer_reset_req_event_optional& timer_reset_req_event)
{
  this->timer_reset_req_event_ = timer_reset_req_event;
}

void component_req_event_type::
timer_reset_req_event (::std::auto_ptr< timer_reset_req_event_type > timer_reset_req_event)
{
  this->timer_reset_req_event_.set (timer_reset_req_event);
}

const component_req_event_type::reject_req_event_optional& component_req_event_type::
reject_req_event () const
{
  return this->reject_req_event_;
}

component_req_event_type::reject_req_event_optional& component_req_event_type::
reject_req_event ()
{
  return this->reject_req_event_;
}

void component_req_event_type::
reject_req_event (const reject_req_event_type& reject_req_event)
{
  this->reject_req_event_.set (reject_req_event);
}

void component_req_event_type::
reject_req_event (const reject_req_event_optional& reject_req_event)
{
  this->reject_req_event_ = reject_req_event;
}

void component_req_event_type::
reject_req_event (::std::auto_ptr< reject_req_event_type > reject_req_event)
{
  this->reject_req_event_.set (reject_req_event);
}

const component_req_event_type::user_cancel_req_event_optional& component_req_event_type::
user_cancel_req_event () const
{
  return this->user_cancel_req_event_;
}

component_req_event_type::user_cancel_req_event_optional& component_req_event_type::
user_cancel_req_event ()
{
  return this->user_cancel_req_event_;
}

void component_req_event_type::
user_cancel_req_event (const user_cancel_req_event_type& user_cancel_req_event)
{
  this->user_cancel_req_event_.set (user_cancel_req_event);
}

void component_req_event_type::
user_cancel_req_event (const user_cancel_req_event_optional& user_cancel_req_event)
{
  this->user_cancel_req_event_ = user_cancel_req_event;
}

void component_req_event_type::
user_cancel_req_event (::std::auto_ptr< user_cancel_req_event_type > user_cancel_req_event)
{
  this->user_cancel_req_event_.set (user_cancel_req_event);
}

const component_req_event_type::invoke_req_event_optional& component_req_event_type::
invoke_req_event () const
{
  return this->invoke_req_event_;
}

component_req_event_type::invoke_req_event_optional& component_req_event_type::
invoke_req_event ()
{
  return this->invoke_req_event_;
}

void component_req_event_type::
invoke_req_event (const invoke_req_event_type& invoke_req_event)
{
  this->invoke_req_event_.set (invoke_req_event);
}

void component_req_event_type::
invoke_req_event (const invoke_req_event_optional& invoke_req_event)
{
  this->invoke_req_event_ = invoke_req_event;
}

void component_req_event_type::
invoke_req_event (::std::auto_ptr< invoke_req_event_type > invoke_req_event)
{
  this->invoke_req_event_.set (invoke_req_event);
}

const component_req_event_type::result_req_event_optional& component_req_event_type::
result_req_event () const
{
  return this->result_req_event_;
}

component_req_event_type::result_req_event_optional& component_req_event_type::
result_req_event ()
{
  return this->result_req_event_;
}

void component_req_event_type::
result_req_event (const result_req_event_type& result_req_event)
{
  this->result_req_event_.set (result_req_event);
}

void component_req_event_type::
result_req_event (const result_req_event_optional& result_req_event)
{
  this->result_req_event_ = result_req_event;
}

void component_req_event_type::
result_req_event (::std::auto_ptr< result_req_event_type > result_req_event)
{
  this->result_req_event_.set (result_req_event);
}


// tcap_type
// 

const tcap_type::dialogue_req_event_optional& tcap_type::
dialogue_req_event () const
{
  return this->dialogue_req_event_;
}

tcap_type::dialogue_req_event_optional& tcap_type::
dialogue_req_event ()
{
  return this->dialogue_req_event_;
}

void tcap_type::
dialogue_req_event (const dialogue_req_event_type& dialogue_req_event)
{
  this->dialogue_req_event_.set (dialogue_req_event);
}

void tcap_type::
dialogue_req_event (const dialogue_req_event_optional& dialogue_req_event)
{
  this->dialogue_req_event_ = dialogue_req_event;
}

void tcap_type::
dialogue_req_event (::std::auto_ptr< dialogue_req_event_type > dialogue_req_event)
{
  this->dialogue_req_event_.set (dialogue_req_event);
}

const tcap_type::dialogue_ind_event_optional& tcap_type::
dialogue_ind_event () const
{
  return this->dialogue_ind_event_;
}

tcap_type::dialogue_ind_event_optional& tcap_type::
dialogue_ind_event ()
{
  return this->dialogue_ind_event_;
}

void tcap_type::
dialogue_ind_event (const dialogue_ind_event_type& dialogue_ind_event)
{
  this->dialogue_ind_event_.set (dialogue_ind_event);
}

void tcap_type::
dialogue_ind_event (const dialogue_ind_event_optional& dialogue_ind_event)
{
  this->dialogue_ind_event_ = dialogue_ind_event;
}

void tcap_type::
dialogue_ind_event (::std::auto_ptr< dialogue_ind_event_type > dialogue_ind_event)
{
  this->dialogue_ind_event_.set (dialogue_ind_event);
}

const tcap_type::state_req_event_optional& tcap_type::
state_req_event () const
{
  return this->state_req_event_;
}

tcap_type::state_req_event_optional& tcap_type::
state_req_event ()
{
  return this->state_req_event_;
}

void tcap_type::
state_req_event (const state_req_event_type& state_req_event)
{
  this->state_req_event_.set (state_req_event);
}

void tcap_type::
state_req_event (const state_req_event_optional& state_req_event)
{
  this->state_req_event_ = state_req_event;
}

void tcap_type::
state_req_event (::std::auto_ptr< state_req_event_type > state_req_event)
{
  this->state_req_event_.set (state_req_event);
}

const tcap_type::state_ind_event_optional& tcap_type::
state_ind_event () const
{
  return this->state_ind_event_;
}

tcap_type::state_ind_event_optional& tcap_type::
state_ind_event ()
{
  return this->state_ind_event_;
}

void tcap_type::
state_ind_event (const state_ind_event_type& state_ind_event)
{
  this->state_ind_event_.set (state_ind_event);
}

void tcap_type::
state_ind_event (const state_ind_event_optional& state_ind_event)
{
  this->state_ind_event_ = state_ind_event;
}

void tcap_type::
state_ind_event (::std::auto_ptr< state_ind_event_type > state_ind_event)
{
  this->state_ind_event_.set (state_ind_event);
}

const tcap_type::local_cancel_ind_event_optional& tcap_type::
local_cancel_ind_event () const
{
  return this->local_cancel_ind_event_;
}

tcap_type::local_cancel_ind_event_optional& tcap_type::
local_cancel_ind_event ()
{
  return this->local_cancel_ind_event_;
}

void tcap_type::
local_cancel_ind_event (const local_cancel_ind_event_type& local_cancel_ind_event)
{
  this->local_cancel_ind_event_.set (local_cancel_ind_event);
}

void tcap_type::
local_cancel_ind_event (const local_cancel_ind_event_optional& local_cancel_ind_event)
{
  this->local_cancel_ind_event_ = local_cancel_ind_event;
}

void tcap_type::
local_cancel_ind_event (::std::auto_ptr< local_cancel_ind_event_type > local_cancel_ind_event)
{
  this->local_cancel_ind_event_.set (local_cancel_ind_event);
}

const tcap_type::reject_ind_event_optional& tcap_type::
reject_ind_event () const
{
  return this->reject_ind_event_;
}

tcap_type::reject_ind_event_optional& tcap_type::
reject_ind_event ()
{
  return this->reject_ind_event_;
}

void tcap_type::
reject_ind_event (const reject_ind_event_type& reject_ind_event)
{
  this->reject_ind_event_.set (reject_ind_event);
}

void tcap_type::
reject_ind_event (const reject_ind_event_optional& reject_ind_event)
{
  this->reject_ind_event_ = reject_ind_event;
}

void tcap_type::
reject_ind_event (::std::auto_ptr< reject_ind_event_type > reject_ind_event)
{
  this->reject_ind_event_.set (reject_ind_event);
}

const tcap_type::configuration_optional& tcap_type::
configuration () const
{
  return this->configuration_;
}

tcap_type::configuration_optional& tcap_type::
configuration ()
{
  return this->configuration_;
}

void tcap_type::
configuration (const configuration_type& configuration)
{
  this->configuration_.set (configuration);
}

void tcap_type::
configuration (const configuration_optional& configuration)
{
  this->configuration_ = configuration;
}

void tcap_type::
configuration (::std::auto_ptr< configuration_type > configuration)
{
  this->configuration_.set (configuration);
}


// tcap_config_type
// 

const tcap_config_type::local_user_address_sequence& tcap_config_type::
local_user_address () const
{
  return this->local_user_address_;
}

tcap_config_type::local_user_address_sequence& tcap_config_type::
local_user_address ()
{
  return this->local_user_address_;
}

void tcap_config_type::
local_user_address (const local_user_address_sequence& local_user_address)
{
  this->local_user_address_ = local_user_address;
}


// error_type
// 

error_type::
error_type (value v)
: ::xml_schema::nmtoken (_xsd_error_type_literals_[v])
{
}

error_type::
error_type (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

error_type::
error_type (const error_type& v,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

error_type& error_type::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_error_type_literals_[v]);

  return *this;
}


// numbering_plan
// 

numbering_plan::
numbering_plan (value v)
: ::xml_schema::nmtoken (_xsd_numbering_plan_literals_[v])
{
}

numbering_plan::
numbering_plan (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

numbering_plan::
numbering_plan (const numbering_plan& v,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

numbering_plan& numbering_plan::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_numbering_plan_literals_[v]);

  return *this;
}


// nature_of_addr_ind
// 

nature_of_addr_ind::
nature_of_addr_ind (value v)
: ::xml_schema::nmtoken (_xsd_nature_of_addr_ind_literals_[v])
{
}

nature_of_addr_ind::
nature_of_addr_ind (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

nature_of_addr_ind::
nature_of_addr_ind (const nature_of_addr_ind& v,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

nature_of_addr_ind& nature_of_addr_ind::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_nature_of_addr_ind_literals_[v]);

  return *this;
}


// encoding_scheme
// 

encoding_scheme::
encoding_scheme (value v)
: ::xml_schema::nmtoken (_xsd_encoding_scheme_literals_[v])
{
}

encoding_scheme::
encoding_scheme (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

encoding_scheme::
encoding_scheme (const encoding_scheme& v,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

encoding_scheme& encoding_scheme::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_encoding_scheme_literals_[v]);

  return *this;
}


// abort_reason
// 

abort_reason::
abort_reason (value v)
: ::xml_schema::nmtoken (_xsd_abort_reason_literals_[v])
{
}

abort_reason::
abort_reason (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

abort_reason::
abort_reason (const abort_reason& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

abort_reason& abort_reason::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_abort_reason_literals_[v]);

  return *this;
}


// problem_type
// 

problem_type::
problem_type (value v)
: ::xml_schema::nmtoken (_xsd_problem_type_literals_[v])
{
}

problem_type::
problem_type (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

problem_type::
problem_type (const problem_type& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

problem_type& problem_type::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_problem_type_literals_[v]);

  return *this;
}


// problem
// 

problem::
problem (value v)
: ::xml_schema::nmtoken (_xsd_problem_literals_[v])
{
}

problem::
problem (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

problem::
problem (const problem& v,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

problem& problem::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_problem_literals_[v]);

  return *this;
}


// reject_type
// 

reject_type::
reject_type (value v)
: ::xml_schema::nmtoken (_xsd_reject_type_literals_[v])
{
}

reject_type::
reject_type (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

reject_type::
reject_type (const reject_type& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

reject_type& reject_type::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_reject_type_literals_[v]);

  return *this;
}


// operation_type
// 

operation_type::
operation_type (value v)
: ::xml_schema::nmtoken (_xsd_operation_type_literals_[v])
{
}

operation_type::
operation_type (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

operation_type::
operation_type (const operation_type& v,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

operation_type& operation_type::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_operation_type_literals_[v]);

  return *this;
}


// error_type1
// 

error_type1::
error_type1 (value v)
: ::xml_schema::nmtoken (_xsd_error_type1_literals_[v])
{
}

error_type1::
error_type1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

error_type1::
error_type1 (const error_type1& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

error_type1& error_type1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_error_type1_literals_[v]);

  return *this;
}


// protocol_version
// 

protocol_version::
protocol_version (value v)
: ::xml_schema::nmtoken (_xsd_protocol_version_literals_[v])
{
}

protocol_version::
protocol_version (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

protocol_version::
protocol_version (const protocol_version& v,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

protocol_version& protocol_version::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_protocol_version_literals_[v]);

  return *this;
}


// app_context_identifier
// 

app_context_identifier::
app_context_identifier (value v)
: ::xml_schema::nmtoken (_xsd_app_context_identifier_literals_[v])
{
}

app_context_identifier::
app_context_identifier (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

app_context_identifier::
app_context_identifier (const app_context_identifier& v,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

app_context_identifier& app_context_identifier::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_app_context_identifier_literals_[v]);

  return *this;
}


// security_context_identifier
// 

security_context_identifier::
security_context_identifier (value v)
: ::xml_schema::nmtoken (_xsd_security_context_identifier_literals_[v])
{
}

security_context_identifier::
security_context_identifier (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

security_context_identifier::
security_context_identifier (const security_context_identifier& v,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

security_context_identifier& security_context_identifier::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_security_context_identifier_literals_[v]);

  return *this;
}


// user_status
// 

user_status::
user_status (value v)
: ::xml_schema::nmtoken (_xsd_user_status_literals_[v])
{
}

user_status::
user_status (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

user_status::
user_status (const user_status& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

user_status& user_status::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_user_status_literals_[v]);

  return *this;
}


// p_abort
// 

p_abort::
p_abort (value v)
: ::xml_schema::nmtoken (_xsd_p_abort_literals_[v])
{
}

p_abort::
p_abort (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

p_abort::
p_abort (const p_abort& v,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

p_abort& p_abort::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_p_abort_literals_[v]);

  return *this;
}


// abort_reason1
// 

abort_reason1::
abort_reason1 (value v)
: ::xml_schema::nmtoken (_xsd_abort_reason1_literals_[v])
{
}

abort_reason1::
abort_reason1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

abort_reason1::
abort_reason1 (const abort_reason1& v,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

abort_reason1& abort_reason1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_abort_reason1_literals_[v]);

  return *this;
}


// class_type
// 

class_type::
class_type (value v)
: ::xml_schema::nmtoken (_xsd_class_type_literals_[v])
{
}

class_type::
class_type (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

class_type::
class_type (const class_type& v,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

class_type& class_type::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_class_type_literals_[v]);

  return *this;
}


// numbering_plan1
// 

numbering_plan1::
numbering_plan1 (value v)
: ::xml_schema::nmtoken (_xsd_numbering_plan1_literals_[v])
{
}

numbering_plan1::
numbering_plan1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

numbering_plan1::
numbering_plan1 (const numbering_plan1& v,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

numbering_plan1& numbering_plan1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_numbering_plan1_literals_[v]);

  return *this;
}


// nature_of_addr_ind1
// 

nature_of_addr_ind1::
nature_of_addr_ind1 (value v)
: ::xml_schema::nmtoken (_xsd_nature_of_addr_ind1_literals_[v])
{
}

nature_of_addr_ind1::
nature_of_addr_ind1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

nature_of_addr_ind1::
nature_of_addr_ind1 (const nature_of_addr_ind1& v,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

nature_of_addr_ind1& nature_of_addr_ind1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_nature_of_addr_ind1_literals_[v]);

  return *this;
}


// encoding_scheme1
// 

encoding_scheme1::
encoding_scheme1 (value v)
: ::xml_schema::nmtoken (_xsd_encoding_scheme1_literals_[v])
{
}

encoding_scheme1::
encoding_scheme1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

encoding_scheme1::
encoding_scheme1 (const encoding_scheme1& v,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

encoding_scheme1& encoding_scheme1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_encoding_scheme1_literals_[v]);

  return *this;
}


// problem_type1
// 

problem_type1::
problem_type1 (value v)
: ::xml_schema::nmtoken (_xsd_problem_type1_literals_[v])
{
}

problem_type1::
problem_type1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

problem_type1::
problem_type1 (const problem_type1& v,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

problem_type1& problem_type1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_problem_type1_literals_[v]);

  return *this;
}


// problem1
// 

problem1::
problem1 (value v)
: ::xml_schema::nmtoken (_xsd_problem1_literals_[v])
{
}

problem1::
problem1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

problem1::
problem1 (const problem1& v,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

problem1& problem1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_problem1_literals_[v]);

  return *this;
}


// reject_type1
// 

reject_type1::
reject_type1 (value v)
: ::xml_schema::nmtoken (_xsd_reject_type1_literals_[v])
{
}

reject_type1::
reject_type1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

reject_type1::
reject_type1 (const reject_type1& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

reject_type1& reject_type1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_reject_type1_literals_[v]);

  return *this;
}


// numbering_plan2
// 

numbering_plan2::
numbering_plan2 (value v)
: ::xml_schema::nmtoken (_xsd_numbering_plan2_literals_[v])
{
}

numbering_plan2::
numbering_plan2 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

numbering_plan2::
numbering_plan2 (const numbering_plan2& v,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

numbering_plan2& numbering_plan2::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_numbering_plan2_literals_[v]);

  return *this;
}


// encoding_scheme2
// 

encoding_scheme2::
encoding_scheme2 (value v)
: ::xml_schema::nmtoken (_xsd_encoding_scheme2_literals_[v])
{
}

encoding_scheme2::
encoding_scheme2 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

encoding_scheme2::
encoding_scheme2 (const encoding_scheme2& v,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

encoding_scheme2& encoding_scheme2::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_encoding_scheme2_literals_[v]);

  return *this;
}


// user_status1
// 

user_status1::
user_status1 (value v)
: ::xml_schema::nmtoken (_xsd_user_status1_literals_[v])
{
}

user_status1::
user_status1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

user_status1::
user_status1 (const user_status1& v,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

user_status1& user_status1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_user_status1_literals_[v]);

  return *this;
}


// signaling_point_status
// 

signaling_point_status::
signaling_point_status (value v)
: ::xml_schema::nmtoken (_xsd_signaling_point_status_literals_[v])
{
}

signaling_point_status::
signaling_point_status (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

signaling_point_status::
signaling_point_status (const signaling_point_status& v,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

signaling_point_status& signaling_point_status::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_signaling_point_status_literals_[v]);

  return *this;
}


// class_type1
// 

class_type1::
class_type1 (value v)
: ::xml_schema::nmtoken (_xsd_class_type1_literals_[v])
{
}

class_type1::
class_type1 (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

class_type1::
class_type1 (const class_type1& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

class_type1& class_type1::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_class_type1_literals_[v]);

  return *this;
}


// termination
// 

termination::
termination (value v)
: ::xml_schema::nmtoken (_xsd_termination_literals_[v])
{
}

termination::
termination (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

termination::
termination (const termination& v,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

termination& termination::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_termination_literals_[v]);

  return *this;
}


// routing_indicator
// 

routing_indicator::
routing_indicator (value v)
: ::xml_schema::nmtoken (_xsd_routing_indicator_literals_[v])
{
}

routing_indicator::
routing_indicator (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

routing_indicator::
routing_indicator (const routing_indicator& v,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

routing_indicator& routing_indicator::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_routing_indicator_literals_[v]);

  return *this;
}


// parameter_identifier
// 

parameter_identifier::
parameter_identifier (value v)
: ::xml_schema::nmtoken (_xsd_parameter_identifier_literals_[v])
{
}

parameter_identifier::
parameter_identifier (const ::xml_schema::nmtoken& v)
: ::xml_schema::nmtoken (v)
{
}

parameter_identifier::
parameter_identifier (const parameter_identifier& v,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::nmtoken (v, f, c)
{
}

parameter_identifier& parameter_identifier::
operator= (value v)
{
  static_cast< ::xml_schema::nmtoken& > (*this) = 
  ::xml_schema::nmtoken (_xsd_parameter_identifier_literals_[v]);

  return *this;
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// error_req_event_type
//

error_req_event_type::
error_req_event_type (const error_code_type& error_code,
                      const error_type_type& error_type)
: ::xml_schema::type (),
  parameters_ (::xml_schema::flags (), this),
  error_code_ (error_code, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  error_type_ (error_type, ::xml_schema::flags (), this)
{
}

error_req_event_type::
error_req_event_type (const error_req_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  parameters_ (x.parameters_, f, this),
  error_code_ (x.error_code_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  link_id_ (x.link_id_, f, this),
  error_type_ (x.error_type_, f, this)
{
}

error_req_event_type::
error_req_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameters_ (f, this),
  error_code_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  link_id_ (f, this),
  error_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void error_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    // error_code
    //
    if (n.name () == "error-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_code_type > r (
        error_code_traits::create (i, f, this));

      if (!error_code_.present ())
      {
        this->error_code (r);
        continue;
      }
    }

    break;
  }

  if (!error_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "error-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "error-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_type_type > r (
        error_type_traits::create (i, f, this));

      this->error_type (r);
      continue;
    }
  }

  if (!error_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "error-type",
      "");
  }
}

error_req_event_type* error_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new error_req_event_type (*this, f, c);
}

// timer_reset_req_event_type
//

timer_reset_req_event_type::
timer_reset_req_event_type ()
: ::xml_schema::type (),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this)
{
}

timer_reset_req_event_type::
timer_reset_req_event_type (const timer_reset_req_event_type& x,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this)
{
}

timer_reset_req_event_type::
timer_reset_req_event_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_id_ (f, this),
  invoke_id_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void timer_reset_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }
  }
}

timer_reset_req_event_type* timer_reset_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new timer_reset_req_event_type (*this, f, c);
}

// gtindicator0001_type
//

gtindicator0001_type::
gtindicator0001_type ()
: ::xml_schema::type (),
  address_information_ (::xml_schema::flags (), this),
  translation_type_ (::xml_schema::flags (), this),
  numbering_plan_ (::xml_schema::flags (), this),
  nature_of_addr_ind_ (::xml_schema::flags (), this),
  encoding_scheme_ (::xml_schema::flags (), this)
{
}

gtindicator0001_type::
gtindicator0001_type (const gtindicator0001_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  address_information_ (x.address_information_, f, this),
  translation_type_ (x.translation_type_, f, this),
  numbering_plan_ (x.numbering_plan_, f, this),
  nature_of_addr_ind_ (x.nature_of_addr_ind_, f, this),
  encoding_scheme_ (x.encoding_scheme_, f, this)
{
}

gtindicator0001_type::
gtindicator0001_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  address_information_ (f, this),
  translation_type_ (f, this),
  numbering_plan_ (f, this),
  nature_of_addr_ind_ (f, this),
  encoding_scheme_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void gtindicator0001_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // address_information
    //
    if (n.name () == "address-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< address_information_type > r (
        address_information_traits::create (i, f, this));

      if (!this->address_information ())
      {
        this->address_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "translation-type" && n.namespace_ ().empty ())
    {
      this->translation_type (translation_type_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "numbering-plan" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< numbering_plan_type > r (
        numbering_plan_traits::create (i, f, this));

      this->numbering_plan (r);
      continue;
    }

    if (n.name () == "nature-of-addr-ind" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nature_of_addr_ind_type > r (
        nature_of_addr_ind_traits::create (i, f, this));

      this->nature_of_addr_ind (r);
      continue;
    }

    if (n.name () == "encoding-scheme" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< encoding_scheme_type > r (
        encoding_scheme_traits::create (i, f, this));

      this->encoding_scheme (r);
      continue;
    }
  }
}

gtindicator0001_type* gtindicator0001_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new gtindicator0001_type (*this, f, c);
}

// user_abort_ind_event_type
//

user_abort_ind_event_type::
user_abort_ind_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  user_abort_information_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  abort_reason_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this)
{
}

user_abort_ind_event_type::
user_abort_ind_event_type (const user_abort_ind_event_type& x,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  user_abort_information_ (x.user_abort_information_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  abort_reason_ (x.abort_reason_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this)
{
}

user_abort_ind_event_type::
user_abort_ind_event_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  user_abort_information_ (f, this),
  dialogue_id_ (f, this),
  abort_reason_ (f, this),
  quality_of_service_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void user_abort_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    // user_abort_information
    //
    if (n.name () == "user-abort-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_abort_information_type > r (
        user_abort_information_traits::create (i, f, this));

      if (!this->user_abort_information ())
      {
        this->user_abort_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "abort-reason" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< abort_reason_type > r (
        abort_reason_traits::create (i, f, this));

      this->abort_reason (r);
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }
  }
}

user_abort_ind_event_type* user_abort_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new user_abort_ind_event_type (*this, f, c);
}

// reject_req_event_type
//

reject_req_event_type::
reject_req_event_type (const problem_type_type& problem_type,
                       const problem_type1& problem)
: ::xml_schema::type (),
  parameters_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  problem_type_ (problem_type, ::xml_schema::flags (), this),
  problem_ (problem, ::xml_schema::flags (), this),
  reject_type_ (::xml_schema::flags (), this)
{
}

reject_req_event_type::
reject_req_event_type (const reject_req_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  parameters_ (x.parameters_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  link_id_ (x.link_id_, f, this),
  problem_type_ (x.problem_type_, f, this),
  problem_ (x.problem_, f, this),
  reject_type_ (x.reject_type_, f, this)
{
}

reject_req_event_type::
reject_req_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameters_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  link_id_ (f, this),
  problem_type_ (f, this),
  problem_ (f, this),
  reject_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void reject_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "problem-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type_type > r (
        problem_type_traits::create (i, f, this));

      this->problem_type (r);
      continue;
    }

    if (n.name () == "problem" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type1 > r (
        problem_traits::create (i, f, this));

      this->problem (r);
      continue;
    }

    if (n.name () == "reject-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reject_type_type > r (
        reject_type_traits::create (i, f, this));

      this->reject_type (r);
      continue;
    }
  }

  if (!problem_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "problem-type",
      "");
  }

  if (!problem_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "problem",
      "");
  }
}

reject_req_event_type* reject_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new reject_req_event_type (*this, f, c);
}

// end_ind_event_type
//

end_ind_event_type::
end_ind_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this)
{
}

end_ind_event_type::
end_ind_event_type (const end_ind_event_type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this)
{
}

end_ind_event_type::
end_ind_event_type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void end_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }
  }
}

end_ind_event_type* end_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new end_ind_event_type (*this, f, c);
}

// user_cancel_req_event_type
//

user_cancel_req_event_type::
user_cancel_req_event_type ()
: ::xml_schema::type (),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this)
{
}

user_cancel_req_event_type::
user_cancel_req_event_type (const user_cancel_req_event_type& x,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this)
{
}

user_cancel_req_event_type::
user_cancel_req_event_type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_id_ (f, this),
  invoke_id_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void user_cancel_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }
  }
}

user_cancel_req_event_type* user_cancel_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new user_cancel_req_event_type (*this, f, c);
}

// operation_type_def
//

operation_type_def::
operation_type_def (const operation_code_type& operation_code,
                    const operation_type_type& operation_type)
: ::xml_schema::type (),
  operation_code_ (operation_code, ::xml_schema::flags (), this),
  private_operation_data_ (::xml_schema::flags (), this),
  operation_type_ (operation_type, ::xml_schema::flags (), this)
{
}

operation_type_def::
operation_type_def (const operation_type_def& x,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  operation_code_ (x.operation_code_, f, this),
  private_operation_data_ (x.private_operation_data_, f, this),
  operation_type_ (x.operation_type_, f, this)
{
}

operation_type_def::
operation_type_def (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_code_ (f, this),
  private_operation_data_ (f, this),
  operation_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void operation_type_def::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation_code
    //
    if (n.name () == "operation-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_code_type > r (
        operation_code_traits::create (i, f, this));

      if (!operation_code_.present ())
      {
        this->operation_code (r);
        continue;
      }
    }

    // private_operation_data
    //
    if (n.name () == "private-operation-data" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< private_operation_data_type > r (
        private_operation_data_traits::create (i, f, this));

      if (!this->private_operation_data ())
      {
        this->private_operation_data (r);
        continue;
      }
    }

    break;
  }

  if (!operation_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operation-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "operation-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type_type > r (
        operation_type_traits::create (i, f, this));

      this->operation_type (r);
      continue;
    }
  }

  if (!operation_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "operation-type",
      "");
  }
}

operation_type_def* operation_type_def::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new operation_type_def (*this, f, c);
}

// error_ind_event_type
//

error_ind_event_type::
error_ind_event_type (const error_code_type& error_code,
                      const error_type_type& error_type)
: ::xml_schema::type (),
  parameters_ (::xml_schema::flags (), this),
  error_code_ (error_code, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  last_component_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  error_type_ (error_type, ::xml_schema::flags (), this)
{
}

error_ind_event_type::
error_ind_event_type (const error_ind_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  parameters_ (x.parameters_, f, this),
  error_code_ (x.error_code_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  last_component_ (x.last_component_, f, this),
  link_id_ (x.link_id_, f, this),
  error_type_ (x.error_type_, f, this)
{
}

error_ind_event_type::
error_ind_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameters_ (f, this),
  error_code_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  last_component_ (f, this),
  link_id_ (f, this),
  error_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void error_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    // error_code
    //
    if (n.name () == "error-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_code_type > r (
        error_code_traits::create (i, f, this));

      if (!error_code_.present ())
      {
        this->error_code (r);
        continue;
      }
    }

    break;
  }

  if (!error_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "error-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-component" && n.namespace_ ().empty ())
    {
      this->last_component (last_component_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "error-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_type_type > r (
        error_type_traits::create (i, f, this));

      this->error_type (r);
      continue;
    }
  }

  if (!error_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "error-type",
      "");
  }
}

error_ind_event_type* error_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new error_ind_event_type (*this, f, c);
}

// dialogue_portion_type
//

dialogue_portion_type::
dialogue_portion_type ()
: ::xml_schema::type (),
  app_context_name_ (::xml_schema::flags (), this),
  user_information_ (::xml_schema::flags (), this),
  security_context_information_ (::xml_schema::flags (), this),
  confidentiality_information_ (::xml_schema::flags (), this),
  protocol_version_ (::xml_schema::flags (), this),
  app_context_identifier_ (::xml_schema::flags (), this),
  security_context_identifier_ (::xml_schema::flags (), this)
{
}

dialogue_portion_type::
dialogue_portion_type (const dialogue_portion_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  app_context_name_ (x.app_context_name_, f, this),
  user_information_ (x.user_information_, f, this),
  security_context_information_ (x.security_context_information_, f, this),
  confidentiality_information_ (x.confidentiality_information_, f, this),
  protocol_version_ (x.protocol_version_, f, this),
  app_context_identifier_ (x.app_context_identifier_, f, this),
  security_context_identifier_ (x.security_context_identifier_, f, this)
{
}

dialogue_portion_type::
dialogue_portion_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  app_context_name_ (f, this),
  user_information_ (f, this),
  security_context_information_ (f, this),
  confidentiality_information_ (f, this),
  protocol_version_ (f, this),
  app_context_identifier_ (f, this),
  security_context_identifier_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void dialogue_portion_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // app_context_name
    //
    if (n.name () == "app-context-name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< app_context_name_type > r (
        app_context_name_traits::create (i, f, this));

      if (!this->app_context_name ())
      {
        this->app_context_name (r);
        continue;
      }
    }

    // user_information
    //
    if (n.name () == "user-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_information_type > r (
        user_information_traits::create (i, f, this));

      if (!this->user_information ())
      {
        this->user_information (r);
        continue;
      }
    }

    // security_context_information
    //
    if (n.name () == "security-context-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< security_context_information_type > r (
        security_context_information_traits::create (i, f, this));

      if (!this->security_context_information ())
      {
        this->security_context_information (r);
        continue;
      }
    }

    // confidentiality_information
    //
    if (n.name () == "confidentiality-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< confidentiality_information_type > r (
        confidentiality_information_traits::create (i, f, this));

      if (!this->confidentiality_information ())
      {
        this->confidentiality_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "protocol-version" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< protocol_version_type > r (
        protocol_version_traits::create (i, f, this));

      this->protocol_version (r);
      continue;
    }

    if (n.name () == "app-context-identifier" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< app_context_identifier_type > r (
        app_context_identifier_traits::create (i, f, this));

      this->app_context_identifier (r);
      continue;
    }

    if (n.name () == "security-context-identifier" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< security_context_identifier_type > r (
        security_context_identifier_traits::create (i, f, this));

      this->security_context_identifier (r);
      continue;
    }
  }
}

dialogue_portion_type* dialogue_portion_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new dialogue_portion_type (*this, f, c);
}

// tcap_user_address_type
//

tcap_user_address_type::
tcap_user_address_type ()
: ::xml_schema::type ()
{
}

tcap_user_address_type::
tcap_user_address_type (const tcap_user_address_type& x,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (x, f, c)
{
}

tcap_user_address_type::
tcap_user_address_type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (e, f, c)
{
}

tcap_user_address_type::
tcap_user_address_type (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (a, f, c)
{
}

tcap_user_address_type::
tcap_user_address_type (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (s, e, f, c)
{
}

tcap_user_address_type* tcap_user_address_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new tcap_user_address_type (*this, f, c);
}

// nstate_ind_event_type
//

nstate_ind_event_type::
nstate_ind_event_type (const affected_user_type& affected_user,
                       const own_point_code_type& own_point_code,
                       const user_status_type& user_status)
: ::xml_schema::type (),
  affected_user_ (affected_user, ::xml_schema::flags (), this),
  own_point_code_ (own_point_code, ::xml_schema::flags (), this),
  user_status_ (user_status, ::xml_schema::flags (), this)
{
}

nstate_ind_event_type::
nstate_ind_event_type (const nstate_ind_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  affected_user_ (x.affected_user_, f, this),
  own_point_code_ (x.own_point_code_, f, this),
  user_status_ (x.user_status_, f, this)
{
}

nstate_ind_event_type::
nstate_ind_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  affected_user_ (f, this),
  own_point_code_ (f, this),
  user_status_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void nstate_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // affected_user
    //
    if (n.name () == "affected-user" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< affected_user_type > r (
        affected_user_traits::create (i, f, this));

      if (!affected_user_.present ())
      {
        this->affected_user (r);
        continue;
      }
    }

    // own_point_code
    //
    if (n.name () == "own-point-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< own_point_code_type > r (
        own_point_code_traits::create (i, f, this));

      if (!own_point_code_.present ())
      {
        this->own_point_code (r);
        continue;
      }
    }

    break;
  }

  if (!affected_user_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "affected-user",
      "");
  }

  if (!own_point_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "own-point-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "user-status" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_status_type > r (
        user_status_traits::create (i, f, this));

      this->user_status (r);
      continue;
    }
  }

  if (!user_status_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "user-status",
      "");
  }
}

nstate_ind_event_type* nstate_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new nstate_ind_event_type (*this, f, c);
}

// provider_abort_ind_event_type
//

provider_abort_ind_event_type::
provider_abort_ind_event_type (const p_abort_type& p_abort)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  p_abort_ (p_abort, ::xml_schema::flags (), this)
{
}

provider_abort_ind_event_type::
provider_abort_ind_event_type (const provider_abort_ind_event_type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  p_abort_ (x.p_abort_, f, this)
{
}

provider_abort_ind_event_type::
provider_abort_ind_event_type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  p_abort_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void provider_abort_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "p-abort" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< p_abort_type > r (
        p_abort_traits::create (i, f, this));

      this->p_abort (r);
      continue;
    }
  }

  if (!p_abort_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "p-abort",
      "");
  }
}

provider_abort_ind_event_type* provider_abort_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new provider_abort_ind_event_type (*this, f, c);
}

// user_abort_req_event_type
//

user_abort_req_event_type::
user_abort_req_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_req_event_ (::xml_schema::flags (), this),
  user_abort_information_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  abort_reason_ (::xml_schema::flags (), this)
{
}

user_abort_req_event_type::
user_abort_req_event_type (const user_abort_req_event_type& x,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_req_event_ (x.component_req_event_, f, this),
  user_abort_information_ (x.user_abort_information_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  abort_reason_ (x.abort_reason_, f, this)
{
}

user_abort_req_event_type::
user_abort_req_event_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_req_event_ (f, this),
  user_abort_information_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  abort_reason_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void user_abort_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_req_event
    //
    if (n.name () == "component-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_req_event_type > r (
        component_req_event_traits::create (i, f, this));

      this->component_req_event ().push_back (r);
      continue;
    }

    // user_abort_information
    //
    if (n.name () == "user-abort-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_abort_information_type > r (
        user_abort_information_traits::create (i, f, this));

      if (!this->user_abort_information ())
      {
        this->user_abort_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "abort-reason" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< abort_reason_type > r (
        abort_reason_traits::create (i, f, this));

      this->abort_reason (r);
      continue;
    }
  }
}

user_abort_req_event_type* user_abort_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new user_abort_req_event_type (*this, f, c);
}

// begin_ind_event_type
//

begin_ind_event_type::
begin_ind_event_type (const destination_address_type& destination_address,
                      const originating_address_type& originating_address)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  destination_address_ (destination_address, ::xml_schema::flags (), this),
  originating_address_ (originating_address, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  allowed_permission_ (::xml_schema::flags (), this)
{
}

begin_ind_event_type::
begin_ind_event_type (const begin_ind_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  destination_address_ (x.destination_address_, f, this),
  originating_address_ (x.originating_address_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  allowed_permission_ (x.allowed_permission_, f, this)
{
}

begin_ind_event_type::
begin_ind_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  destination_address_ (f, this),
  originating_address_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  allowed_permission_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void begin_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    // destination_address
    //
    if (n.name () == "destination-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< destination_address_type > r (
        destination_address_traits::create (i, f, this));

      if (!destination_address_.present ())
      {
        this->destination_address (r);
        continue;
      }
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!originating_address_.present ())
      {
        this->originating_address (r);
        continue;
      }
    }

    break;
  }

  if (!destination_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "destination-address",
      "");
  }

  if (!originating_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "originating-address",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowed-permission" && n.namespace_ ().empty ())
    {
      this->allowed_permission (allowed_permission_traits::create (i, f, this));
      continue;
    }
  }
}

begin_ind_event_type* begin_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new begin_ind_event_type (*this, f, c);
}

// invoke_req_event_type
//

invoke_req_event_type::
invoke_req_event_type (const operation_type& operation)
: ::xml_schema::type (),
  operation_ (operation, ::xml_schema::flags (), this),
  parameters_ (::xml_schema::flags (), this),
  time_out_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  linked_id_ (::xml_schema::flags (), this),
  class_type_ (::xml_schema::flags (), this),
  last_invoke_event_ (::xml_schema::flags (), this)
{
}

invoke_req_event_type::
invoke_req_event_type (const invoke_req_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  operation_ (x.operation_, f, this),
  parameters_ (x.parameters_, f, this),
  time_out_ (x.time_out_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  linked_id_ (x.linked_id_, f, this),
  class_type_ (x.class_type_, f, this),
  last_invoke_event_ (x.last_invoke_event_, f, this)
{
}

invoke_req_event_type::
invoke_req_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_ (f, this),
  parameters_ (f, this),
  time_out_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  linked_id_ (f, this),
  class_type_ (f, this),
  last_invoke_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void invoke_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!operation_.present ())
      {
        this->operation (r);
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    // time_out
    //
    if (n.name () == "time-out" && n.namespace_ ().empty ())
    {
      if (!this->time_out ())
      {
        this->time_out (time_out_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!operation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operation",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "linked-id" && n.namespace_ ().empty ())
    {
      this->linked_id (linked_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "class-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< class_type_type > r (
        class_type_traits::create (i, f, this));

      this->class_type (r);
      continue;
    }

    if (n.name () == "last-invoke-event" && n.namespace_ ().empty ())
    {
      this->last_invoke_event (last_invoke_event_traits::create (i, f, this));
      continue;
    }
  }
}

invoke_req_event_type* invoke_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new invoke_req_event_type (*this, f, c);
}

// gtindicator0100_type
//

gtindicator0100_type::
gtindicator0100_type (const translation_type_type& translation_type,
                      const numbering_plan_type& numbering_plan,
                      const nature_of_addr_ind_type& nature_of_addr_ind,
                      const encoding_scheme_type& encoding_scheme)
: ::xml_schema::type (),
  address_information_ (::xml_schema::flags (), this),
  translation_type_ (translation_type, ::xml_schema::flags (), this),
  numbering_plan_ (numbering_plan, ::xml_schema::flags (), this),
  nature_of_addr_ind_ (nature_of_addr_ind, ::xml_schema::flags (), this),
  encoding_scheme_ (encoding_scheme, ::xml_schema::flags (), this)
{
}

gtindicator0100_type::
gtindicator0100_type (const gtindicator0100_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  address_information_ (x.address_information_, f, this),
  translation_type_ (x.translation_type_, f, this),
  numbering_plan_ (x.numbering_plan_, f, this),
  nature_of_addr_ind_ (x.nature_of_addr_ind_, f, this),
  encoding_scheme_ (x.encoding_scheme_, f, this)
{
}

gtindicator0100_type::
gtindicator0100_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  address_information_ (f, this),
  translation_type_ (f, this),
  numbering_plan_ (f, this),
  nature_of_addr_ind_ (f, this),
  encoding_scheme_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void gtindicator0100_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // address_information
    //
    if (n.name () == "address-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< address_information_type > r (
        address_information_traits::create (i, f, this));

      if (!this->address_information ())
      {
        this->address_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "translation-type" && n.namespace_ ().empty ())
    {
      this->translation_type (translation_type_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "numbering-plan" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< numbering_plan_type > r (
        numbering_plan_traits::create (i, f, this));

      this->numbering_plan (r);
      continue;
    }

    if (n.name () == "nature-of-addr-ind" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nature_of_addr_ind_type > r (
        nature_of_addr_ind_traits::create (i, f, this));

      this->nature_of_addr_ind (r);
      continue;
    }

    if (n.name () == "encoding-scheme" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< encoding_scheme_type > r (
        encoding_scheme_traits::create (i, f, this));

      this->encoding_scheme (r);
      continue;
    }
  }

  if (!translation_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "translation-type",
      "");
  }

  if (!numbering_plan_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "numbering-plan",
      "");
  }

  if (!nature_of_addr_ind_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "nature-of-addr-ind",
      "");
  }

  if (!encoding_scheme_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "encoding-scheme",
      "");
  }
}

gtindicator0100_type* gtindicator0100_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new gtindicator0100_type (*this, f, c);
}

// sub_system_address_type
//

sub_system_address_type::
sub_system_address_type (const signaling_point_code_type& signaling_point_code,
                         const sub_system_number_type& sub_system_number)
: ::xml_schema::type (),
  signaling_point_code_ (signaling_point_code, ::xml_schema::flags (), this),
  sub_system_number_ (sub_system_number, ::xml_schema::flags (), this)
{
}

sub_system_address_type::
sub_system_address_type (const sub_system_address_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  signaling_point_code_ (x.signaling_point_code_, f, this),
  sub_system_number_ (x.sub_system_number_, f, this)
{
}

sub_system_address_type::
sub_system_address_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  signaling_point_code_ (f, this),
  sub_system_number_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void sub_system_address_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // signaling_point_code
    //
    if (n.name () == "signaling-point-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< signaling_point_code_type > r (
        signaling_point_code_traits::create (i, f, this));

      if (!signaling_point_code_.present ())
      {
        this->signaling_point_code (r);
        continue;
      }
    }

    break;
  }

  if (!signaling_point_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "signaling-point-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "sub-system-number" && n.namespace_ ().empty ())
    {
      this->sub_system_number (sub_system_number_traits::create (i, f, this));
      continue;
    }
  }

  if (!sub_system_number_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "sub-system-number",
      "");
  }
}

sub_system_address_type* sub_system_address_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new sub_system_address_type (*this, f, c);
}

// signaling_point_code_type
//

signaling_point_code_type::
signaling_point_code_type (const member_type& member,
                           const cluster_type& cluster,
                           const zone_type& zone)
: ::xml_schema::type (),
  member_ (member, ::xml_schema::flags (), this),
  cluster_ (cluster, ::xml_schema::flags (), this),
  zone_ (zone, ::xml_schema::flags (), this)
{
}

signaling_point_code_type::
signaling_point_code_type (const signaling_point_code_type& x,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  member_ (x.member_, f, this),
  cluster_ (x.cluster_, f, this),
  zone_ (x.zone_, f, this)
{
}

signaling_point_code_type::
signaling_point_code_type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  member_ (f, this),
  cluster_ (f, this),
  zone_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void signaling_point_code_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "member" && n.namespace_ ().empty ())
    {
      this->member (member_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "cluster" && n.namespace_ ().empty ())
    {
      this->cluster (cluster_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "zone" && n.namespace_ ().empty ())
    {
      this->zone (zone_traits::create (i, f, this));
      continue;
    }
  }

  if (!member_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "member",
      "");
  }

  if (!cluster_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "cluster",
      "");
  }

  if (!zone_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "zone",
      "");
  }
}

signaling_point_code_type* signaling_point_code_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new signaling_point_code_type (*this, f, c);
}

// unidirectional_req_event_type
//

unidirectional_req_event_type::
unidirectional_req_event_type (const destination_address_type& destination_address,
                               const originating_address_type& originating_address)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_req_event_ (::xml_schema::flags (), this),
  destination_address_ (destination_address, ::xml_schema::flags (), this),
  originating_address_ (originating_address, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this)
{
}

unidirectional_req_event_type::
unidirectional_req_event_type (const unidirectional_req_event_type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_req_event_ (x.component_req_event_, f, this),
  destination_address_ (x.destination_address_, f, this),
  originating_address_ (x.originating_address_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this)
{
}

unidirectional_req_event_type::
unidirectional_req_event_type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_req_event_ (f, this),
  destination_address_ (f, this),
  originating_address_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void unidirectional_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_req_event
    //
    if (n.name () == "component-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_req_event_type > r (
        component_req_event_traits::create (i, f, this));

      this->component_req_event ().push_back (r);
      continue;
    }

    // destination_address
    //
    if (n.name () == "destination-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< destination_address_type > r (
        destination_address_traits::create (i, f, this));

      if (!destination_address_.present ())
      {
        this->destination_address (r);
        continue;
      }
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!originating_address_.present ())
      {
        this->originating_address (r);
        continue;
      }
    }

    break;
  }

  if (!destination_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "destination-address",
      "");
  }

  if (!originating_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "originating-address",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }
  }
}

unidirectional_req_event_type* unidirectional_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new unidirectional_req_event_type (*this, f, c);
}

// reject_ind_event_type
//

reject_ind_event_type::
reject_ind_event_type (const problem_type_type& problem_type,
                       const problem_type1& problem)
: ::xml_schema::type (),
  parameters_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  last_component_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  problem_type_ (problem_type, ::xml_schema::flags (), this),
  problem_ (problem, ::xml_schema::flags (), this),
  reject_type_ (::xml_schema::flags (), this)
{
}

reject_ind_event_type::
reject_ind_event_type (const reject_ind_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  parameters_ (x.parameters_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  last_component_ (x.last_component_, f, this),
  link_id_ (x.link_id_, f, this),
  problem_type_ (x.problem_type_, f, this),
  problem_ (x.problem_, f, this),
  reject_type_ (x.reject_type_, f, this)
{
}

reject_ind_event_type::
reject_ind_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameters_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  last_component_ (f, this),
  link_id_ (f, this),
  problem_type_ (f, this),
  problem_ (f, this),
  reject_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void reject_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-component" && n.namespace_ ().empty ())
    {
      this->last_component (last_component_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "problem-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type_type > r (
        problem_type_traits::create (i, f, this));

      this->problem_type (r);
      continue;
    }

    if (n.name () == "problem" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< problem_type1 > r (
        problem_traits::create (i, f, this));

      this->problem (r);
      continue;
    }

    if (n.name () == "reject-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reject_type_type > r (
        reject_type_traits::create (i, f, this));

      this->reject_type (r);
      continue;
    }
  }

  if (!problem_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "problem-type",
      "");
  }

  if (!problem_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "problem",
      "");
  }
}

reject_ind_event_type* reject_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new reject_ind_event_type (*this, f, c);
}

// local_cancel_ind_event_type
//

local_cancel_ind_event_type::
local_cancel_ind_event_type ()
: ::xml_schema::type (),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  last_component_ (::xml_schema::flags (), this)
{
}

local_cancel_ind_event_type::
local_cancel_ind_event_type (const local_cancel_ind_event_type& x,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  last_component_ (x.last_component_, f, this)
{
}

local_cancel_ind_event_type::
local_cancel_ind_event_type (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  last_component_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void local_cancel_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-component" && n.namespace_ ().empty ())
    {
      this->last_component (last_component_traits::create (i, f, this));
      continue;
    }
  }
}

local_cancel_ind_event_type* local_cancel_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new local_cancel_ind_event_type (*this, f, c);
}

// gtindicator0011_type
//

gtindicator0011_type::
gtindicator0011_type (const translation_type_type& translation_type,
                      const numbering_plan_type& numbering_plan,
                      const encoding_scheme_type& encoding_scheme)
: ::xml_schema::type (),
  address_information_ (::xml_schema::flags (), this),
  translation_type_ (translation_type, ::xml_schema::flags (), this),
  numbering_plan_ (numbering_plan, ::xml_schema::flags (), this),
  encoding_scheme_ (encoding_scheme, ::xml_schema::flags (), this)
{
}

gtindicator0011_type::
gtindicator0011_type (const gtindicator0011_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  address_information_ (x.address_information_, f, this),
  translation_type_ (x.translation_type_, f, this),
  numbering_plan_ (x.numbering_plan_, f, this),
  encoding_scheme_ (x.encoding_scheme_, f, this)
{
}

gtindicator0011_type::
gtindicator0011_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  address_information_ (f, this),
  translation_type_ (f, this),
  numbering_plan_ (f, this),
  encoding_scheme_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void gtindicator0011_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // address_information
    //
    if (n.name () == "address-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< address_information_type > r (
        address_information_traits::create (i, f, this));

      if (!this->address_information ())
      {
        this->address_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "translation-type" && n.namespace_ ().empty ())
    {
      this->translation_type (translation_type_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "numbering-plan" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< numbering_plan_type > r (
        numbering_plan_traits::create (i, f, this));

      this->numbering_plan (r);
      continue;
    }

    if (n.name () == "encoding-scheme" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< encoding_scheme_type > r (
        encoding_scheme_traits::create (i, f, this));

      this->encoding_scheme (r);
      continue;
    }
  }

  if (!translation_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "translation-type",
      "");
  }

  if (!numbering_plan_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "numbering-plan",
      "");
  }

  if (!encoding_scheme_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "encoding-scheme",
      "");
  }
}

gtindicator0011_type* gtindicator0011_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new gtindicator0011_type (*this, f, c);
}

// continue_req_event_type
//

continue_req_event_type::
continue_req_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_req_event_ (::xml_schema::flags (), this),
  originating_address_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  allowed_permission_ (::xml_schema::flags (), this)
{
}

continue_req_event_type::
continue_req_event_type (const continue_req_event_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_req_event_ (x.component_req_event_, f, this),
  originating_address_ (x.originating_address_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  allowed_permission_ (x.allowed_permission_, f, this)
{
}

continue_req_event_type::
continue_req_event_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_req_event_ (f, this),
  originating_address_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  allowed_permission_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void continue_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_req_event
    //
    if (n.name () == "component-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_req_event_type > r (
        component_req_event_traits::create (i, f, this));

      this->component_req_event ().push_back (r);
      continue;
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!this->originating_address ())
      {
        this->originating_address (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowed-permission" && n.namespace_ ().empty ())
    {
      this->allowed_permission (allowed_permission_traits::create (i, f, this));
      continue;
    }
  }
}

continue_req_event_type* continue_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new continue_req_event_type (*this, f, c);
}

// nstate_req_event_type
//

nstate_req_event_type::
nstate_req_event_type (const affected_user_type& affected_user,
                       const user_status_type& user_status)
: ::xml_schema::type (),
  affected_user_ (affected_user, ::xml_schema::flags (), this),
  user_status_ (user_status, ::xml_schema::flags (), this)
{
}

nstate_req_event_type::
nstate_req_event_type (const nstate_req_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  affected_user_ (x.affected_user_, f, this),
  user_status_ (x.user_status_, f, this)
{
}

nstate_req_event_type::
nstate_req_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  affected_user_ (f, this),
  user_status_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void nstate_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // affected_user
    //
    if (n.name () == "affected-user" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< affected_user_type > r (
        affected_user_traits::create (i, f, this));

      if (!affected_user_.present ())
      {
        this->affected_user (r);
        continue;
      }
    }

    break;
  }

  if (!affected_user_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "affected-user",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "user-status" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_status_type > r (
        user_status_traits::create (i, f, this));

      this->user_status (r);
      continue;
    }
  }

  if (!user_status_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "user-status",
      "");
  }
}

nstate_req_event_type* nstate_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new nstate_req_event_type (*this, f, c);
}

// unidirectional_ind_event_type
//

unidirectional_ind_event_type::
unidirectional_ind_event_type (const destination_address_type& destination_address,
                               const originating_address_type& originating_address)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  destination_address_ (destination_address, ::xml_schema::flags (), this),
  originating_address_ (originating_address, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this)
{
}

unidirectional_ind_event_type::
unidirectional_ind_event_type (const unidirectional_ind_event_type& x,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  destination_address_ (x.destination_address_, f, this),
  originating_address_ (x.originating_address_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this)
{
}

unidirectional_ind_event_type::
unidirectional_ind_event_type (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  destination_address_ (f, this),
  originating_address_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void unidirectional_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    // destination_address
    //
    if (n.name () == "destination-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< destination_address_type > r (
        destination_address_traits::create (i, f, this));

      if (!destination_address_.present ())
      {
        this->destination_address (r);
        continue;
      }
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!originating_address_.present ())
      {
        this->originating_address (r);
        continue;
      }
    }

    break;
  }

  if (!destination_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "destination-address",
      "");
  }

  if (!originating_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "originating-address",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }
  }
}

unidirectional_ind_event_type* unidirectional_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new unidirectional_ind_event_type (*this, f, c);
}

// continue_ind_event_type
//

continue_ind_event_type::
continue_ind_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  allowed_permission_ (::xml_schema::flags (), this)
{
}

continue_ind_event_type::
continue_ind_event_type (const continue_ind_event_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  allowed_permission_ (x.allowed_permission_, f, this)
{
}

continue_ind_event_type::
continue_ind_event_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  allowed_permission_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void continue_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowed-permission" && n.namespace_ ().empty ())
    {
      this->allowed_permission (allowed_permission_traits::create (i, f, this));
      continue;
    }
  }
}

continue_ind_event_type* continue_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new continue_ind_event_type (*this, f, c);
}

// gtindicator0010_type
//

gtindicator0010_type::
gtindicator0010_type (const translation_type_type& translation_type)
: ::xml_schema::type (),
  address_information_ (::xml_schema::flags (), this),
  translation_type_ (translation_type, ::xml_schema::flags (), this)
{
}

gtindicator0010_type::
gtindicator0010_type (const gtindicator0010_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  address_information_ (x.address_information_, f, this),
  translation_type_ (x.translation_type_, f, this)
{
}

gtindicator0010_type::
gtindicator0010_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  address_information_ (f, this),
  translation_type_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void gtindicator0010_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // address_information
    //
    if (n.name () == "address-information" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< address_information_type > r (
        address_information_traits::create (i, f, this));

      if (!this->address_information ())
      {
        this->address_information (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "translation-type" && n.namespace_ ().empty ())
    {
      this->translation_type (translation_type_traits::create (i, f, this));
      continue;
    }
  }

  if (!translation_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "translation-type",
      "");
  }
}

gtindicator0010_type* gtindicator0010_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new gtindicator0010_type (*this, f, c);
}

// npcstate_ind_event_type
//

npcstate_ind_event_type::
npcstate_ind_event_type (const affected_dpc_type& affected_dpc,
                         const own_point_code_type& own_point_code,
                         const signaling_point_status_type& signaling_point_status)
: ::xml_schema::type (),
  affected_dpc_ (affected_dpc, ::xml_schema::flags (), this),
  own_point_code_ (own_point_code, ::xml_schema::flags (), this),
  signaling_point_status_ (signaling_point_status, ::xml_schema::flags (), this)
{
}

npcstate_ind_event_type::
npcstate_ind_event_type (const npcstate_ind_event_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  affected_dpc_ (x.affected_dpc_, f, this),
  own_point_code_ (x.own_point_code_, f, this),
  signaling_point_status_ (x.signaling_point_status_, f, this)
{
}

npcstate_ind_event_type::
npcstate_ind_event_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  affected_dpc_ (f, this),
  own_point_code_ (f, this),
  signaling_point_status_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void npcstate_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // affected_dpc
    //
    if (n.name () == "affected-dpc" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< affected_dpc_type > r (
        affected_dpc_traits::create (i, f, this));

      if (!affected_dpc_.present ())
      {
        this->affected_dpc (r);
        continue;
      }
    }

    // own_point_code
    //
    if (n.name () == "own-point-code" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< own_point_code_type > r (
        own_point_code_traits::create (i, f, this));

      if (!own_point_code_.present ())
      {
        this->own_point_code (r);
        continue;
      }
    }

    break;
  }

  if (!affected_dpc_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "affected-dpc",
      "");
  }

  if (!own_point_code_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "own-point-code",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "signaling-point-status" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< signaling_point_status_type > r (
        signaling_point_status_traits::create (i, f, this));

      this->signaling_point_status (r);
      continue;
    }
  }

  if (!signaling_point_status_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "signaling-point-status",
      "");
  }
}

npcstate_ind_event_type* npcstate_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new npcstate_ind_event_type (*this, f, c);
}

// begin_req_event_type
//

begin_req_event_type::
begin_req_event_type (const destination_address_type& destination_address,
                      const originating_address_type& originating_address)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_req_event_ (::xml_schema::flags (), this),
  destination_address_ (destination_address, ::xml_schema::flags (), this),
  originating_address_ (originating_address, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  allowed_permission_ (::xml_schema::flags (), this)
{
}

begin_req_event_type::
begin_req_event_type (const begin_req_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_req_event_ (x.component_req_event_, f, this),
  destination_address_ (x.destination_address_, f, this),
  originating_address_ (x.originating_address_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  allowed_permission_ (x.allowed_permission_, f, this)
{
}

begin_req_event_type::
begin_req_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_req_event_ (f, this),
  destination_address_ (f, this),
  originating_address_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  allowed_permission_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void begin_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_req_event
    //
    if (n.name () == "component-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_req_event_type > r (
        component_req_event_traits::create (i, f, this));

      this->component_req_event ().push_back (r);
      continue;
    }

    // destination_address
    //
    if (n.name () == "destination-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< destination_address_type > r (
        destination_address_traits::create (i, f, this));

      if (!destination_address_.present ())
      {
        this->destination_address (r);
        continue;
      }
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!originating_address_.present ())
      {
        this->originating_address (r);
        continue;
      }
    }

    break;
  }

  if (!destination_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "destination-address",
      "");
  }

  if (!originating_address_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "originating-address",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "allowed-permission" && n.namespace_ ().empty ())
    {
      this->allowed_permission (allowed_permission_traits::create (i, f, this));
      continue;
    }
  }
}

begin_req_event_type* begin_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new begin_req_event_type (*this, f, c);
}

// notice_ind_event_type
//

notice_ind_event_type::
notice_ind_event_type (const report_cause_type& report_cause)
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_ind_event_ (::xml_schema::flags (), this),
  destination_address_ (::xml_schema::flags (), this),
  originating_address_ (::xml_schema::flags (), this),
  report_cause_ (report_cause, ::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this)
{
}

notice_ind_event_type::
notice_ind_event_type (const notice_ind_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_ind_event_ (x.component_ind_event_, f, this),
  destination_address_ (x.destination_address_, f, this),
  originating_address_ (x.originating_address_, f, this),
  report_cause_ (x.report_cause_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this)
{
}

notice_ind_event_type::
notice_ind_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_ind_event_ (f, this),
  destination_address_ (f, this),
  originating_address_ (f, this),
  report_cause_ (f, this),
  dialogue_id_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void notice_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_ind_event
    //
    if (n.name () == "component-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_ind_event_type > r (
        component_ind_event_traits::create (i, f, this));

      this->component_ind_event ().push_back (r);
      continue;
    }

    // destination_address
    //
    if (n.name () == "destination-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< destination_address_type > r (
        destination_address_traits::create (i, f, this));

      if (!this->destination_address ())
      {
        this->destination_address (r);
        continue;
      }
    }

    // originating_address
    //
    if (n.name () == "originating-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< originating_address_type > r (
        originating_address_traits::create (i, f, this));

      if (!this->originating_address ())
      {
        this->originating_address (r);
        continue;
      }
    }

    // report_cause
    //
    if (n.name () == "report-cause" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< report_cause_type > r (
        report_cause_traits::create (i, f, this));

      if (!report_cause_.present ())
      {
        this->report_cause (r);
        continue;
      }
    }

    break;
  }

  if (!report_cause_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "report-cause",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }
  }
}

notice_ind_event_type* notice_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new notice_ind_event_type (*this, f, c);
}

// invoke_ind_event_type
//

invoke_ind_event_type::
invoke_ind_event_type (const operation_type& operation)
: ::xml_schema::type (),
  operation_ (operation, ::xml_schema::flags (), this),
  parameters_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  last_component_ (::xml_schema::flags (), this),
  linked_id_ (::xml_schema::flags (), this),
  class_type_ (::xml_schema::flags (), this),
  last_invoke_event_ (::xml_schema::flags (), this)
{
}

invoke_ind_event_type::
invoke_ind_event_type (const invoke_ind_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  operation_ (x.operation_, f, this),
  parameters_ (x.parameters_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  last_component_ (x.last_component_, f, this),
  linked_id_ (x.linked_id_, f, this),
  class_type_ (x.class_type_, f, this),
  last_invoke_event_ (x.last_invoke_event_, f, this)
{
}

invoke_ind_event_type::
invoke_ind_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_ (f, this),
  parameters_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  last_component_ (f, this),
  linked_id_ (f, this),
  class_type_ (f, this),
  last_invoke_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void invoke_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!operation_.present ())
      {
        this->operation (r);
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    break;
  }

  if (!operation_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "operation",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-component" && n.namespace_ ().empty ())
    {
      this->last_component (last_component_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "linked-id" && n.namespace_ ().empty ())
    {
      this->linked_id (linked_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "class-type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< class_type_type > r (
        class_type_traits::create (i, f, this));

      this->class_type (r);
      continue;
    }

    if (n.name () == "last-invoke-event" && n.namespace_ ().empty ())
    {
      this->last_invoke_event (last_invoke_event_traits::create (i, f, this));
      continue;
    }
  }
}

invoke_ind_event_type* invoke_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new invoke_ind_event_type (*this, f, c);
}

// result_ind_event_type
//

result_ind_event_type::
result_ind_event_type (const last_result_event_type& last_result_event)
: ::xml_schema::type (),
  operation_ (::xml_schema::flags (), this),
  parameters_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  last_component_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  last_result_event_ (last_result_event, ::xml_schema::flags (), this)
{
}

result_ind_event_type::
result_ind_event_type (const result_ind_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  operation_ (x.operation_, f, this),
  parameters_ (x.parameters_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  last_component_ (x.last_component_, f, this),
  link_id_ (x.link_id_, f, this),
  last_result_event_ (x.last_result_event_, f, this)
{
}

result_ind_event_type::
result_ind_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_ (f, this),
  parameters_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  last_component_ (f, this),
  link_id_ (f, this),
  last_result_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void result_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!this->operation ())
      {
        this->operation (r);
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-component" && n.namespace_ ().empty ())
    {
      this->last_component (last_component_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-result-event" && n.namespace_ ().empty ())
    {
      this->last_result_event (last_result_event_traits::create (i, f, this));
      continue;
    }
  }

  if (!last_result_event_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "last-result-event",
      "");
  }
}

result_ind_event_type* result_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new result_ind_event_type (*this, f, c);
}

// end_req_event_type
//

end_req_event_type::
end_req_event_type ()
: ::xml_schema::type (),
  dialogue_portion_ (::xml_schema::flags (), this),
  component_req_event_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  quality_of_service_ (::xml_schema::flags (), this),
  termination_ (::xml_schema::flags (), this)
{
}

end_req_event_type::
end_req_event_type (const end_req_event_type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_portion_ (x.dialogue_portion_, f, this),
  component_req_event_ (x.component_req_event_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  quality_of_service_ (x.quality_of_service_, f, this),
  termination_ (x.termination_, f, this)
{
}

end_req_event_type::
end_req_event_type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_portion_ (f, this),
  component_req_event_ (f, this),
  dialogue_id_ (f, this),
  quality_of_service_ (f, this),
  termination_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void end_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_portion
    //
    if (n.name () == "dialogue-portion" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_portion_type > r (
        dialogue_portion_traits::create (i, f, this));

      if (!this->dialogue_portion ())
      {
        this->dialogue_portion (r);
        continue;
      }
    }

    // component_req_event
    //
    if (n.name () == "component-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< component_req_event_type > r (
        component_req_event_traits::create (i, f, this));

      this->component_req_event ().push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "quality-of-service" && n.namespace_ ().empty ())
    {
      this->quality_of_service (quality_of_service_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "termination" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< termination_type > r (
        termination_traits::create (i, f, this));

      this->termination (r);
      continue;
    }
  }
}

end_req_event_type* end_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new end_req_event_type (*this, f, c);
}

// result_req_event_type
//

result_req_event_type::
result_req_event_type (const last_result_event_type& last_result_event)
: ::xml_schema::type (),
  operation_ (::xml_schema::flags (), this),
  parameters_ (::xml_schema::flags (), this),
  dialogue_id_ (::xml_schema::flags (), this),
  invoke_id_ (::xml_schema::flags (), this),
  link_id_ (::xml_schema::flags (), this),
  last_result_event_ (last_result_event, ::xml_schema::flags (), this)
{
}

result_req_event_type::
result_req_event_type (const result_req_event_type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  operation_ (x.operation_, f, this),
  parameters_ (x.parameters_, f, this),
  dialogue_id_ (x.dialogue_id_, f, this),
  invoke_id_ (x.invoke_id_, f, this),
  link_id_ (x.link_id_, f, this),
  last_result_event_ (x.last_result_event_, f, this)
{
}

result_req_event_type::
result_req_event_type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  operation_ (f, this),
  parameters_ (f, this),
  dialogue_id_ (f, this),
  invoke_id_ (f, this),
  link_id_ (f, this),
  last_result_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void result_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // operation
    //
    if (n.name () == "operation" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< operation_type > r (
        operation_traits::create (i, f, this));

      if (!this->operation ())
      {
        this->operation (r);
        continue;
      }
    }

    // parameters
    //
    if (n.name () == "parameters" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameters_type > r (
        parameters_traits::create (i, f, this));

      if (!this->parameters ())
      {
        this->parameters (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "dialogue-id" && n.namespace_ ().empty ())
    {
      this->dialogue_id (dialogue_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "invoke-id" && n.namespace_ ().empty ())
    {
      this->invoke_id (invoke_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "link-id" && n.namespace_ ().empty ())
    {
      this->link_id (link_id_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "last-result-event" && n.namespace_ ().empty ())
    {
      this->last_result_event (last_result_event_traits::create (i, f, this));
      continue;
    }
  }

  if (!last_result_event_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "last-result-event",
      "");
  }
}

result_req_event_type* result_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new result_req_event_type (*this, f, c);
}

// sccp_user_address_type
//

sccp_user_address_type::
sccp_user_address_type (const routing_indicator_type& routing_indicator)
: ::xml_schema::type (),
  sub_system_address_ (::xml_schema::flags (), this),
  global_title_ (::xml_schema::flags (), this),
  routing_indicator_ (routing_indicator, ::xml_schema::flags (), this),
  national_use_ (::xml_schema::flags (), this)
{
}

sccp_user_address_type::
sccp_user_address_type (const sccp_user_address_type& x,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  sub_system_address_ (x.sub_system_address_, f, this),
  global_title_ (x.global_title_, f, this),
  routing_indicator_ (x.routing_indicator_, f, this),
  national_use_ (x.national_use_, f, this)
{
}

sccp_user_address_type::
sccp_user_address_type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  sub_system_address_ (f, this),
  global_title_ (f, this),
  routing_indicator_ (f, this),
  national_use_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void sccp_user_address_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // sub_system_address
    //
    if (n.name () == "sub-system-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< sub_system_address_type > r (
        sub_system_address_traits::create (i, f, this));

      if (!this->sub_system_address ())
      {
        this->sub_system_address (r);
        continue;
      }
    }

    // global_title
    //
    if (n.name () == "global-title" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< global_title_type > r (
        global_title_traits::create (i, f, this));

      if (!this->global_title ())
      {
        this->global_title (r);
        continue;
      }
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "routing-indicator" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< routing_indicator_type > r (
        routing_indicator_traits::create (i, f, this));

      this->routing_indicator (r);
      continue;
    }

    if (n.name () == "national-use" && n.namespace_ ().empty ())
    {
      this->national_use (national_use_traits::create (i, f, this));
      continue;
    }
  }

  if (!routing_indicator_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "routing-indicator",
      "");
  }
}

sccp_user_address_type* sccp_user_address_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new sccp_user_address_type (*this, f, c);
}

// parameters_type
//

parameters_type::
parameters_type (const parameter_type& parameter,
                 const parameter_identifier_type& parameter_identifier)
: ::xml_schema::type (),
  parameter_ (parameter, ::xml_schema::flags (), this),
  parameter_identifier_ (parameter_identifier, ::xml_schema::flags (), this)
{
}

parameters_type::
parameters_type (const parameters_type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  parameter_ (x.parameter_, f, this),
  parameter_identifier_ (x.parameter_identifier_, f, this)
{
}

parameters_type::
parameters_type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  parameter_ (f, this),
  parameter_identifier_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void parameters_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // parameter
    //
    if (n.name () == "parameter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameter_type > r (
        parameter_traits::create (i, f, this));

      if (!parameter_.present ())
      {
        this->parameter (r);
        continue;
      }
    }

    break;
  }

  if (!parameter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "parameter",
      "");
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "parameter-identifier" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< parameter_identifier_type > r (
        parameter_identifier_traits::create (i, f, this));

      this->parameter_identifier (r);
      continue;
    }
  }

  if (!parameter_identifier_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "parameter-identifier",
      "");
  }
}

parameters_type* parameters_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new parameters_type (*this, f, c);
}

// state_req_event_type
//

state_req_event_type::
state_req_event_type (const nstate_req_event_type& nstate_req_event)
: ::xml_schema::type (),
  nstate_req_event_ (nstate_req_event, ::xml_schema::flags (), this)
{
}

state_req_event_type::
state_req_event_type (const state_req_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  nstate_req_event_ (x.nstate_req_event_, f, this)
{
}

state_req_event_type::
state_req_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  nstate_req_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void state_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // nstate_req_event
    //
    if (n.name () == "nstate-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nstate_req_event_type > r (
        nstate_req_event_traits::create (i, f, this));

      if (!nstate_req_event_.present ())
      {
        this->nstate_req_event (r);
        continue;
      }
    }

    break;
  }

  if (!nstate_req_event_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "nstate-req-event",
      "");
  }
}

state_req_event_type* state_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new state_req_event_type (*this, f, c);
}

// dialogue_ind_event_type
//

dialogue_ind_event_type::
dialogue_ind_event_type ()
: ::xml_schema::type (),
  user_abort_ind_event_ (::xml_schema::flags (), this),
  end_ind_event_ (::xml_schema::flags (), this),
  provider_abort_ind_event_ (::xml_schema::flags (), this),
  begin_ind_event_ (::xml_schema::flags (), this),
  unidirectional_ind_event_ (::xml_schema::flags (), this),
  continue_ind_event_ (::xml_schema::flags (), this),
  notice_ind_event_ (::xml_schema::flags (), this)
{
}

dialogue_ind_event_type::
dialogue_ind_event_type (const dialogue_ind_event_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  user_abort_ind_event_ (x.user_abort_ind_event_, f, this),
  end_ind_event_ (x.end_ind_event_, f, this),
  provider_abort_ind_event_ (x.provider_abort_ind_event_, f, this),
  begin_ind_event_ (x.begin_ind_event_, f, this),
  unidirectional_ind_event_ (x.unidirectional_ind_event_, f, this),
  continue_ind_event_ (x.continue_ind_event_, f, this),
  notice_ind_event_ (x.notice_ind_event_, f, this)
{
}

dialogue_ind_event_type::
dialogue_ind_event_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  user_abort_ind_event_ (f, this),
  end_ind_event_ (f, this),
  provider_abort_ind_event_ (f, this),
  begin_ind_event_ (f, this),
  unidirectional_ind_event_ (f, this),
  continue_ind_event_ (f, this),
  notice_ind_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void dialogue_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // user_abort_ind_event
    //
    if (n.name () == "user-abort-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_abort_ind_event_type > r (
        user_abort_ind_event_traits::create (i, f, this));

      if (!this->user_abort_ind_event ())
      {
        this->user_abort_ind_event (r);
        continue;
      }
    }

    // end_ind_event
    //
    if (n.name () == "end-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< end_ind_event_type > r (
        end_ind_event_traits::create (i, f, this));

      if (!this->end_ind_event ())
      {
        this->end_ind_event (r);
        continue;
      }
    }

    // provider_abort_ind_event
    //
    if (n.name () == "provider-abort-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< provider_abort_ind_event_type > r (
        provider_abort_ind_event_traits::create (i, f, this));

      if (!this->provider_abort_ind_event ())
      {
        this->provider_abort_ind_event (r);
        continue;
      }
    }

    // begin_ind_event
    //
    if (n.name () == "begin-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< begin_ind_event_type > r (
        begin_ind_event_traits::create (i, f, this));

      if (!this->begin_ind_event ())
      {
        this->begin_ind_event (r);
        continue;
      }
    }

    // unidirectional_ind_event
    //
    if (n.name () == "unidirectional-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< unidirectional_ind_event_type > r (
        unidirectional_ind_event_traits::create (i, f, this));

      if (!this->unidirectional_ind_event ())
      {
        this->unidirectional_ind_event (r);
        continue;
      }
    }

    // continue_ind_event
    //
    if (n.name () == "continue-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< continue_ind_event_type > r (
        continue_ind_event_traits::create (i, f, this));

      if (!this->continue_ind_event ())
      {
        this->continue_ind_event (r);
        continue;
      }
    }

    // notice_ind_event
    //
    if (n.name () == "notice-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< notice_ind_event_type > r (
        notice_ind_event_traits::create (i, f, this));

      if (!this->notice_ind_event ())
      {
        this->notice_ind_event (r);
        continue;
      }
    }

    break;
  }
}

dialogue_ind_event_type* dialogue_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new dialogue_ind_event_type (*this, f, c);
}

// component_ind_event_type
//

component_ind_event_type::
component_ind_event_type ()
: ::xml_schema::type (),
  error_ind_event_ (::xml_schema::flags (), this),
  reject_ind_event_ (::xml_schema::flags (), this),
  local_cancel_ind_event_ (::xml_schema::flags (), this),
  invoke_ind_event_ (::xml_schema::flags (), this),
  result_ind_event_ (::xml_schema::flags (), this)
{
}

component_ind_event_type::
component_ind_event_type (const component_ind_event_type& x,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  error_ind_event_ (x.error_ind_event_, f, this),
  reject_ind_event_ (x.reject_ind_event_, f, this),
  local_cancel_ind_event_ (x.local_cancel_ind_event_, f, this),
  invoke_ind_event_ (x.invoke_ind_event_, f, this),
  result_ind_event_ (x.result_ind_event_, f, this)
{
}

component_ind_event_type::
component_ind_event_type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  error_ind_event_ (f, this),
  reject_ind_event_ (f, this),
  local_cancel_ind_event_ (f, this),
  invoke_ind_event_ (f, this),
  result_ind_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void component_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // error_ind_event
    //
    if (n.name () == "error-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_ind_event_type > r (
        error_ind_event_traits::create (i, f, this));

      if (!this->error_ind_event ())
      {
        this->error_ind_event (r);
        continue;
      }
    }

    // reject_ind_event
    //
    if (n.name () == "reject-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reject_ind_event_type > r (
        reject_ind_event_traits::create (i, f, this));

      if (!this->reject_ind_event ())
      {
        this->reject_ind_event (r);
        continue;
      }
    }

    // local_cancel_ind_event
    //
    if (n.name () == "local-cancel-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< local_cancel_ind_event_type > r (
        local_cancel_ind_event_traits::create (i, f, this));

      if (!this->local_cancel_ind_event ())
      {
        this->local_cancel_ind_event (r);
        continue;
      }
    }

    // invoke_ind_event
    //
    if (n.name () == "invoke-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< invoke_ind_event_type > r (
        invoke_ind_event_traits::create (i, f, this));

      if (!this->invoke_ind_event ())
      {
        this->invoke_ind_event (r);
        continue;
      }
    }

    // result_ind_event
    //
    if (n.name () == "result-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< result_ind_event_type > r (
        result_ind_event_traits::create (i, f, this));

      if (!this->result_ind_event ())
      {
        this->result_ind_event (r);
        continue;
      }
    }

    break;
  }
}

component_ind_event_type* component_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new component_ind_event_type (*this, f, c);
}

// state_ind_event_type
//

state_ind_event_type::
state_ind_event_type ()
: ::xml_schema::type (),
  nstate_ind_event_ (::xml_schema::flags (), this),
  npcstate_ind_event_ (::xml_schema::flags (), this)
{
}

state_ind_event_type::
state_ind_event_type (const state_ind_event_type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  nstate_ind_event_ (x.nstate_ind_event_, f, this),
  npcstate_ind_event_ (x.npcstate_ind_event_, f, this)
{
}

state_ind_event_type::
state_ind_event_type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  nstate_ind_event_ (f, this),
  npcstate_ind_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void state_ind_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // nstate_ind_event
    //
    if (n.name () == "nstate-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< nstate_ind_event_type > r (
        nstate_ind_event_traits::create (i, f, this));

      if (!this->nstate_ind_event ())
      {
        this->nstate_ind_event (r);
        continue;
      }
    }

    // npcstate_ind_event
    //
    if (n.name () == "npcstate-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< npcstate_ind_event_type > r (
        npcstate_ind_event_traits::create (i, f, this));

      if (!this->npcstate_ind_event ())
      {
        this->npcstate_ind_event (r);
        continue;
      }
    }

    break;
  }
}

state_ind_event_type* state_ind_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new state_ind_event_type (*this, f, c);
}

// dialogue_req_event_type
//

dialogue_req_event_type::
dialogue_req_event_type ()
: ::xml_schema::type (),
  user_abort_req_event_ (::xml_schema::flags (), this),
  unidirectional_req_event_ (::xml_schema::flags (), this),
  continue_req_event_ (::xml_schema::flags (), this),
  begin_req_event_ (::xml_schema::flags (), this),
  end_req_event_ (::xml_schema::flags (), this)
{
}

dialogue_req_event_type::
dialogue_req_event_type (const dialogue_req_event_type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  user_abort_req_event_ (x.user_abort_req_event_, f, this),
  unidirectional_req_event_ (x.unidirectional_req_event_, f, this),
  continue_req_event_ (x.continue_req_event_, f, this),
  begin_req_event_ (x.begin_req_event_, f, this),
  end_req_event_ (x.end_req_event_, f, this)
{
}

dialogue_req_event_type::
dialogue_req_event_type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  user_abort_req_event_ (f, this),
  unidirectional_req_event_ (f, this),
  continue_req_event_ (f, this),
  begin_req_event_ (f, this),
  end_req_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void dialogue_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // user_abort_req_event
    //
    if (n.name () == "user-abort-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_abort_req_event_type > r (
        user_abort_req_event_traits::create (i, f, this));

      if (!this->user_abort_req_event ())
      {
        this->user_abort_req_event (r);
        continue;
      }
    }

    // unidirectional_req_event
    //
    if (n.name () == "unidirectional-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< unidirectional_req_event_type > r (
        unidirectional_req_event_traits::create (i, f, this));

      if (!this->unidirectional_req_event ())
      {
        this->unidirectional_req_event (r);
        continue;
      }
    }

    // continue_req_event
    //
    if (n.name () == "continue-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< continue_req_event_type > r (
        continue_req_event_traits::create (i, f, this));

      if (!this->continue_req_event ())
      {
        this->continue_req_event (r);
        continue;
      }
    }

    // begin_req_event
    //
    if (n.name () == "begin-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< begin_req_event_type > r (
        begin_req_event_traits::create (i, f, this));

      if (!this->begin_req_event ())
      {
        this->begin_req_event (r);
        continue;
      }
    }

    // end_req_event
    //
    if (n.name () == "end-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< end_req_event_type > r (
        end_req_event_traits::create (i, f, this));

      if (!this->end_req_event ())
      {
        this->end_req_event (r);
        continue;
      }
    }

    break;
  }
}

dialogue_req_event_type* dialogue_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new dialogue_req_event_type (*this, f, c);
}

// global_title_type
//

global_title_type::
global_title_type ()
: ::xml_schema::type (),
  gtindicator0001_ (::xml_schema::flags (), this),
  gtindicator0100_ (::xml_schema::flags (), this),
  gtindicator0011_ (::xml_schema::flags (), this),
  gtindicator0010_ (::xml_schema::flags (), this)
{
}

global_title_type::
global_title_type (const global_title_type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  gtindicator0001_ (x.gtindicator0001_, f, this),
  gtindicator0100_ (x.gtindicator0100_, f, this),
  gtindicator0011_ (x.gtindicator0011_, f, this),
  gtindicator0010_ (x.gtindicator0010_, f, this)
{
}

global_title_type::
global_title_type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  gtindicator0001_ (f, this),
  gtindicator0100_ (f, this),
  gtindicator0011_ (f, this),
  gtindicator0010_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void global_title_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // gtindicator0001
    //
    if (n.name () == "gtindicator0001" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< gtindicator0001_type > r (
        gtindicator0001_traits::create (i, f, this));

      if (!this->gtindicator0001 ())
      {
        this->gtindicator0001 (r);
        continue;
      }
    }

    // gtindicator0100
    //
    if (n.name () == "gtindicator0100" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< gtindicator0100_type > r (
        gtindicator0100_traits::create (i, f, this));

      if (!this->gtindicator0100 ())
      {
        this->gtindicator0100 (r);
        continue;
      }
    }

    // gtindicator0011
    //
    if (n.name () == "gtindicator0011" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< gtindicator0011_type > r (
        gtindicator0011_traits::create (i, f, this));

      if (!this->gtindicator0011 ())
      {
        this->gtindicator0011 (r);
        continue;
      }
    }

    // gtindicator0010
    //
    if (n.name () == "gtindicator0010" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< gtindicator0010_type > r (
        gtindicator0010_traits::create (i, f, this));

      if (!this->gtindicator0010 ())
      {
        this->gtindicator0010 (r);
        continue;
      }
    }

    break;
  }
}

global_title_type* global_title_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new global_title_type (*this, f, c);
}

// component_req_event_type
//

component_req_event_type::
component_req_event_type ()
: ::xml_schema::type (),
  error_req_event_ (::xml_schema::flags (), this),
  timer_reset_req_event_ (::xml_schema::flags (), this),
  reject_req_event_ (::xml_schema::flags (), this),
  user_cancel_req_event_ (::xml_schema::flags (), this),
  invoke_req_event_ (::xml_schema::flags (), this),
  result_req_event_ (::xml_schema::flags (), this)
{
}

component_req_event_type::
component_req_event_type (const component_req_event_type& x,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  error_req_event_ (x.error_req_event_, f, this),
  timer_reset_req_event_ (x.timer_reset_req_event_, f, this),
  reject_req_event_ (x.reject_req_event_, f, this),
  user_cancel_req_event_ (x.user_cancel_req_event_, f, this),
  invoke_req_event_ (x.invoke_req_event_, f, this),
  result_req_event_ (x.result_req_event_, f, this)
{
}

component_req_event_type::
component_req_event_type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  error_req_event_ (f, this),
  timer_reset_req_event_ (f, this),
  reject_req_event_ (f, this),
  user_cancel_req_event_ (f, this),
  invoke_req_event_ (f, this),
  result_req_event_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void component_req_event_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // error_req_event
    //
    if (n.name () == "error-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< error_req_event_type > r (
        error_req_event_traits::create (i, f, this));

      if (!this->error_req_event ())
      {
        this->error_req_event (r);
        continue;
      }
    }

    // timer_reset_req_event
    //
    if (n.name () == "timer-reset-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< timer_reset_req_event_type > r (
        timer_reset_req_event_traits::create (i, f, this));

      if (!this->timer_reset_req_event ())
      {
        this->timer_reset_req_event (r);
        continue;
      }
    }

    // reject_req_event
    //
    if (n.name () == "reject-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reject_req_event_type > r (
        reject_req_event_traits::create (i, f, this));

      if (!this->reject_req_event ())
      {
        this->reject_req_event (r);
        continue;
      }
    }

    // user_cancel_req_event
    //
    if (n.name () == "user-cancel-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< user_cancel_req_event_type > r (
        user_cancel_req_event_traits::create (i, f, this));

      if (!this->user_cancel_req_event ())
      {
        this->user_cancel_req_event (r);
        continue;
      }
    }

    // invoke_req_event
    //
    if (n.name () == "invoke-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< invoke_req_event_type > r (
        invoke_req_event_traits::create (i, f, this));

      if (!this->invoke_req_event ())
      {
        this->invoke_req_event (r);
        continue;
      }
    }

    // result_req_event
    //
    if (n.name () == "result-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< result_req_event_type > r (
        result_req_event_traits::create (i, f, this));

      if (!this->result_req_event ())
      {
        this->result_req_event (r);
        continue;
      }
    }

    break;
  }
}

component_req_event_type* component_req_event_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new component_req_event_type (*this, f, c);
}

// tcap_type
//

tcap_type::
tcap_type ()
: ::xml_schema::type (),
  dialogue_req_event_ (::xml_schema::flags (), this),
  dialogue_ind_event_ (::xml_schema::flags (), this),
  state_req_event_ (::xml_schema::flags (), this),
  state_ind_event_ (::xml_schema::flags (), this),
  local_cancel_ind_event_ (::xml_schema::flags (), this),
  reject_ind_event_ (::xml_schema::flags (), this),
  configuration_ (::xml_schema::flags (), this)
{
}

tcap_type::
tcap_type (const tcap_type& x,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  dialogue_req_event_ (x.dialogue_req_event_, f, this),
  dialogue_ind_event_ (x.dialogue_ind_event_, f, this),
  state_req_event_ (x.state_req_event_, f, this),
  state_ind_event_ (x.state_ind_event_, f, this),
  local_cancel_ind_event_ (x.local_cancel_ind_event_, f, this),
  reject_ind_event_ (x.reject_ind_event_, f, this),
  configuration_ (x.configuration_, f, this)
{
}

tcap_type::
tcap_type (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  dialogue_req_event_ (f, this),
  dialogue_ind_event_ (f, this),
  state_req_event_ (f, this),
  state_ind_event_ (f, this),
  local_cancel_ind_event_ (f, this),
  reject_ind_event_ (f, this),
  configuration_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void tcap_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // dialogue_req_event
    //
    if (n.name () == "dialogue-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_req_event_type > r (
        dialogue_req_event_traits::create (i, f, this));

      if (!this->dialogue_req_event ())
      {
        this->dialogue_req_event (r);
        continue;
      }
    }

    // dialogue_ind_event
    //
    if (n.name () == "dialogue-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dialogue_ind_event_type > r (
        dialogue_ind_event_traits::create (i, f, this));

      if (!this->dialogue_ind_event ())
      {
        this->dialogue_ind_event (r);
        continue;
      }
    }

    // state_req_event
    //
    if (n.name () == "state-req-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< state_req_event_type > r (
        state_req_event_traits::create (i, f, this));

      if (!this->state_req_event ())
      {
        this->state_req_event (r);
        continue;
      }
    }

    // state_ind_event
    //
    if (n.name () == "state-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< state_ind_event_type > r (
        state_ind_event_traits::create (i, f, this));

      if (!this->state_ind_event ())
      {
        this->state_ind_event (r);
        continue;
      }
    }

    // local_cancel_ind_event
    //
    if (n.name () == "local-cancel-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< local_cancel_ind_event_type > r (
        local_cancel_ind_event_traits::create (i, f, this));

      if (!this->local_cancel_ind_event ())
      {
        this->local_cancel_ind_event (r);
        continue;
      }
    }

    // reject_ind_event
    //
    if (n.name () == "reject-ind-event" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< reject_ind_event_type > r (
        reject_ind_event_traits::create (i, f, this));

      if (!this->reject_ind_event ())
      {
        this->reject_ind_event (r);
        continue;
      }
    }

    // configuration
    //
    if (n.name () == "configuration" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< configuration_type > r (
        configuration_traits::create (i, f, this));

      if (!this->configuration ())
      {
        this->configuration (r);
        continue;
      }
    }

    break;
  }
}

tcap_type* tcap_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new tcap_type (*this, f, c);
}

// tcap_config_type
//

tcap_config_type::
tcap_config_type ()
: ::xml_schema::type (),
  local_user_address_ (::xml_schema::flags (), this)
{
}

tcap_config_type::
tcap_config_type (const tcap_config_type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::type (x, f, c),
  local_user_address_ (x.local_user_address_, f, this)
{
}

tcap_config_type::
tcap_config_type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  local_user_address_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e);
    this->parse (p, f);
  }
}

void tcap_config_type::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // local_user_address
    //
    if (n.name () == "local-user-address" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< local_user_address_type > r (
        local_user_address_traits::create (i, f, this));

      this->local_user_address ().push_back (r);
      continue;
    }

    break;
  }
}

tcap_config_type* tcap_config_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new tcap_config_type (*this, f, c);
}

// error_type
//

error_type::
error_type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_error_type_convert ();
}

error_type::
error_type (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_error_type_convert ();
}

error_type::
error_type (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_error_type_convert ();
}

error_type* error_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new error_type (*this, f, c);
}

error_type::value error_type::
_xsd_error_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_error_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_error_type_indexes_,
                    _xsd_error_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_error_type_indexes_ + 2 || _xsd_error_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const error_type::
_xsd_error_type_literals_[2] =
{
  "ERROR_LOCAL",
  "ERROR_GLOBAL"
};

const error_type::value error_type::
_xsd_error_type_indexes_[2] =
{
  ::error_type::ERROR_GLOBAL,
  ::error_type::ERROR_LOCAL
};

// numbering_plan
//

numbering_plan::
numbering_plan (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_numbering_plan_convert ();
}

numbering_plan::
numbering_plan (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_numbering_plan_convert ();
}

numbering_plan::
numbering_plan (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_numbering_plan_convert ();
}

numbering_plan* numbering_plan::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new numbering_plan (*this, f, c);
}

numbering_plan::value numbering_plan::
_xsd_numbering_plan_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_numbering_plan_literals_);
  const value* i (::std::lower_bound (
                    _xsd_numbering_plan_indexes_,
                    _xsd_numbering_plan_indexes_ + 9,
                    *this,
                    c));

  if (i == _xsd_numbering_plan_indexes_ + 9 || _xsd_numbering_plan_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const numbering_plan::
_xsd_numbering_plan_literals_[9] =
{
  "NP_UNKNOWN",
  "NP_ISDN_TEL",
  "NP_GENERIC",
  "NP_DATA",
  "NP_TELEX",
  "NP_MARITIME_MOBILE",
  "NP_LAND_MOBILE",
  "NP_ISDN_MOBILE",
  "NP_NETWORK"
};

const numbering_plan::value numbering_plan::
_xsd_numbering_plan_indexes_[9] =
{
  ::numbering_plan::NP_DATA,
  ::numbering_plan::NP_GENERIC,
  ::numbering_plan::NP_ISDN_MOBILE,
  ::numbering_plan::NP_ISDN_TEL,
  ::numbering_plan::NP_LAND_MOBILE,
  ::numbering_plan::NP_MARITIME_MOBILE,
  ::numbering_plan::NP_NETWORK,
  ::numbering_plan::NP_TELEX,
  ::numbering_plan::NP_UNKNOWN
};

// nature_of_addr_ind
//

nature_of_addr_ind::
nature_of_addr_ind (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_nature_of_addr_ind_convert ();
}

nature_of_addr_ind::
nature_of_addr_ind (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_nature_of_addr_ind_convert ();
}

nature_of_addr_ind::
nature_of_addr_ind (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_nature_of_addr_ind_convert ();
}

nature_of_addr_ind* nature_of_addr_ind::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new nature_of_addr_ind (*this, f, c);
}

nature_of_addr_ind::value nature_of_addr_ind::
_xsd_nature_of_addr_ind_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_nature_of_addr_ind_literals_);
  const value* i (::std::lower_bound (
                    _xsd_nature_of_addr_ind_indexes_,
                    _xsd_nature_of_addr_ind_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_nature_of_addr_ind_indexes_ + 5 || _xsd_nature_of_addr_ind_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const nature_of_addr_ind::
_xsd_nature_of_addr_ind_literals_[5] =
{
  "NA_UNKNOWN",
  "NA_SUBSCRIBER",
  "NA_RESERVED",
  "NA_NATIONAL_SIGNIFICANT",
  "NA_INTERNATIONAL"
};

const nature_of_addr_ind::value nature_of_addr_ind::
_xsd_nature_of_addr_ind_indexes_[5] =
{
  ::nature_of_addr_ind::NA_INTERNATIONAL,
  ::nature_of_addr_ind::NA_NATIONAL_SIGNIFICANT,
  ::nature_of_addr_ind::NA_RESERVED,
  ::nature_of_addr_ind::NA_SUBSCRIBER,
  ::nature_of_addr_ind::NA_UNKNOWN
};

// encoding_scheme
//

encoding_scheme::
encoding_scheme (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_encoding_scheme_convert ();
}

encoding_scheme::
encoding_scheme (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_encoding_scheme_convert ();
}

encoding_scheme::
encoding_scheme (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_encoding_scheme_convert ();
}

encoding_scheme* encoding_scheme::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new encoding_scheme (*this, f, c);
}

encoding_scheme::value encoding_scheme::
_xsd_encoding_scheme_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_encoding_scheme_literals_);
  const value* i (::std::lower_bound (
                    _xsd_encoding_scheme_indexes_,
                    _xsd_encoding_scheme_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_encoding_scheme_indexes_ + 4 || _xsd_encoding_scheme_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const encoding_scheme::
_xsd_encoding_scheme_literals_[4] =
{
  "ES_UNKNOWN",
  "ES_ODD",
  "ES_EVEN",
  "ES_NATIONAL_SPECIFIC"
};

const encoding_scheme::value encoding_scheme::
_xsd_encoding_scheme_indexes_[4] =
{
  ::encoding_scheme::ES_EVEN,
  ::encoding_scheme::ES_NATIONAL_SPECIFIC,
  ::encoding_scheme::ES_ODD,
  ::encoding_scheme::ES_UNKNOWN
};

// abort_reason
//

abort_reason::
abort_reason (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_abort_reason_convert ();
}

abort_reason::
abort_reason (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_abort_reason_convert ();
}

abort_reason::
abort_reason (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_abort_reason_convert ();
}

abort_reason* abort_reason::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new abort_reason (*this, f, c);
}

abort_reason::value abort_reason::
_xsd_abort_reason_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_abort_reason_literals_);
  const value* i (::std::lower_bound (
                    _xsd_abort_reason_indexes_,
                    _xsd_abort_reason_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_abort_reason_indexes_ + 2 || _xsd_abort_reason_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const abort_reason::
_xsd_abort_reason_literals_[2] =
{
  "ABORT_REASON_ACN_NOT_SUPPORTED",
  "ABORT_REASON_USER_SPECIFIC"
};

const abort_reason::value abort_reason::
_xsd_abort_reason_indexes_[2] =
{
  ::abort_reason::ABORT_REASON_ACN_NOT_SUPPORTED,
  ::abort_reason::ABORT_REASON_USER_SPECIFIC
};

// problem_type
//

problem_type::
problem_type (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_problem_type_convert ();
}

problem_type::
problem_type (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_problem_type_convert ();
}

problem_type::
problem_type (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_problem_type_convert ();
}

problem_type* problem_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new problem_type (*this, f, c);
}

problem_type::value problem_type::
_xsd_problem_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_problem_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_problem_type_indexes_,
                    _xsd_problem_type_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_problem_type_indexes_ + 5 || _xsd_problem_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const problem_type::
_xsd_problem_type_literals_[5] =
{
  "PROBLEM_TYPE_GENERAL",
  "PROBLEM_TYPE_INVOKE",
  "PROBLEM_TYPE_RETURN_RESULT",
  "PROBLEM_TYPE_RETURN_ERROR",
  "PROBLEM_TYPE_TRANSACTION"
};

const problem_type::value problem_type::
_xsd_problem_type_indexes_[5] =
{
  ::problem_type::PROBLEM_TYPE_GENERAL,
  ::problem_type::PROBLEM_TYPE_INVOKE,
  ::problem_type::PROBLEM_TYPE_RETURN_ERROR,
  ::problem_type::PROBLEM_TYPE_RETURN_RESULT,
  ::problem_type::PROBLEM_TYPE_TRANSACTION
};

// problem
//

problem::
problem (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_problem_convert ();
}

problem::
problem (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_problem_convert ();
}

problem::
problem (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_problem_convert ();
}

problem* problem::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new problem (*this, f, c);
}

problem::value problem::
_xsd_problem_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_problem_literals_);
  const value* i (::std::lower_bound (
                    _xsd_problem_indexes_,
                    _xsd_problem_indexes_ + 21,
                    *this,
                    c));

  if (i == _xsd_problem_indexes_ + 21 || _xsd_problem_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const problem::
_xsd_problem_literals_[21] =
{
  "PROBLEM_CODE_BADLY_STRUCTURED_COMPONENT",
  "PROBLEM_CODE_MISTYPED_COMPONENT",
  "PROBLEM_CODE_UNRECOGNISED_COMPONENT",
  "PROBLEM_CODE_DUPLICATE_INVOKE_ID",
  "PROBLEM_CODE_INITIATING_RELEASE",
  "PROBLEM_CODE_LINKED_RESPONSE_UNEXPECTED",
  "PROBLEM_CODE_MISTYPED_PARAMETER",
  "PROBLEM_CODE_RESOURCE_LIMITATION",
  "PROBLEM_CODE_UNEXPECTED_LINKED_OPERATION",
  "PROBLEM_CODE_UNRECOGNIZED_INVOKE_ID",
  "PROBLEM_CODE_UNRECOGNIZED_LINKED_ID",
  "PROBLEM_CODE_UNRECOGNIZED_OPERATION",
  "PROBLEM_CODE_RETURN_RESULT_UNEXPECTED",
  "PROBLEM_CODE_RETURN_ERROR_UNEXPECTED",
  "PROBLEM_CODE_UNRECOGNIZED_ERROR",
  "PROBLEM_CODE_BADLY_STRUCTURED_TRANSACTION",
  "PROBLEM_CODE_INCORRECT_TRANSACTION",
  "PROBLEM_CODE_PERMISSION_TO_RELEASE",
  "PROBLEM_CODE_RESOURCE_UNAVAILABLE",
  "PROBLEM_CODE_UNASSIGNED_RESPONDING_ID",
  "PROBLEM_CODE_UNRECOGNIZED_PACKAGE_TYPE"
};

const problem::value problem::
_xsd_problem_indexes_[21] =
{
  ::problem::PROBLEM_CODE_BADLY_STRUCTURED_COMPONENT,
  ::problem::PROBLEM_CODE_BADLY_STRUCTURED_TRANSACTION,
  ::problem::PROBLEM_CODE_DUPLICATE_INVOKE_ID,
  ::problem::PROBLEM_CODE_INCORRECT_TRANSACTION,
  ::problem::PROBLEM_CODE_INITIATING_RELEASE,
  ::problem::PROBLEM_CODE_LINKED_RESPONSE_UNEXPECTED,
  ::problem::PROBLEM_CODE_MISTYPED_COMPONENT,
  ::problem::PROBLEM_CODE_MISTYPED_PARAMETER,
  ::problem::PROBLEM_CODE_PERMISSION_TO_RELEASE,
  ::problem::PROBLEM_CODE_RESOURCE_LIMITATION,
  ::problem::PROBLEM_CODE_RESOURCE_UNAVAILABLE,
  ::problem::PROBLEM_CODE_RETURN_ERROR_UNEXPECTED,
  ::problem::PROBLEM_CODE_RETURN_RESULT_UNEXPECTED,
  ::problem::PROBLEM_CODE_UNASSIGNED_RESPONDING_ID,
  ::problem::PROBLEM_CODE_UNEXPECTED_LINKED_OPERATION,
  ::problem::PROBLEM_CODE_UNRECOGNISED_COMPONENT,
  ::problem::PROBLEM_CODE_UNRECOGNIZED_ERROR,
  ::problem::PROBLEM_CODE_UNRECOGNIZED_INVOKE_ID,
  ::problem::PROBLEM_CODE_UNRECOGNIZED_LINKED_ID,
  ::problem::PROBLEM_CODE_UNRECOGNIZED_OPERATION,
  ::problem::PROBLEM_CODE_UNRECOGNIZED_PACKAGE_TYPE
};

// reject_type
//

reject_type::
reject_type (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_reject_type_convert ();
}

reject_type::
reject_type (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_reject_type_convert ();
}

reject_type::
reject_type (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_reject_type_convert ();
}

reject_type* reject_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new reject_type (*this, f, c);
}

reject_type::value reject_type::
_xsd_reject_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_reject_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_reject_type_indexes_,
                    _xsd_reject_type_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_reject_type_indexes_ + 3 || _xsd_reject_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const reject_type::
_xsd_reject_type_literals_[3] =
{
  "REJECT_TYPE_USER",
  "REJECT_TYPE_REMOTE",
  "REJECT_TYPE_LOCAL"
};

const reject_type::value reject_type::
_xsd_reject_type_indexes_[3] =
{
  ::reject_type::REJECT_TYPE_LOCAL,
  ::reject_type::REJECT_TYPE_REMOTE,
  ::reject_type::REJECT_TYPE_USER
};

// operation_type
//

operation_type::
operation_type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_operation_type_convert ();
}

operation_type::
operation_type (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_operation_type_convert ();
}

operation_type::
operation_type (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_operation_type_convert ();
}

operation_type* operation_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new operation_type (*this, f, c);
}

operation_type::value operation_type::
_xsd_operation_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_operation_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_operation_type_indexes_,
                    _xsd_operation_type_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_operation_type_indexes_ + 2 || _xsd_operation_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const operation_type::
_xsd_operation_type_literals_[2] =
{
  "OPERATIONTYPE_GLOBAL",
  "OPERATIONTYPE_LOCAL"
};

const operation_type::value operation_type::
_xsd_operation_type_indexes_[2] =
{
  ::operation_type::OPERATIONTYPE_GLOBAL,
  ::operation_type::OPERATIONTYPE_LOCAL
};

// error_type1
//

error_type1::
error_type1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_error_type1_convert ();
}

error_type1::
error_type1 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_error_type1_convert ();
}

error_type1::
error_type1 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_error_type1_convert ();
}

error_type1* error_type1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new error_type1 (*this, f, c);
}

error_type1::value error_type1::
_xsd_error_type1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_error_type1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_error_type1_indexes_,
                    _xsd_error_type1_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_error_type1_indexes_ + 2 || _xsd_error_type1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const error_type1::
_xsd_error_type1_literals_[2] =
{
  "ERROR_LOCAL",
  "ERROR_GLOBAL"
};

const error_type1::value error_type1::
_xsd_error_type1_indexes_[2] =
{
  ::error_type1::ERROR_GLOBAL,
  ::error_type1::ERROR_LOCAL
};

// protocol_version
//

protocol_version::
protocol_version (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_protocol_version_convert ();
}

protocol_version::
protocol_version (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_protocol_version_convert ();
}

protocol_version::
protocol_version (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_protocol_version_convert ();
}

protocol_version* protocol_version::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new protocol_version (*this, f, c);
}

protocol_version::value protocol_version::
_xsd_protocol_version_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_protocol_version_literals_);
  const value* i (::std::lower_bound (
                    _xsd_protocol_version_indexes_,
                    _xsd_protocol_version_indexes_ + 1,
                    *this,
                    c));

  if (i == _xsd_protocol_version_indexes_ + 1 || _xsd_protocol_version_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const protocol_version::
_xsd_protocol_version_literals_[1] =
{
  "DP_PROTOCOL_VERSION_ANSI_96"
};

const protocol_version::value protocol_version::
_xsd_protocol_version_indexes_[1] =
{
  ::protocol_version::DP_PROTOCOL_VERSION_ANSI_96
};

// app_context_identifier
//

app_context_identifier::
app_context_identifier (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_app_context_identifier_convert ();
}

app_context_identifier::
app_context_identifier (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_app_context_identifier_convert ();
}

app_context_identifier::
app_context_identifier (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_app_context_identifier_convert ();
}

app_context_identifier* app_context_identifier::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new app_context_identifier (*this, f, c);
}

app_context_identifier::value app_context_identifier::
_xsd_app_context_identifier_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_app_context_identifier_literals_);
  const value* i (::std::lower_bound (
                    _xsd_app_context_identifier_indexes_,
                    _xsd_app_context_identifier_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_app_context_identifier_indexes_ + 2 || _xsd_app_context_identifier_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const app_context_identifier::
_xsd_app_context_identifier_literals_[2] =
{
  "APPLICATION_CONTEXT_INTEGER",
  "APPLICATION_CONTEXT_OBJECT"
};

const app_context_identifier::value app_context_identifier::
_xsd_app_context_identifier_indexes_[2] =
{
  ::app_context_identifier::APPLICATION_CONTEXT_INTEGER,
  ::app_context_identifier::APPLICATION_CONTEXT_OBJECT
};

// security_context_identifier
//

security_context_identifier::
security_context_identifier (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_security_context_identifier_convert ();
}

security_context_identifier::
security_context_identifier (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_security_context_identifier_convert ();
}

security_context_identifier::
security_context_identifier (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_security_context_identifier_convert ();
}

security_context_identifier* security_context_identifier::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new security_context_identifier (*this, f, c);
}

security_context_identifier::value security_context_identifier::
_xsd_security_context_identifier_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_security_context_identifier_literals_);
  const value* i (::std::lower_bound (
                    _xsd_security_context_identifier_indexes_,
                    _xsd_security_context_identifier_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_security_context_identifier_indexes_ + 2 || _xsd_security_context_identifier_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const security_context_identifier::
_xsd_security_context_identifier_literals_[2] =
{
  "SECURITY_CONTEXT_INTEGER",
  "SECURITY_CONTEXT_OBJECT"
};

const security_context_identifier::value security_context_identifier::
_xsd_security_context_identifier_indexes_[2] =
{
  ::security_context_identifier::SECURITY_CONTEXT_INTEGER,
  ::security_context_identifier::SECURITY_CONTEXT_OBJECT
};

// user_status
//

user_status::
user_status (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_user_status_convert ();
}

user_status::
user_status (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_user_status_convert ();
}

user_status::
user_status (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_user_status_convert ();
}

user_status* user_status::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new user_status (*this, f, c);
}

user_status::value user_status::
_xsd_user_status_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_user_status_literals_);
  const value* i (::std::lower_bound (
                    _xsd_user_status_indexes_,
                    _xsd_user_status_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_user_status_indexes_ + 2 || _xsd_user_status_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const user_status::
_xsd_user_status_literals_[2] =
{
  "USER_OUT_OF_SERVICE",
  "USER_IN_SERVICE"
};

const user_status::value user_status::
_xsd_user_status_indexes_[2] =
{
  ::user_status::USER_IN_SERVICE,
  ::user_status::USER_OUT_OF_SERVICE
};

// p_abort
//

p_abort::
p_abort (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_p_abort_convert ();
}

p_abort::
p_abort (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_p_abort_convert ();
}

p_abort::
p_abort (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_p_abort_convert ();
}

p_abort* p_abort::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new p_abort (*this, f, c);
}

p_abort::value p_abort::
_xsd_p_abort_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_p_abort_literals_);
  const value* i (::std::lower_bound (
                    _xsd_p_abort_indexes_,
                    _xsd_p_abort_indexes_ + 11,
                    *this,
                    c));

  if (i == _xsd_p_abort_indexes_ + 11 || _xsd_p_abort_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const p_abort::
_xsd_p_abort_literals_[11] =
{
  "P_ABORT_UNRCGNZ_MSG_TYPE",
  "P_ABORT_UNRECOGNIZED_TRANSACTION_ID",
  "P_ABORT_BADLY_FORMATTED_TRANSACTION_PORTION",
  "P_ABORT_INCORRECT_TRANSACTION_PORTION",
  "P_ABORT_RESOURCE_LIMIT",
  "P_ABORT_ABNORMAL_DIALOGUE",
  "P_ABORT_UNRECOG_DIALOGUE_PORTION_ID",
  "P_ABORT_BADLY_STRUCTURED_DIALOGUE_PORTION",
  "P_ABORT_MISSING_DIALOGUE_PORTION",
  "P_ABORT_INCONSISTENT_DIALOGUE_PORTION",
  "P_ABORT_PERMISSION_TO_RELEASE_PROBLEM"
};

const p_abort::value p_abort::
_xsd_p_abort_indexes_[11] =
{
  ::p_abort::P_ABORT_ABNORMAL_DIALOGUE,
  ::p_abort::P_ABORT_BADLY_FORMATTED_TRANSACTION_PORTION,
  ::p_abort::P_ABORT_BADLY_STRUCTURED_DIALOGUE_PORTION,
  ::p_abort::P_ABORT_INCONSISTENT_DIALOGUE_PORTION,
  ::p_abort::P_ABORT_INCORRECT_TRANSACTION_PORTION,
  ::p_abort::P_ABORT_MISSING_DIALOGUE_PORTION,
  ::p_abort::P_ABORT_PERMISSION_TO_RELEASE_PROBLEM,
  ::p_abort::P_ABORT_RESOURCE_LIMIT,
  ::p_abort::P_ABORT_UNRCGNZ_MSG_TYPE,
  ::p_abort::P_ABORT_UNRECOGNIZED_TRANSACTION_ID,
  ::p_abort::P_ABORT_UNRECOG_DIALOGUE_PORTION_ID
};

// abort_reason1
//

abort_reason1::
abort_reason1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_abort_reason1_convert ();
}

abort_reason1::
abort_reason1 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_abort_reason1_convert ();
}

abort_reason1::
abort_reason1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_abort_reason1_convert ();
}

abort_reason1* abort_reason1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new abort_reason1 (*this, f, c);
}

abort_reason1::value abort_reason1::
_xsd_abort_reason1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_abort_reason1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_abort_reason1_indexes_,
                    _xsd_abort_reason1_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_abort_reason1_indexes_ + 2 || _xsd_abort_reason1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const abort_reason1::
_xsd_abort_reason1_literals_[2] =
{
  "ABORT_REASON_ACN_NOT_SUPPORTED",
  "ABORT_REASON_USER_SPECIFIC"
};

const abort_reason1::value abort_reason1::
_xsd_abort_reason1_indexes_[2] =
{
  ::abort_reason1::ABORT_REASON_ACN_NOT_SUPPORTED,
  ::abort_reason1::ABORT_REASON_USER_SPECIFIC
};

// class_type
//

class_type::
class_type (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_class_type_convert ();
}

class_type::
class_type (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_class_type_convert ();
}

class_type::
class_type (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f,
            ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_class_type_convert ();
}

class_type* class_type::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new class_type (*this, f, c);
}

class_type::value class_type::
_xsd_class_type_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_class_type_literals_);
  const value* i (::std::lower_bound (
                    _xsd_class_type_indexes_,
                    _xsd_class_type_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_class_type_indexes_ + 4 || _xsd_class_type_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const class_type::
_xsd_class_type_literals_[4] =
{
  "CLASS_1",
  "CLASS_2",
  "CLASS_3",
  "CLASS_4"
};

const class_type::value class_type::
_xsd_class_type_indexes_[4] =
{
  ::class_type::CLASS_1,
  ::class_type::CLASS_2,
  ::class_type::CLASS_3,
  ::class_type::CLASS_4
};

// numbering_plan1
//

numbering_plan1::
numbering_plan1 (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_numbering_plan1_convert ();
}

numbering_plan1::
numbering_plan1 (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_numbering_plan1_convert ();
}

numbering_plan1::
numbering_plan1 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_numbering_plan1_convert ();
}

numbering_plan1* numbering_plan1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new numbering_plan1 (*this, f, c);
}

numbering_plan1::value numbering_plan1::
_xsd_numbering_plan1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_numbering_plan1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_numbering_plan1_indexes_,
                    _xsd_numbering_plan1_indexes_ + 9,
                    *this,
                    c));

  if (i == _xsd_numbering_plan1_indexes_ + 9 || _xsd_numbering_plan1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const numbering_plan1::
_xsd_numbering_plan1_literals_[9] =
{
  "NP_UNKNOWN",
  "NP_ISDN_TEL",
  "NP_GENERIC",
  "NP_DATA",
  "NP_TELEX",
  "NP_MARITIME_MOBILE",
  "NP_LAND_MOBILE",
  "NP_ISDN_MOBILE",
  "NP_NETWORK"
};

const numbering_plan1::value numbering_plan1::
_xsd_numbering_plan1_indexes_[9] =
{
  ::numbering_plan1::NP_DATA,
  ::numbering_plan1::NP_GENERIC,
  ::numbering_plan1::NP_ISDN_MOBILE,
  ::numbering_plan1::NP_ISDN_TEL,
  ::numbering_plan1::NP_LAND_MOBILE,
  ::numbering_plan1::NP_MARITIME_MOBILE,
  ::numbering_plan1::NP_NETWORK,
  ::numbering_plan1::NP_TELEX,
  ::numbering_plan1::NP_UNKNOWN
};

// nature_of_addr_ind1
//

nature_of_addr_ind1::
nature_of_addr_ind1 (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_nature_of_addr_ind1_convert ();
}

nature_of_addr_ind1::
nature_of_addr_ind1 (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_nature_of_addr_ind1_convert ();
}

nature_of_addr_ind1::
nature_of_addr_ind1 (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_nature_of_addr_ind1_convert ();
}

nature_of_addr_ind1* nature_of_addr_ind1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new nature_of_addr_ind1 (*this, f, c);
}

nature_of_addr_ind1::value nature_of_addr_ind1::
_xsd_nature_of_addr_ind1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_nature_of_addr_ind1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_nature_of_addr_ind1_indexes_,
                    _xsd_nature_of_addr_ind1_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_nature_of_addr_ind1_indexes_ + 5 || _xsd_nature_of_addr_ind1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const nature_of_addr_ind1::
_xsd_nature_of_addr_ind1_literals_[5] =
{
  "NA_UNKNOWN",
  "NA_SUBSCRIBER",
  "NA_RESERVED",
  "NA_NATIONAL_SIGNIFICANT",
  "NA_INTERNATIONAL"
};

const nature_of_addr_ind1::value nature_of_addr_ind1::
_xsd_nature_of_addr_ind1_indexes_[5] =
{
  ::nature_of_addr_ind1::NA_INTERNATIONAL,
  ::nature_of_addr_ind1::NA_NATIONAL_SIGNIFICANT,
  ::nature_of_addr_ind1::NA_RESERVED,
  ::nature_of_addr_ind1::NA_SUBSCRIBER,
  ::nature_of_addr_ind1::NA_UNKNOWN
};

// encoding_scheme1
//

encoding_scheme1::
encoding_scheme1 (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_encoding_scheme1_convert ();
}

encoding_scheme1::
encoding_scheme1 (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_encoding_scheme1_convert ();
}

encoding_scheme1::
encoding_scheme1 (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_encoding_scheme1_convert ();
}

encoding_scheme1* encoding_scheme1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new encoding_scheme1 (*this, f, c);
}

encoding_scheme1::value encoding_scheme1::
_xsd_encoding_scheme1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_encoding_scheme1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_encoding_scheme1_indexes_,
                    _xsd_encoding_scheme1_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_encoding_scheme1_indexes_ + 4 || _xsd_encoding_scheme1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const encoding_scheme1::
_xsd_encoding_scheme1_literals_[4] =
{
  "ES_UNKNOWN",
  "ES_ODD",
  "ES_EVEN",
  "ES_NATIONAL_SPECIFIC"
};

const encoding_scheme1::value encoding_scheme1::
_xsd_encoding_scheme1_indexes_[4] =
{
  ::encoding_scheme1::ES_EVEN,
  ::encoding_scheme1::ES_NATIONAL_SPECIFIC,
  ::encoding_scheme1::ES_ODD,
  ::encoding_scheme1::ES_UNKNOWN
};

// problem_type1
//

problem_type1::
problem_type1 (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_problem_type1_convert ();
}

problem_type1::
problem_type1 (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_problem_type1_convert ();
}

problem_type1::
problem_type1 (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_problem_type1_convert ();
}

problem_type1* problem_type1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new problem_type1 (*this, f, c);
}

problem_type1::value problem_type1::
_xsd_problem_type1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_problem_type1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_problem_type1_indexes_,
                    _xsd_problem_type1_indexes_ + 5,
                    *this,
                    c));

  if (i == _xsd_problem_type1_indexes_ + 5 || _xsd_problem_type1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const problem_type1::
_xsd_problem_type1_literals_[5] =
{
  "PROBLEM_TYPE_GENERAL",
  "PROBLEM_TYPE_INVOKE",
  "PROBLEM_TYPE_RETURN_RESULT",
  "PROBLEM_TYPE_RETURN_ERROR",
  "PROBLEM_TYPE_TRANSACTION"
};

const problem_type1::value problem_type1::
_xsd_problem_type1_indexes_[5] =
{
  ::problem_type1::PROBLEM_TYPE_GENERAL,
  ::problem_type1::PROBLEM_TYPE_INVOKE,
  ::problem_type1::PROBLEM_TYPE_RETURN_ERROR,
  ::problem_type1::PROBLEM_TYPE_RETURN_RESULT,
  ::problem_type1::PROBLEM_TYPE_TRANSACTION
};

// problem1
//

problem1::
problem1 (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_problem1_convert ();
}

problem1::
problem1 (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_problem1_convert ();
}

problem1::
problem1 (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_problem1_convert ();
}

problem1* problem1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new problem1 (*this, f, c);
}

problem1::value problem1::
_xsd_problem1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_problem1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_problem1_indexes_,
                    _xsd_problem1_indexes_ + 21,
                    *this,
                    c));

  if (i == _xsd_problem1_indexes_ + 21 || _xsd_problem1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const problem1::
_xsd_problem1_literals_[21] =
{
  "PROBLEM_CODE_BADLY_STRUCTURED_COMPONENT",
  "PROBLEM_CODE_MISTYPED_COMPONENT",
  "PROBLEM_CODE_UNRECOGNISED_COMPONENT",
  "PROBLEM_CODE_DUPLICATE_INVOKE_ID",
  "PROBLEM_CODE_INITIATING_RELEASE",
  "PROBLEM_CODE_LINKED_RESPONSE_UNEXPECTED",
  "PROBLEM_CODE_MISTYPED_PARAMETER",
  "PROBLEM_CODE_RESOURCE_LIMITATION",
  "PROBLEM_CODE_UNEXPECTED_LINKED_OPERATION",
  "PROBLEM_CODE_UNRECOGNIZED_INVOKE_ID",
  "PROBLEM_CODE_UNRECOGNIZED_LINKED_ID",
  "PROBLEM_CODE_UNRECOGNIZED_OPERATION",
  "PROBLEM_CODE_RETURN_RESULT_UNEXPECTED",
  "PROBLEM_CODE_RETURN_ERROR_UNEXPECTED",
  "PROBLEM_CODE_UNRECOGNIZED_ERROR",
  "PROBLEM_CODE_BADLY_STRUCTURED_TRANSACTION",
  "PROBLEM_CODE_INCORRECT_TRANSACTION",
  "PROBLEM_CODE_PERMISSION_TO_RELEASE",
  "PROBLEM_CODE_RESOURCE_UNAVAILABLE",
  "PROBLEM_CODE_UNASSIGNED_RESPONDING_ID",
  "PROBLEM_CODE_UNRECOGNIZED_PACKAGE_TYPE"
};

const problem1::value problem1::
_xsd_problem1_indexes_[21] =
{
  ::problem1::PROBLEM_CODE_BADLY_STRUCTURED_COMPONENT,
  ::problem1::PROBLEM_CODE_BADLY_STRUCTURED_TRANSACTION,
  ::problem1::PROBLEM_CODE_DUPLICATE_INVOKE_ID,
  ::problem1::PROBLEM_CODE_INCORRECT_TRANSACTION,
  ::problem1::PROBLEM_CODE_INITIATING_RELEASE,
  ::problem1::PROBLEM_CODE_LINKED_RESPONSE_UNEXPECTED,
  ::problem1::PROBLEM_CODE_MISTYPED_COMPONENT,
  ::problem1::PROBLEM_CODE_MISTYPED_PARAMETER,
  ::problem1::PROBLEM_CODE_PERMISSION_TO_RELEASE,
  ::problem1::PROBLEM_CODE_RESOURCE_LIMITATION,
  ::problem1::PROBLEM_CODE_RESOURCE_UNAVAILABLE,
  ::problem1::PROBLEM_CODE_RETURN_ERROR_UNEXPECTED,
  ::problem1::PROBLEM_CODE_RETURN_RESULT_UNEXPECTED,
  ::problem1::PROBLEM_CODE_UNASSIGNED_RESPONDING_ID,
  ::problem1::PROBLEM_CODE_UNEXPECTED_LINKED_OPERATION,
  ::problem1::PROBLEM_CODE_UNRECOGNISED_COMPONENT,
  ::problem1::PROBLEM_CODE_UNRECOGNIZED_ERROR,
  ::problem1::PROBLEM_CODE_UNRECOGNIZED_INVOKE_ID,
  ::problem1::PROBLEM_CODE_UNRECOGNIZED_LINKED_ID,
  ::problem1::PROBLEM_CODE_UNRECOGNIZED_OPERATION,
  ::problem1::PROBLEM_CODE_UNRECOGNIZED_PACKAGE_TYPE
};

// reject_type1
//

reject_type1::
reject_type1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_reject_type1_convert ();
}

reject_type1::
reject_type1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_reject_type1_convert ();
}

reject_type1::
reject_type1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_reject_type1_convert ();
}

reject_type1* reject_type1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new reject_type1 (*this, f, c);
}

reject_type1::value reject_type1::
_xsd_reject_type1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_reject_type1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_reject_type1_indexes_,
                    _xsd_reject_type1_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_reject_type1_indexes_ + 3 || _xsd_reject_type1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const reject_type1::
_xsd_reject_type1_literals_[3] =
{
  "REJECT_TYPE_USER",
  "REJECT_TYPE_REMOTE",
  "REJECT_TYPE_LOCAL"
};

const reject_type1::value reject_type1::
_xsd_reject_type1_indexes_[3] =
{
  ::reject_type1::REJECT_TYPE_LOCAL,
  ::reject_type1::REJECT_TYPE_REMOTE,
  ::reject_type1::REJECT_TYPE_USER
};

// numbering_plan2
//

numbering_plan2::
numbering_plan2 (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_numbering_plan2_convert ();
}

numbering_plan2::
numbering_plan2 (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_numbering_plan2_convert ();
}

numbering_plan2::
numbering_plan2 (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_numbering_plan2_convert ();
}

numbering_plan2* numbering_plan2::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new numbering_plan2 (*this, f, c);
}

numbering_plan2::value numbering_plan2::
_xsd_numbering_plan2_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_numbering_plan2_literals_);
  const value* i (::std::lower_bound (
                    _xsd_numbering_plan2_indexes_,
                    _xsd_numbering_plan2_indexes_ + 9,
                    *this,
                    c));

  if (i == _xsd_numbering_plan2_indexes_ + 9 || _xsd_numbering_plan2_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const numbering_plan2::
_xsd_numbering_plan2_literals_[9] =
{
  "NP_UNKNOWN",
  "NP_ISDN_TEL",
  "NP_GENERIC",
  "NP_DATA",
  "NP_TELEX",
  "NP_MARITIME_MOBILE",
  "NP_LAND_MOBILE",
  "NP_ISDN_MOBILE",
  "NP_NETWORK"
};

const numbering_plan2::value numbering_plan2::
_xsd_numbering_plan2_indexes_[9] =
{
  ::numbering_plan2::NP_DATA,
  ::numbering_plan2::NP_GENERIC,
  ::numbering_plan2::NP_ISDN_MOBILE,
  ::numbering_plan2::NP_ISDN_TEL,
  ::numbering_plan2::NP_LAND_MOBILE,
  ::numbering_plan2::NP_MARITIME_MOBILE,
  ::numbering_plan2::NP_NETWORK,
  ::numbering_plan2::NP_TELEX,
  ::numbering_plan2::NP_UNKNOWN
};

// encoding_scheme2
//

encoding_scheme2::
encoding_scheme2 (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_encoding_scheme2_convert ();
}

encoding_scheme2::
encoding_scheme2 (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_encoding_scheme2_convert ();
}

encoding_scheme2::
encoding_scheme2 (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_encoding_scheme2_convert ();
}

encoding_scheme2* encoding_scheme2::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new encoding_scheme2 (*this, f, c);
}

encoding_scheme2::value encoding_scheme2::
_xsd_encoding_scheme2_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_encoding_scheme2_literals_);
  const value* i (::std::lower_bound (
                    _xsd_encoding_scheme2_indexes_,
                    _xsd_encoding_scheme2_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_encoding_scheme2_indexes_ + 4 || _xsd_encoding_scheme2_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const encoding_scheme2::
_xsd_encoding_scheme2_literals_[4] =
{
  "ES_UNKNOWN",
  "ES_ODD",
  "ES_EVEN",
  "ES_NATIONAL_SPECIFIC"
};

const encoding_scheme2::value encoding_scheme2::
_xsd_encoding_scheme2_indexes_[4] =
{
  ::encoding_scheme2::ES_EVEN,
  ::encoding_scheme2::ES_NATIONAL_SPECIFIC,
  ::encoding_scheme2::ES_ODD,
  ::encoding_scheme2::ES_UNKNOWN
};

// user_status1
//

user_status1::
user_status1 (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_user_status1_convert ();
}

user_status1::
user_status1 (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_user_status1_convert ();
}

user_status1::
user_status1 (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_user_status1_convert ();
}

user_status1* user_status1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new user_status1 (*this, f, c);
}

user_status1::value user_status1::
_xsd_user_status1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_user_status1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_user_status1_indexes_,
                    _xsd_user_status1_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_user_status1_indexes_ + 2 || _xsd_user_status1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const user_status1::
_xsd_user_status1_literals_[2] =
{
  "USER_OUT_OF_SERVICE",
  "USER_IN_SERVICE"
};

const user_status1::value user_status1::
_xsd_user_status1_indexes_[2] =
{
  ::user_status1::USER_IN_SERVICE,
  ::user_status1::USER_OUT_OF_SERVICE
};

// signaling_point_status
//

signaling_point_status::
signaling_point_status (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_signaling_point_status_convert ();
}

signaling_point_status::
signaling_point_status (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_signaling_point_status_convert ();
}

signaling_point_status::
signaling_point_status (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_signaling_point_status_convert ();
}

signaling_point_status* signaling_point_status::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new signaling_point_status (*this, f, c);
}

signaling_point_status::value signaling_point_status::
_xsd_signaling_point_status_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_signaling_point_status_literals_);
  const value* i (::std::lower_bound (
                    _xsd_signaling_point_status_indexes_,
                    _xsd_signaling_point_status_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_signaling_point_status_indexes_ + 4 || _xsd_signaling_point_status_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const signaling_point_status::
_xsd_signaling_point_status_literals_[4] =
{
  "DESTINATION_CONGESTED",
  "DESTINATION_CONGESTION_ABATEMENT",
  "DESTINATION_INACCESSIBLE",
  "DESTINATION_ACCESSIBLE"
};

const signaling_point_status::value signaling_point_status::
_xsd_signaling_point_status_indexes_[4] =
{
  ::signaling_point_status::DESTINATION_ACCESSIBLE,
  ::signaling_point_status::DESTINATION_CONGESTED,
  ::signaling_point_status::DESTINATION_CONGESTION_ABATEMENT,
  ::signaling_point_status::DESTINATION_INACCESSIBLE
};

// class_type1
//

class_type1::
class_type1 (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_class_type1_convert ();
}

class_type1::
class_type1 (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_class_type1_convert ();
}

class_type1::
class_type1 (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_class_type1_convert ();
}

class_type1* class_type1::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new class_type1 (*this, f, c);
}

class_type1::value class_type1::
_xsd_class_type1_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_class_type1_literals_);
  const value* i (::std::lower_bound (
                    _xsd_class_type1_indexes_,
                    _xsd_class_type1_indexes_ + 4,
                    *this,
                    c));

  if (i == _xsd_class_type1_indexes_ + 4 || _xsd_class_type1_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const class_type1::
_xsd_class_type1_literals_[4] =
{
  "CLASS_1",
  "CLASS_2",
  "CLASS_3",
  "CLASS_4"
};

const class_type1::value class_type1::
_xsd_class_type1_indexes_[4] =
{
  ::class_type1::CLASS_1,
  ::class_type1::CLASS_2,
  ::class_type1::CLASS_3,
  ::class_type1::CLASS_4
};

// termination
//

termination::
termination (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_termination_convert ();
}

termination::
termination (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_termination_convert ();
}

termination::
termination (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_termination_convert ();
}

termination* termination::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new termination (*this, f, c);
}

termination::value termination::
_xsd_termination_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_termination_literals_);
  const value* i (::std::lower_bound (
                    _xsd_termination_indexes_,
                    _xsd_termination_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_termination_indexes_ + 2 || _xsd_termination_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const termination::
_xsd_termination_literals_[2] =
{
  "TC_BASIC_END",
  "TC_PRE_ARRANGED_END"
};

const termination::value termination::
_xsd_termination_indexes_[2] =
{
  ::termination::TC_BASIC_END,
  ::termination::TC_PRE_ARRANGED_END
};

// routing_indicator
//

routing_indicator::
routing_indicator (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_routing_indicator_convert ();
}

routing_indicator::
routing_indicator (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_routing_indicator_convert ();
}

routing_indicator::
routing_indicator (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_routing_indicator_convert ();
}

routing_indicator* routing_indicator::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new routing_indicator (*this, f, c);
}

routing_indicator::value routing_indicator::
_xsd_routing_indicator_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_routing_indicator_literals_);
  const value* i (::std::lower_bound (
                    _xsd_routing_indicator_indexes_,
                    _xsd_routing_indicator_indexes_ + 2,
                    *this,
                    c));

  if (i == _xsd_routing_indicator_indexes_ + 2 || _xsd_routing_indicator_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const routing_indicator::
_xsd_routing_indicator_literals_[2] =
{
  "ROUTING_SUBSYSTEM",
  "ROUTING_GLOBALTITLE"
};

const routing_indicator::value routing_indicator::
_xsd_routing_indicator_indexes_[2] =
{
  ::routing_indicator::ROUTING_GLOBALTITLE,
  ::routing_indicator::ROUTING_SUBSYSTEM
};

// parameter_identifier
//

parameter_identifier::
parameter_identifier (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::nmtoken (e, f, c)
{
  _xsd_parameter_identifier_convert ();
}

parameter_identifier::
parameter_identifier (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::nmtoken (a, f, c)
{
  _xsd_parameter_identifier_convert ();
}

parameter_identifier::
parameter_identifier (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::type* c)
: ::xml_schema::nmtoken (s, e, f, c)
{
  _xsd_parameter_identifier_convert ();
}

parameter_identifier* parameter_identifier::
_clone (::xml_schema::flags f,
        ::xml_schema::type* c) const
{
  return new parameter_identifier (*this, f, c);
}

parameter_identifier::value parameter_identifier::
_xsd_parameter_identifier_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_parameter_identifier_literals_);
  const value* i (::std::lower_bound (
                    _xsd_parameter_identifier_indexes_,
                    _xsd_parameter_identifier_indexes_ + 3,
                    *this,
                    c));

  if (i == _xsd_parameter_identifier_indexes_ + 3 || _xsd_parameter_identifier_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const parameter_identifier::
_xsd_parameter_identifier_literals_[3] =
{
  "PARAMETERTYPE_SINGLE",
  "PARAMETERTYPE_SEQUENCE",
  "PARAMETERTYPE_SET"
};

const parameter_identifier::value parameter_identifier::
_xsd_parameter_identifier_indexes_[3] =
{
  ::parameter_identifier::PARAMETERTYPE_SEQUENCE,
  ::parameter_identifier::PARAMETERTYPE_SET,
  ::parameter_identifier::PARAMETERTYPE_SINGLE
};

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::tcap_type >
tcap (const ::std::string& u,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (const ::std::string& u,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (const ::std::string& u,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, h, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, h, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      const ::std::string& sid,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, h, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (::std::istream& is,
      const ::std::string& sid,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  ::xercesc::Wrapper4InputSource wrap (&isrc, false);
  return ::tcap (wrap, h, f, p);
}

::std::auto_ptr< ::tcap_type >
tcap (const ::xercesc::DOMInputSource& i,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (const ::xercesc::DOMInputSource& i,
      ::xml_schema::error_handler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (const ::xercesc::DOMInputSource& i,
      ::xercesc::DOMErrorHandler& h,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

  if (!d)
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::tcap_type > r (
    ::tcap (
      d.get (), f | ::xml_schema::flags::own_dom, p));

  if (f & ::xml_schema::flags::keep_dom)
    d.release ();

  return r;
}

::std::auto_ptr< ::tcap_type >
tcap (const ::xercesc::DOMDocument& d,
      ::xml_schema::flags f,
      const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::tcap_type > r (
      ::tcap (
        c.get (), f | ::xml_schema::flags::own_dom, p));

    c.release ();
    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tcap" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tcap_type > r (
      ::xsd::cxx::tree::traits< ::tcap_type, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tcap",
    "");
}

::std::auto_ptr< ::tcap_type >
tcap (::xercesc::DOMDocument* d,
      ::xml_schema::flags f,
      const ::xml_schema::properties&)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  const ::xercesc::DOMElement& e (
    c.get ()
    ? *c->getDocumentElement ()
    : *d->getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tcap" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::tcap_type > r (
      ::xsd::cxx::tree::traits< ::tcap_type, char >::create (
        e, f, 0));
    c.release ();
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "tcap",
    "");
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

void
operator<< (::xercesc::DOMElement& e, const error_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // error_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "error-code",
        e));

    s << i.error_code ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // error_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "error-type",
        e));

    a << i.error_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const timer_reset_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const gtindicator0001_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // address_information
  //
  if (i.address_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "address-information",
        e));

    s << *i.address_information ();
  }

  // translation_type
  //
  if (i.translation_type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "translation-type",
        e));

    a << *i.translation_type ();
  }

  // numbering_plan
  //
  if (i.numbering_plan ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "numbering-plan",
        e));

    a << *i.numbering_plan ();
  }

  // nature_of_addr_ind
  //
  if (i.nature_of_addr_ind ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "nature-of-addr-ind",
        e));

    a << *i.nature_of_addr_ind ();
  }

  // encoding_scheme
  //
  if (i.encoding_scheme ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "encoding-scheme",
        e));

    a << *i.encoding_scheme ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const user_abort_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (user_abort_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // user_abort_information
  //
  if (i.user_abort_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-abort-information",
        e));

    s << *i.user_abort_information ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // abort_reason
  //
  if (i.abort_reason ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "abort-reason",
        e));

    a << *i.abort_reason ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const reject_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // problem_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "problem-type",
        e));

    a << i.problem_type ();
  }

  // problem
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "problem",
        e));

    a << i.problem ();
  }

  // reject_type
  //
  if (i.reject_type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reject-type",
        e));

    a << *i.reject_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const end_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (end_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const user_cancel_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const operation_type_def& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation-code",
        e));

    s << i.operation_code ();
  }

  // private_operation_data
  //
  if (i.private_operation_data ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "private-operation-data",
        e));

    s << *i.private_operation_data ();
  }

  // operation_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "operation-type",
        e));

    a << i.operation_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const error_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // error_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "error-code",
        e));

    s << i.error_code ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // last_component
  //
  if (i.last_component ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-component",
        e));

    a << *i.last_component ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // error_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "error-type",
        e));

    a << i.error_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const dialogue_portion_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // app_context_name
  //
  if (i.app_context_name ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "app-context-name",
        e));

    s << *i.app_context_name ();
  }

  // user_information
  //
  if (i.user_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-information",
        e));

    s << *i.user_information ();
  }

  // security_context_information
  //
  if (i.security_context_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "security-context-information",
        e));

    s << *i.security_context_information ();
  }

  // confidentiality_information
  //
  if (i.confidentiality_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "confidentiality-information",
        e));

    s << *i.confidentiality_information ();
  }

  // protocol_version
  //
  if (i.protocol_version ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "protocol-version",
        e));

    a << *i.protocol_version ();
  }

  // app_context_identifier
  //
  if (i.app_context_identifier ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "app-context-identifier",
        e));

    a << *i.app_context_identifier ();
  }

  // security_context_identifier
  //
  if (i.security_context_identifier ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "security-context-identifier",
        e));

    a << *i.security_context_identifier ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const tcap_user_address_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);
}

void
operator<< (::xercesc::DOMAttr&,const tcap_user_address_type&)
{
}

void
operator<< (::xsd::cxx::tree::list_stream< char >&,
            const tcap_user_address_type&)
{
}

void
operator<< (::xercesc::DOMElement& e, const nstate_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // affected_user
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "affected-user",
        e));

    s << i.affected_user ();
  }

  // own_point_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "own-point-code",
        e));

    s << i.own_point_code ();
  }

  // user_status
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "user-status",
        e));

    a << i.user_status ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const provider_abort_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (provider_abort_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // p_abort
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "p-abort",
        e));

    a << i.p_abort ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const user_abort_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_req_event
  //
  for (user_abort_req_event_type::component_req_event_const_iterator
       b (i.component_req_event ().begin ()), n (i.component_req_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-req-event",
        e));

    s << *b;
  }

  // user_abort_information
  //
  if (i.user_abort_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-abort-information",
        e));

    s << *i.user_abort_information ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // abort_reason
  //
  if (i.abort_reason ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "abort-reason",
        e));

    a << *i.abort_reason ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const begin_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (begin_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // destination_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "destination-address",
        e));

    s << i.destination_address ();
  }

  // originating_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << i.originating_address ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // allowed_permission
  //
  if (i.allowed_permission ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowed-permission",
        e));

    a << *i.allowed_permission ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const invoke_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << i.operation ();
  }

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // time_out
  //
  if (i.time_out ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "time-out",
        e));

    s << *i.time_out ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // linked_id
  //
  if (i.linked_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "linked-id",
        e));

    a << *i.linked_id ();
  }

  // class_type
  //
  if (i.class_type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "class-type",
        e));

    a << *i.class_type ();
  }

  // last_invoke_event
  //
  if (i.last_invoke_event ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-invoke-event",
        e));

    a << *i.last_invoke_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const gtindicator0100_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // address_information
  //
  if (i.address_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "address-information",
        e));

    s << *i.address_information ();
  }

  // translation_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "translation-type",
        e));

    a << i.translation_type ();
  }

  // numbering_plan
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "numbering-plan",
        e));

    a << i.numbering_plan ();
  }

  // nature_of_addr_ind
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "nature-of-addr-ind",
        e));

    a << i.nature_of_addr_ind ();
  }

  // encoding_scheme
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "encoding-scheme",
        e));

    a << i.encoding_scheme ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const sub_system_address_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // signaling_point_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "signaling-point-code",
        e));

    s << i.signaling_point_code ();
  }

  // sub_system_number
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "sub-system-number",
        e));

    a << i.sub_system_number ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const signaling_point_code_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // member
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "member",
        e));

    a << i.member ();
  }

  // cluster
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "cluster",
        e));

    a << i.cluster ();
  }

  // zone
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "zone",
        e));

    a << i.zone ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const unidirectional_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_req_event
  //
  for (unidirectional_req_event_type::component_req_event_const_iterator
       b (i.component_req_event ().begin ()), n (i.component_req_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-req-event",
        e));

    s << *b;
  }

  // destination_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "destination-address",
        e));

    s << i.destination_address ();
  }

  // originating_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << i.originating_address ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const reject_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // last_component
  //
  if (i.last_component ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-component",
        e));

    a << *i.last_component ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // problem_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "problem-type",
        e));

    a << i.problem_type ();
  }

  // problem
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "problem",
        e));

    a << i.problem ();
  }

  // reject_type
  //
  if (i.reject_type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "reject-type",
        e));

    a << *i.reject_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const local_cancel_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // last_component
  //
  if (i.last_component ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-component",
        e));

    a << *i.last_component ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const gtindicator0011_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // address_information
  //
  if (i.address_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "address-information",
        e));

    s << *i.address_information ();
  }

  // translation_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "translation-type",
        e));

    a << i.translation_type ();
  }

  // numbering_plan
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "numbering-plan",
        e));

    a << i.numbering_plan ();
  }

  // encoding_scheme
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "encoding-scheme",
        e));

    a << i.encoding_scheme ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const continue_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_req_event
  //
  for (continue_req_event_type::component_req_event_const_iterator
       b (i.component_req_event ().begin ()), n (i.component_req_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-req-event",
        e));

    s << *b;
  }

  // originating_address
  //
  if (i.originating_address ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << *i.originating_address ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // allowed_permission
  //
  if (i.allowed_permission ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowed-permission",
        e));

    a << *i.allowed_permission ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const nstate_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // affected_user
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "affected-user",
        e));

    s << i.affected_user ();
  }

  // user_status
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "user-status",
        e));

    a << i.user_status ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const unidirectional_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (unidirectional_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // destination_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "destination-address",
        e));

    s << i.destination_address ();
  }

  // originating_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << i.originating_address ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const continue_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (continue_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // allowed_permission
  //
  if (i.allowed_permission ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowed-permission",
        e));

    a << *i.allowed_permission ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const gtindicator0010_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // address_information
  //
  if (i.address_information ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "address-information",
        e));

    s << *i.address_information ();
  }

  // translation_type
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "translation-type",
        e));

    a << i.translation_type ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const npcstate_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // affected_dpc
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "affected-dpc",
        e));

    s << i.affected_dpc ();
  }

  // own_point_code
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "own-point-code",
        e));

    s << i.own_point_code ();
  }

  // signaling_point_status
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "signaling-point-status",
        e));

    a << i.signaling_point_status ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const begin_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_req_event
  //
  for (begin_req_event_type::component_req_event_const_iterator
       b (i.component_req_event ().begin ()), n (i.component_req_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-req-event",
        e));

    s << *b;
  }

  // destination_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "destination-address",
        e));

    s << i.destination_address ();
  }

  // originating_address
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << i.originating_address ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // allowed_permission
  //
  if (i.allowed_permission ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "allowed-permission",
        e));

    a << *i.allowed_permission ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const notice_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_ind_event
  //
  for (notice_ind_event_type::component_ind_event_const_iterator
       b (i.component_ind_event ().begin ()), n (i.component_ind_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-ind-event",
        e));

    s << *b;
  }

  // destination_address
  //
  if (i.destination_address ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "destination-address",
        e));

    s << *i.destination_address ();
  }

  // originating_address
  //
  if (i.originating_address ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "originating-address",
        e));

    s << *i.originating_address ();
  }

  // report_cause
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "report-cause",
        e));

    s << i.report_cause ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const invoke_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << i.operation ();
  }

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // last_component
  //
  if (i.last_component ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-component",
        e));

    a << *i.last_component ();
  }

  // linked_id
  //
  if (i.linked_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "linked-id",
        e));

    a << *i.linked_id ();
  }

  // class_type
  //
  if (i.class_type ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "class-type",
        e));

    a << *i.class_type ();
  }

  // last_invoke_event
  //
  if (i.last_invoke_event ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-invoke-event",
        e));

    a << *i.last_invoke_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const result_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation
  //
  if (i.operation ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << *i.operation ();
  }

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // last_component
  //
  if (i.last_component ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-component",
        e));

    a << *i.last_component ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // last_result_event
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-result-event",
        e));

    a << i.last_result_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const end_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_portion
  //
  if (i.dialogue_portion ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-portion",
        e));

    s << *i.dialogue_portion ();
  }

  // component_req_event
  //
  for (end_req_event_type::component_req_event_const_iterator
       b (i.component_req_event ().begin ()), n (i.component_req_event ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "component-req-event",
        e));

    s << *b;
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // quality_of_service
  //
  if (i.quality_of_service ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "quality-of-service",
        e));

    a << *i.quality_of_service ();
  }

  // termination
  //
  if (i.termination ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "termination",
        e));

    a << *i.termination ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const result_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // operation
  //
  if (i.operation ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "operation",
        e));

    s << *i.operation ();
  }

  // parameters
  //
  if (i.parameters ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameters",
        e));

    s << *i.parameters ();
  }

  // dialogue_id
  //
  if (i.dialogue_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "dialogue-id",
        e));

    a << *i.dialogue_id ();
  }

  // invoke_id
  //
  if (i.invoke_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "invoke-id",
        e));

    a << *i.invoke_id ();
  }

  // link_id
  //
  if (i.link_id ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "link-id",
        e));

    a << *i.link_id ();
  }

  // last_result_event
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "last-result-event",
        e));

    a << i.last_result_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const sccp_user_address_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // sub_system_address
  //
  if (i.sub_system_address ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sub-system-address",
        e));

    s << *i.sub_system_address ();
  }

  // global_title
  //
  if (i.global_title ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "global-title",
        e));

    s << *i.global_title ();
  }

  // routing_indicator
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "routing-indicator",
        e));

    a << i.routing_indicator ();
  }

  // national_use
  //
  if (i.national_use ())
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "national-use",
        e));

    a << *i.national_use ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const parameters_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // parameter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "parameter",
        e));

    s << i.parameter ();
  }

  // parameter_identifier
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "parameter-identifier",
        e));

    a << i.parameter_identifier ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const state_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // nstate_req_event
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nstate-req-event",
        e));

    s << i.nstate_req_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const dialogue_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // user_abort_ind_event
  //
  if (i.user_abort_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-abort-ind-event",
        e));

    s << *i.user_abort_ind_event ();
  }

  // end_ind_event
  //
  if (i.end_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "end-ind-event",
        e));

    s << *i.end_ind_event ();
  }

  // provider_abort_ind_event
  //
  if (i.provider_abort_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "provider-abort-ind-event",
        e));

    s << *i.provider_abort_ind_event ();
  }

  // begin_ind_event
  //
  if (i.begin_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "begin-ind-event",
        e));

    s << *i.begin_ind_event ();
  }

  // unidirectional_ind_event
  //
  if (i.unidirectional_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "unidirectional-ind-event",
        e));

    s << *i.unidirectional_ind_event ();
  }

  // continue_ind_event
  //
  if (i.continue_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "continue-ind-event",
        e));

    s << *i.continue_ind_event ();
  }

  // notice_ind_event
  //
  if (i.notice_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "notice-ind-event",
        e));

    s << *i.notice_ind_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const component_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // error_ind_event
  //
  if (i.error_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "error-ind-event",
        e));

    s << *i.error_ind_event ();
  }

  // reject_ind_event
  //
  if (i.reject_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "reject-ind-event",
        e));

    s << *i.reject_ind_event ();
  }

  // local_cancel_ind_event
  //
  if (i.local_cancel_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "local-cancel-ind-event",
        e));

    s << *i.local_cancel_ind_event ();
  }

  // invoke_ind_event
  //
  if (i.invoke_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "invoke-ind-event",
        e));

    s << *i.invoke_ind_event ();
  }

  // result_ind_event
  //
  if (i.result_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "result-ind-event",
        e));

    s << *i.result_ind_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const state_ind_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // nstate_ind_event
  //
  if (i.nstate_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "nstate-ind-event",
        e));

    s << *i.nstate_ind_event ();
  }

  // npcstate_ind_event
  //
  if (i.npcstate_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "npcstate-ind-event",
        e));

    s << *i.npcstate_ind_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const dialogue_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // user_abort_req_event
  //
  if (i.user_abort_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-abort-req-event",
        e));

    s << *i.user_abort_req_event ();
  }

  // unidirectional_req_event
  //
  if (i.unidirectional_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "unidirectional-req-event",
        e));

    s << *i.unidirectional_req_event ();
  }

  // continue_req_event
  //
  if (i.continue_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "continue-req-event",
        e));

    s << *i.continue_req_event ();
  }

  // begin_req_event
  //
  if (i.begin_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "begin-req-event",
        e));

    s << *i.begin_req_event ();
  }

  // end_req_event
  //
  if (i.end_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "end-req-event",
        e));

    s << *i.end_req_event ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const global_title_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // gtindicator0001
  //
  if (i.gtindicator0001 ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gtindicator0001",
        e));

    s << *i.gtindicator0001 ();
  }

  // gtindicator0100
  //
  if (i.gtindicator0100 ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gtindicator0100",
        e));

    s << *i.gtindicator0100 ();
  }

  // gtindicator0011
  //
  if (i.gtindicator0011 ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gtindicator0011",
        e));

    s << *i.gtindicator0011 ();
  }

  // gtindicator0010
  //
  if (i.gtindicator0010 ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "gtindicator0010",
        e));

    s << *i.gtindicator0010 ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const component_req_event_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // error_req_event
  //
  if (i.error_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "error-req-event",
        e));

    s << *i.error_req_event ();
  }

  // timer_reset_req_event
  //
  if (i.timer_reset_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "timer-reset-req-event",
        e));

    s << *i.timer_reset_req_event ();
  }

  // reject_req_event
  //
  if (i.reject_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "reject-req-event",
        e));

    s << *i.reject_req_event ();
  }

  // user_cancel_req_event
  //
  if (i.user_cancel_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "user-cancel-req-event",
        e));

    s << *i.user_cancel_req_event ();
  }

  // invoke_req_event
  //
  if (i.invoke_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "invoke-req-event",
        e));

    s << *i.invoke_req_event ();
  }

  // result_req_event
  //
  if (i.result_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "result-req-event",
        e));

    s << *i.result_req_event ();
  }
}

void
tcap (::std::ostream& o,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
tcap (::std::ostream& o,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      ::xml_schema::error_handler& h,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tcap (::std::ostream& o,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      ::xercesc::DOMErrorHandler& h,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tcap (::xercesc::XMLFormatTarget& t,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
tcap (::xercesc::XMLFormatTarget& t,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      ::xml_schema::error_handler& h,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tcap (::xercesc::XMLFormatTarget& t,
      const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      ::xercesc::DOMErrorHandler& h,
      const ::std::string& e,
      ::xml_schema::flags f)
{
  ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::tcap (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
tcap (::xercesc::DOMDocument& d,
      const ::tcap_type& s,
      ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "tcap" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "tcap",
      "");
  }
}

::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
tcap (const ::tcap_type& s,
      const ::xml_schema::namespace_infomap& m,
      ::xml_schema::flags f)
{
  try
  {
    ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "tcap",
        "",
        m, f));

    ::tcap (*d, s, f);
    return d;
  }
  catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
  {
    throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
  }
  catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
  {
    throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const tcap_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // dialogue_req_event
  //
  if (i.dialogue_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-req-event",
        e));

    s << *i.dialogue_req_event ();
  }

  // dialogue_ind_event
  //
  if (i.dialogue_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dialogue-ind-event",
        e));

    s << *i.dialogue_ind_event ();
  }

  // state_req_event
  //
  if (i.state_req_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "state-req-event",
        e));

    s << *i.state_req_event ();
  }

  // state_ind_event
  //
  if (i.state_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "state-ind-event",
        e));

    s << *i.state_ind_event ();
  }

  // local_cancel_ind_event
  //
  if (i.local_cancel_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "local-cancel-ind-event",
        e));

    s << *i.local_cancel_ind_event ();
  }

  // reject_ind_event
  //
  if (i.reject_ind_event ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "reject-ind-event",
        e));

    s << *i.reject_ind_event ();
  }

  // configuration
  //
  if (i.configuration ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "configuration",
        e));

    s << *i.configuration ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const tcap_config_type& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // local_user_address
  //
  for (tcap_config_type::local_user_address_const_iterator
       b (i.local_user_address ().begin ()), n (i.local_user_address ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "local-user-address",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const error_type& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const error_type& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const error_type& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const numbering_plan& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const numbering_plan& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const numbering_plan& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const nature_of_addr_ind& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const nature_of_addr_ind& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const nature_of_addr_ind& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const encoding_scheme& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const encoding_scheme& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const encoding_scheme& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const abort_reason& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const abort_reason& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const abort_reason& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const problem_type& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const problem_type& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const problem_type& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const problem& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const problem& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const problem& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const reject_type& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const reject_type& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const reject_type& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const operation_type& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const operation_type& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const operation_type& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const error_type1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const error_type1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const error_type1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const protocol_version& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const protocol_version& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const protocol_version& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const app_context_identifier& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const app_context_identifier& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const app_context_identifier& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const security_context_identifier& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const security_context_identifier& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const security_context_identifier& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const user_status& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const user_status& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const user_status& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const p_abort& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const p_abort& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const p_abort& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const abort_reason1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const abort_reason1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const abort_reason1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const class_type& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const class_type& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const class_type& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const numbering_plan1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const numbering_plan1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const numbering_plan1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const nature_of_addr_ind1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const nature_of_addr_ind1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const nature_of_addr_ind1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const encoding_scheme1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const encoding_scheme1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const encoding_scheme1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const problem_type1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const problem_type1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const problem_type1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const problem1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const problem1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const problem1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const reject_type1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const reject_type1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const reject_type1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const numbering_plan2& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const numbering_plan2& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const numbering_plan2& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const encoding_scheme2& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const encoding_scheme2& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const encoding_scheme2& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const user_status1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const user_status1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const user_status1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const signaling_point_status& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const signaling_point_status& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const signaling_point_status& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const class_type1& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const class_type1& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const class_type1& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const termination& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const termination& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const termination& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const routing_indicator& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const routing_indicator& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const routing_indicator& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const parameter_identifier& i)
{
  e << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const parameter_identifier& i)
{
  a << static_cast< const ::xml_schema::nmtoken& > (i);
}

void
operator<< (::xsd::cxx::tree::list_stream< char >& l,
            const parameter_identifier& i)
{
  l << static_cast< const ::xml_schema::nmtoken& > (i);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

