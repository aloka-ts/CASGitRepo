
package asnGenerated.v3;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "MidCallControlInfo", isSet = false )
    public class MidCallControlInfo implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 30L 
		
	   )
	   
        @ASN1Element ( name = "minimumNumberOfDigits", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  true  )
    
	private Integer minimumNumberOfDigits = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 30L 
		
	   )
	   
        @ASN1Element ( name = "maximumNumberOfDigits", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  true  )
    
	private Integer maximumNumberOfDigits = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "endOfReplyDigit", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private byte[] endOfReplyDigit = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "cancelDigit", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private byte[] cancelDigit = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "startDigit", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private byte[] startDigit = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 127L 
		
	   )
	   
        @ASN1Element ( name = "interDigitTimeout", isOptional =  false , hasTag =  true, tag = 6 , hasDefaultValue =  true  )
    
	private Integer interDigitTimeout = null;
                
  
        
        public Integer getMinimumNumberOfDigits () {
            return this.minimumNumberOfDigits;
        }

        

        public void setMinimumNumberOfDigits (Integer value) {
            this.minimumNumberOfDigits = value;
        }
        
  
        
        public Integer getMaximumNumberOfDigits () {
            return this.maximumNumberOfDigits;
        }

        

        public void setMaximumNumberOfDigits (Integer value) {
            this.maximumNumberOfDigits = value;
        }
        
  
        
        public byte[] getEndOfReplyDigit () {
            return this.endOfReplyDigit;
        }

        
        public boolean isEndOfReplyDigitPresent () {
            return this.endOfReplyDigit != null;
        }
        

        public void setEndOfReplyDigit (byte[] value) {
            this.endOfReplyDigit = value;
        }
        
  
        
        public byte[] getCancelDigit () {
            return this.cancelDigit;
        }

        
        public boolean isCancelDigitPresent () {
            return this.cancelDigit != null;
        }
        

        public void setCancelDigit (byte[] value) {
            this.cancelDigit = value;
        }
        
  
        
        public byte[] getStartDigit () {
            return this.startDigit;
        }

        
        public boolean isStartDigitPresent () {
            return this.startDigit != null;
        }
        

        public void setStartDigit (byte[] value) {
            this.startDigit = value;
        }
        
  
        
        public Integer getInterDigitTimeout () {
            return this.interDigitTimeout;
        }

        

        public void setInterDigitTimeout (Integer value) {
            this.interDigitTimeout = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            Integer param_MinimumNumberOfDigits =         
            new Integer ( 1);
        setMinimumNumberOfDigits(param_MinimumNumberOfDigits);
    Integer param_MaximumNumberOfDigits =         
            new Integer ( 30);
        setMaximumNumberOfDigits(param_MaximumNumberOfDigits);
    Integer param_InterDigitTimeout =         
            new Integer ( 10);
        setInterDigitTimeout(param_InterDigitTimeout);
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MidCallControlInfo.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            