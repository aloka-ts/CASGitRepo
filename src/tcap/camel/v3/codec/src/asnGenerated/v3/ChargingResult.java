
package asnGenerated.v3;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "ChargingResult" )
    public class ChargingResult implements IASN1PreparedElement {
            
        @ASN1Element ( name = "transferredVolume", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private TransferredVolume transferredVolume = null;
                
  
        @ASN1Element ( name = "elapsedTime", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private ElapsedTime elapsedTime = null;
                
  
        
        public TransferredVolume getTransferredVolume () {
            return this.transferredVolume;
        }

        public boolean isTransferredVolumeSelected () {
            return this.transferredVolume != null;
        }

        private void setTransferredVolume (TransferredVolume value) {
            this.transferredVolume = value;
        }

        
        public void selectTransferredVolume (TransferredVolume value) {
            this.transferredVolume = value;
            
                    setElapsedTime(null);
                            
        }

        
  
        
        public ElapsedTime getElapsedTime () {
            return this.elapsedTime;
        }

        public boolean isElapsedTimeSelected () {
            return this.elapsedTime != null;
        }

        private void setElapsedTime (ElapsedTime value) {
            this.elapsedTime = value;
        }

        
        public void selectElapsedTime (ElapsedTime value) {
            this.elapsedTime = value;
            
                    setTransferredVolume(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ChargingResult.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            