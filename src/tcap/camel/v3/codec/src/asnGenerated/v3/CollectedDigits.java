
package asnGenerated.v3;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "CollectedDigits", isSet = false )
    public class CollectedDigits implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 30L 
		
	   )
	   
        @ASN1Element ( name = "minimumNbOfDigits", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  true  )
    
	private Integer minimumNbOfDigits = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 30L 
		
	   )
	   
        @ASN1Element ( name = "maximumNbOfDigits", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private Integer maximumNbOfDigits = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "endOfReplyDigit", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private byte[] endOfReplyDigit = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "cancelDigit", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private byte[] cancelDigit = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "startDigit", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private byte[] startDigit = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 127L 
		
	   )
	   
        @ASN1Element ( name = "firstDigitTimeOut", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private Integer firstDigitTimeOut = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 127L 
		
	   )
	   
        @ASN1Element ( name = "interDigitTimeOut", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private Integer interDigitTimeOut = null;
                
  
        @ASN1Element ( name = "errorTreatment", isOptional =  false , hasTag =  true, tag = 7 , hasDefaultValue =  true  )
    
	private ErrorTreatment errorTreatment = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "interruptableAnnInd", isOptional =  false , hasTag =  true, tag = 8 , hasDefaultValue =  true  )
    
	private Boolean interruptableAnnInd = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "voiceInformation", isOptional =  false , hasTag =  true, tag = 9 , hasDefaultValue =  true  )
    
	private Boolean voiceInformation = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "voiceBack", isOptional =  false , hasTag =  true, tag = 10 , hasDefaultValue =  true  )
    
	private Boolean voiceBack = null;
                
  
        
        public Integer getMinimumNbOfDigits () {
            return this.minimumNbOfDigits;
        }

        

        public void setMinimumNbOfDigits (Integer value) {
            this.minimumNbOfDigits = value;
        }
        
  
        
        public Integer getMaximumNbOfDigits () {
            return this.maximumNbOfDigits;
        }

        

        public void setMaximumNbOfDigits (Integer value) {
            this.maximumNbOfDigits = value;
        }
        
  
        
        public byte[] getEndOfReplyDigit () {
            return this.endOfReplyDigit;
        }

        
        public boolean isEndOfReplyDigitPresent () {
            return this.endOfReplyDigit != null;
        }
        

        public void setEndOfReplyDigit (byte[] value) {
            this.endOfReplyDigit = value;
        }
        
  
        
        public byte[] getCancelDigit () {
            return this.cancelDigit;
        }

        
        public boolean isCancelDigitPresent () {
            return this.cancelDigit != null;
        }
        

        public void setCancelDigit (byte[] value) {
            this.cancelDigit = value;
        }
        
  
        
        public byte[] getStartDigit () {
            return this.startDigit;
        }

        
        public boolean isStartDigitPresent () {
            return this.startDigit != null;
        }
        

        public void setStartDigit (byte[] value) {
            this.startDigit = value;
        }
        
  
        
        public Integer getFirstDigitTimeOut () {
            return this.firstDigitTimeOut;
        }

        
        public boolean isFirstDigitTimeOutPresent () {
            return this.firstDigitTimeOut != null;
        }
        

        public void setFirstDigitTimeOut (Integer value) {
            this.firstDigitTimeOut = value;
        }
        
  
        
        public Integer getInterDigitTimeOut () {
            return this.interDigitTimeOut;
        }

        
        public boolean isInterDigitTimeOutPresent () {
            return this.interDigitTimeOut != null;
        }
        

        public void setInterDigitTimeOut (Integer value) {
            this.interDigitTimeOut = value;
        }
        
  
        
        public ErrorTreatment getErrorTreatment () {
            return this.errorTreatment;
        }

        

        public void setErrorTreatment (ErrorTreatment value) {
            this.errorTreatment = value;
        }
        
  
        
        public Boolean getInterruptableAnnInd () {
            return this.interruptableAnnInd;
        }

        

        public void setInterruptableAnnInd (Boolean value) {
            this.interruptableAnnInd = value;
        }
        
  
        
        public Boolean getVoiceInformation () {
            return this.voiceInformation;
        }

        

        public void setVoiceInformation (Boolean value) {
            this.voiceInformation = value;
        }
        
  
        
        public Boolean getVoiceBack () {
            return this.voiceBack;
        }

        

        public void setVoiceBack (Boolean value) {
            this.voiceBack = value;
        }
        
  
        public void initWithDefaults() {
            Integer param_MinimumNbOfDigits =         
            new Integer ( 1);
        setMinimumNbOfDigits(param_MinimumNbOfDigits);
    ErrorTreatment param_ErrorTreatment = new ErrorTreatment();        
            param_ErrorTreatment.setValue(ErrorTreatment.EnumType.stdErrorAndInfo);
        setErrorTreatment(param_ErrorTreatment);
    Boolean param_InterruptableAnnInd =         
            null;
        setInterruptableAnnInd(param_InterruptableAnnInd);
    Boolean param_VoiceInformation =         
            null;
        setVoiceInformation(param_VoiceInformation);
    Boolean param_VoiceBack =         
            null;
        setVoiceBack(param_VoiceBack);
    
        }
                    
        
       /* public void initWithDefaults() {
            Integer param_MinimumNbOfDigits =         
            new Integer ( 1);
        setMinimumNbOfDigits(param_MinimumNbOfDigits);
    ErrorTreatment param_ErrorTreatment =         
            ;
        setErrorTreatment(param_ErrorTreatment);
    Boolean param_InterruptableAnnInd =         
            null;
        setInterruptableAnnInd(param_InterruptableAnnInd);
    Boolean param_VoiceInformation =         
            null;
        setVoiceInformation(param_VoiceInformation);
    Boolean param_VoiceBack =         
            null;
        setVoiceBack(param_VoiceBack);
    
        }*/

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(CollectedDigits.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            