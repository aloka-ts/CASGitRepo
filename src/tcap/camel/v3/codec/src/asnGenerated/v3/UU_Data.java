
package asnGenerated.v3;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "UU_Data", isSet = false )
    public class UU_Data implements IASN1PreparedElement {
            
        @ASN1Element ( name = "uuIndicator", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private UUIndicator uuIndicator = null;
                
  
        @ASN1Element ( name = "uui", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private UUI uui = null;
                
  
        @ASN1Null ( name = "uusCFInteraction" ) 
    
        @ASN1Element ( name = "uusCFInteraction", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject uusCFInteraction = null;
                
  
        @ASN1Element ( name = "extensionContainer", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private ExtensionContainer extensionContainer = null;
                
  
        
        public UUIndicator getUuIndicator () {
            return this.uuIndicator;
        }

        
        public boolean isUuIndicatorPresent () {
            return this.uuIndicator != null;
        }
        

        public void setUuIndicator (UUIndicator value) {
            this.uuIndicator = value;
        }
        
  
        
        public UUI getUui () {
            return this.uui;
        }

        
        public boolean isUuiPresent () {
            return this.uui != null;
        }
        

        public void setUui (UUI value) {
            this.uui = value;
        }
        
  
        
        public ExtensionContainer getExtensionContainer () {
            return this.extensionContainer;
        }

        
        public boolean isExtensionContainerPresent () {
            return this.extensionContainer != null;
        }
        

        public void setExtensionContainer (ExtensionContainer value) {
            this.extensionContainer = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(UU_Data.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            