
package asnGenerated.v3;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "Code" )
    public class Code implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    
        @ASN1Element ( name = "local", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Long local = null;
                
  @ASN1ObjectIdentifier( name = "" )
    
        @ASN1Element ( name = "global", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ObjectIdentifier global = null;
                
  
        
        public Long getLocal () {
            return this.local;
        }

        public boolean isLocalSelected () {
            return this.local != null;
        }

        private void setLocal (Long value) {
            this.local = value;
        }

        
        public void selectLocal (Long value) {
            this.local = value;
            
                    setGlobal(null);
                            
        }

        
  
        
        public ObjectIdentifier getGlobal () {
            return this.global;
        }

        public boolean isGlobalSelected () {
            return this.global != null;
        }

        private void setGlobal (ObjectIdentifier value) {
            this.global = value;
        }

        
        public void selectGlobal (ObjectIdentifier value) {
            this.global = value;
            
                    setLocal(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Code.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            