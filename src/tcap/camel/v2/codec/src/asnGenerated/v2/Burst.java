
package asnGenerated.v2;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "Burst", isSet = false )
    public class Burst implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 3L 
		
	   )
	   
        @ASN1Element ( name = "numberOfBursts", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  true  )
    
	private Integer numberOfBursts = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 1200L 
		
	   )
	   
        @ASN1Element ( name = "burstInterval", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  true  )
    
	private Integer burstInterval = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 3L 
		
	   )
	   
        @ASN1Element ( name = "numberOfTonesInBurst", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  true  )
    
	private Integer numberOfTonesInBurst = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 20L 
		
	   )
	   
        @ASN1Element ( name = "toneDuration", isOptional =  false , hasTag =  true, tag = 3 , hasDefaultValue =  true  )
    
	private Integer toneDuration = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 20L 
		
	   )
	   
        @ASN1Element ( name = "toneInterval", isOptional =  false , hasTag =  true, tag = 4 , hasDefaultValue =  true  )
    
	private Integer toneInterval = null;
                
  
        
        public Integer getNumberOfBursts () {
            return this.numberOfBursts;
        }

        

        public void setNumberOfBursts (Integer value) {
            this.numberOfBursts = value;
        }
        
  
        
        public Integer getBurstInterval () {
            return this.burstInterval;
        }

        

        public void setBurstInterval (Integer value) {
            this.burstInterval = value;
        }
        
  
        
        public Integer getNumberOfTonesInBurst () {
            return this.numberOfTonesInBurst;
        }

        

        public void setNumberOfTonesInBurst (Integer value) {
            this.numberOfTonesInBurst = value;
        }
        
  
        
        public Integer getToneDuration () {
            return this.toneDuration;
        }

        

        public void setToneDuration (Integer value) {
            this.toneDuration = value;
        }
        
  
        
        public Integer getToneInterval () {
            return this.toneInterval;
        }

        

        public void setToneInterval (Integer value) {
            this.toneInterval = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            Integer param_NumberOfBursts =         
            new Integer ( 1);
        setNumberOfBursts(param_NumberOfBursts);
    Integer param_BurstInterval =         
            new Integer ( 2);
        setBurstInterval(param_BurstInterval);
    Integer param_NumberOfTonesInBurst =         
            new Integer ( 3);
        setNumberOfTonesInBurst(param_NumberOfTonesInBurst);
    Integer param_ToneDuration =         
            new Integer ( 2);
        setToneDuration(param_ToneDuration);
    Integer param_ToneInterval =         
            new Integer ( 2);
        setToneInterval(param_ToneInterval);
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Burst.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            