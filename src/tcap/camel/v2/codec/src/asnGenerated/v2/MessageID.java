
package asnGenerated.v2;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "MessageID" )
    public class MessageID implements IASN1PreparedElement {
            
        @ASN1Element ( name = "elementaryMessageID", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private Integer4 elementaryMessageID = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "text" , isSet = false )
       public static class TextSequenceType implements IASN1PreparedElement {
                
    @ASN1String( name = "", 
        stringType =  UniversalTag.IA5String , isUCS = false )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 127L 
		
	   )
	   
        @ASN1Element ( name = "messageContent", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private String messageContent = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 2L, 
		
		max = 10L 
		
	   )
	   
        @ASN1Element ( name = "attributes", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private byte[] attributes = null;
                
  
        
        public String getMessageContent () {
            return this.messageContent;
        }

        

        public void setMessageContent (String value) {
            this.messageContent = value;
        }
        
  
        
        public byte[] getAttributes () {
            return this.attributes;
        }

        
        public boolean isAttributesPresent () {
            return this.attributes != null;
        }
        

        public void setAttributes (byte[] value) {
            this.attributes = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TextSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TextSequenceType = CoderFactory.getInstance().newPreparedElementData(TextSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "text", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private TextSequenceType text = null;
                
  
@ASN1SequenceOf( name = "elementaryMessageIDs", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "elementaryMessageIDs", isOptional =  false , hasTag =  true, tag = 29 , hasDefaultValue =  false  )
    
	private java.util.Collection<Integer4>  elementaryMessageIDs = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "variableMessage" , isSet = false )
       public static class VariableMessageSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "elementaryMessageID", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private Integer4 elementaryMessageID = null;
                
  
@ASN1SequenceOf( name = "variableParts", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "variableParts", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private java.util.Collection<VariablePart>  variableParts = null;
                
  
        
        public Integer4 getElementaryMessageID () {
            return this.elementaryMessageID;
        }

        

        public void setElementaryMessageID (Integer4 value) {
            this.elementaryMessageID = value;
        }
        
  
        
        public java.util.Collection<VariablePart>  getVariableParts () {
            return this.variableParts;
        }

        

        public void setVariableParts (java.util.Collection<VariablePart>  value) {
            this.variableParts = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_VariableMessageSequenceType;
        }

       private static IASN1PreparedElementData preparedData_VariableMessageSequenceType = CoderFactory.getInstance().newPreparedElementData(VariableMessageSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "variableMessage", isOptional =  false , hasTag =  true, tag = 30 , hasDefaultValue =  false  )
    
	private VariableMessageSequenceType variableMessage = null;
                
  
        
        public Integer4 getElementaryMessageID () {
            return this.elementaryMessageID;
        }

        public boolean isElementaryMessageIDSelected () {
            return this.elementaryMessageID != null;
        }

        private void setElementaryMessageID (Integer4 value) {
            this.elementaryMessageID = value;
        }

        
        public void selectElementaryMessageID (Integer4 value) {
            this.elementaryMessageID = value;
            
                    setText(null);
                
                    setElementaryMessageIDs(null);
                
                    setVariableMessage(null);
                            
        }

        
  
        
        public TextSequenceType getText () {
            return this.text;
        }

        public boolean isTextSelected () {
            return this.text != null;
        }

        private void setText (TextSequenceType value) {
            this.text = value;
        }

        
        public void selectText (TextSequenceType value) {
            this.text = value;
            
                    setElementaryMessageID(null);
                
                    setElementaryMessageIDs(null);
                
                    setVariableMessage(null);
                            
        }

        
  
        
        public java.util.Collection<Integer4>  getElementaryMessageIDs () {
            return this.elementaryMessageIDs;
        }

        public boolean isElementaryMessageIDsSelected () {
            return this.elementaryMessageIDs != null;
        }

        private void setElementaryMessageIDs (java.util.Collection<Integer4>  value) {
            this.elementaryMessageIDs = value;
        }

        
        public void selectElementaryMessageIDs (java.util.Collection<Integer4>  value) {
            this.elementaryMessageIDs = value;
            
                    setElementaryMessageID(null);
                
                    setText(null);
                
                    setVariableMessage(null);
                            
        }

        
  
        
        public VariableMessageSequenceType getVariableMessage () {
            return this.variableMessage;
        }

        public boolean isVariableMessageSelected () {
            return this.variableMessage != null;
        }

        private void setVariableMessage (VariableMessageSequenceType value) {
            this.variableMessage = value;
        }

        
        public void selectVariableMessage (VariableMessageSequenceType value) {
            this.variableMessage = value;
            
                    setElementaryMessageID(null);
                
                    setText(null);
                
                    setElementaryMessageIDs(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MessageID.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            