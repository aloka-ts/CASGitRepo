
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "AuthenticationDirectiveForwardRes" )
    public class AuthenticationDirectiveForwardRes implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "AuthenticationDirectiveForwardRes" , isSet = true )
       public static class AuthenticationDirectiveForwardResSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "countUpdateReport", isOptional =  true , hasTag =  true, tag = 138 , hasDefaultValue =  false  )
    
	private CountUpdateReport countUpdateReport = null;
                
  
        @ASN1Element ( name = "uniqueChallengeReport", isOptional =  true , hasTag =  true, tag = 124 , hasDefaultValue =  false  )
    
	private UniqueChallengeReport uniqueChallengeReport = null;
                
  
        
        public CountUpdateReport getCountUpdateReport () {
            return this.countUpdateReport;
        }

        
        public boolean isCountUpdateReportPresent () {
            return this.countUpdateReport != null;
        }
        

        public void setCountUpdateReport (CountUpdateReport value) {
            this.countUpdateReport = value;
        }
        
  
        
        public UniqueChallengeReport getUniqueChallengeReport () {
            return this.uniqueChallengeReport;
        }

        
        public boolean isUniqueChallengeReportPresent () {
            return this.uniqueChallengeReport != null;
        }
        

        public void setUniqueChallengeReport (UniqueChallengeReport value) {
            this.uniqueChallengeReport = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_AuthenticationDirectiveForwardResSequenceType;
        }

       private static IASN1PreparedElementData preparedData_AuthenticationDirectiveForwardResSequenceType = CoderFactory.getInstance().newPreparedElementData(AuthenticationDirectiveForwardResSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "AuthenticationDirectiveForwardRes", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private AuthenticationDirectiveForwardResSequenceType  value;        

        
        
        public AuthenticationDirectiveForwardRes () {
        }
        
        
        
        public void setValue(AuthenticationDirectiveForwardResSequenceType value) {
            this.value = value;
        }
        
        
        
        public AuthenticationDirectiveForwardResSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AuthenticationDirectiveForwardRes.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            