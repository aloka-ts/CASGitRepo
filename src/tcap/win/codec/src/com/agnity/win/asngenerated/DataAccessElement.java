
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "DataAccessElement", isSet = false )
    public class DataAccessElement implements IASN1PreparedElement {
            
        @ASN1Element ( name = "dataID", isOptional =  false , hasTag =  true, tag = 251 , hasDefaultValue =  false  )
    
	private DataID dataID = null;
                
  
        @ASN1Element ( name = "change", isOptional =  true , hasTag =  true, tag = 248 , hasDefaultValue =  false  )
    
	private Change change = null;
                
  
        @ASN1Element ( name = "dataValue", isOptional =  true , hasTag =  true, tag = 256 , hasDefaultValue =  false  )
    
	private DataValue dataValue = null;
                
  
        
        public DataID getDataID () {
            return this.dataID;
        }

        

        public void setDataID (DataID value) {
            this.dataID = value;
        }
        
  
        
        public Change getChange () {
            return this.change;
        }

        
        public boolean isChangePresent () {
            return this.change != null;
        }
        

        public void setChange (Change value) {
            this.change = value;
        }
        
  
        
        public DataValue getDataValue () {
            return this.dataValue;
        }

        
        public boolean isDataValuePresent () {
            return this.dataValue != null;
        }
        

        public void setDataValue (DataValue value) {
            this.dataValue = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(DataAccessElement.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            