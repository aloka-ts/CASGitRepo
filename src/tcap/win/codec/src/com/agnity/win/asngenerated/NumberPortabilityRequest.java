
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "NumberPortabilityRequest" )
    public class NumberPortabilityRequest implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "NumberPortabilityRequest" , isSet = true )
       public static class NumberPortabilityRequestSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "digits", isOptional =  false , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private Digits digits = null;
                
  
        @ASN1Element ( name = "acgencountered", isOptional =  true , hasTag =  true, tag = 340 , hasDefaultValue =  false  )
    
	private ACGEncountered acgencountered = null;
                
  
        @ASN1Element ( name = "callingPartyNumberDigits1", isOptional =  true , hasTag =  true, tag = 80 , hasDefaultValue =  false  )
    
	private CallingPartyNumberDigits1 callingPartyNumberDigits1 = null;
                
  
        @ASN1Element ( name = "mscid", isOptional =  true , hasTag =  true, tag = 21 , hasDefaultValue =  false  )
    
	private MSCID mscid = null;
                
  
        @ASN1Element ( name = "msid", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MSID msid = null;
                
  
        
        public Digits getDigits () {
            return this.digits;
        }

        

        public void setDigits (Digits value) {
            this.digits = value;
        }
        
  
        
        public ACGEncountered getAcgencountered () {
            return this.acgencountered;
        }

        
        public boolean isAcgencounteredPresent () {
            return this.acgencountered != null;
        }
        

        public void setAcgencountered (ACGEncountered value) {
            this.acgencountered = value;
        }
        
  
        
        public CallingPartyNumberDigits1 getCallingPartyNumberDigits1 () {
            return this.callingPartyNumberDigits1;
        }

        
        public boolean isCallingPartyNumberDigits1Present () {
            return this.callingPartyNumberDigits1 != null;
        }
        

        public void setCallingPartyNumberDigits1 (CallingPartyNumberDigits1 value) {
            this.callingPartyNumberDigits1 = value;
        }
        
  
        
        public MSCID getMscid () {
            return this.mscid;
        }

        
        public boolean isMscidPresent () {
            return this.mscid != null;
        }
        

        public void setMscid (MSCID value) {
            this.mscid = value;
        }
        
  
        
        public MSID getMsid () {
            return this.msid;
        }

        
        public boolean isMsidPresent () {
            return this.msid != null;
        }
        

        public void setMsid (MSID value) {
            this.msid = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NumberPortabilityRequestSequenceType;
        }

       private static IASN1PreparedElementData preparedData_NumberPortabilityRequestSequenceType = CoderFactory.getInstance().newPreparedElementData(NumberPortabilityRequestSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "NumberPortabilityRequest", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private NumberPortabilityRequestSequenceType  value;        

        
        
        public NumberPortabilityRequest () {
        }
        
        
        
        public void setValue(NumberPortabilityRequestSequenceType value) {
            this.value = value;
        }
        
        
        
        public NumberPortabilityRequestSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(NumberPortabilityRequest.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            