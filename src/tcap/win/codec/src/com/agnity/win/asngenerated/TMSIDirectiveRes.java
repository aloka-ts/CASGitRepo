
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "TMSIDirectiveRes" )
    public class TMSIDirectiveRes implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "TMSIDirectiveRes" , isSet = true )
       public static class TMSIDirectiveResSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "denyAccess", isOptional =  true , hasTag =  true, tag = 50 , hasDefaultValue =  false  )
    
	private DenyAccess denyAccess = null;
                
  
        @ASN1Element ( name = "electronicSerialNumber", isOptional =  true , hasTag =  true, tag = 9 , hasDefaultValue =  false  )
    
	private ElectronicSerialNumber electronicSerialNumber = null;
                
  
        @ASN1Element ( name = "mscid", isOptional =  true , hasTag =  true, tag = 21 , hasDefaultValue =  false  )
    
	private MSCID mscid = null;
                
  
        @ASN1Element ( name = "reasonList", isOptional =  true , hasTag =  true, tag = 218 , hasDefaultValue =  false  )
    
	private ReasonList reasonList = null;
                
  
        @ASN1Element ( name = "meid", isOptional =  true , hasTag =  true, tag = 390 , hasDefaultValue =  false  )
    
	private MEID meid = null;
                
  
        
        public DenyAccess getDenyAccess () {
            return this.denyAccess;
        }

        
        public boolean isDenyAccessPresent () {
            return this.denyAccess != null;
        }
        

        public void setDenyAccess (DenyAccess value) {
            this.denyAccess = value;
        }
        
  
        
        public ElectronicSerialNumber getElectronicSerialNumber () {
            return this.electronicSerialNumber;
        }

        
        public boolean isElectronicSerialNumberPresent () {
            return this.electronicSerialNumber != null;
        }
        

        public void setElectronicSerialNumber (ElectronicSerialNumber value) {
            this.electronicSerialNumber = value;
        }
        
  
        
        public MSCID getMscid () {
            return this.mscid;
        }

        
        public boolean isMscidPresent () {
            return this.mscid != null;
        }
        

        public void setMscid (MSCID value) {
            this.mscid = value;
        }
        
  
        
        public ReasonList getReasonList () {
            return this.reasonList;
        }

        
        public boolean isReasonListPresent () {
            return this.reasonList != null;
        }
        

        public void setReasonList (ReasonList value) {
            this.reasonList = value;
        }
        
  
        
        public MEID getMeid () {
            return this.meid;
        }

        
        public boolean isMeidPresent () {
            return this.meid != null;
        }
        

        public void setMeid (MEID value) {
            this.meid = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TMSIDirectiveResSequenceType;
        }

       private static IASN1PreparedElementData preparedData_TMSIDirectiveResSequenceType = CoderFactory.getInstance().newPreparedElementData(TMSIDirectiveResSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "TMSIDirectiveRes", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private TMSIDirectiveResSequenceType  value;        

        
        
        public TMSIDirectiveRes () {
        }
        
        
        
        public void setValue(TMSIDirectiveResSequenceType value) {
            this.value = value;
        }
        
        
        
        public TMSIDirectiveResSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(TMSIDirectiveRes.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            