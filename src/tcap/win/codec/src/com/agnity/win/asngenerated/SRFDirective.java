
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "SRFDirective" )
    public class SRFDirective implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "SRFDirective" , isSet = true )
       public static class SRFDirectiveSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "announcementList", isOptional =  true , hasTag =  true, tag = 130 , hasDefaultValue =  false  )
    
	private AnnouncementList announcementList = null;
                
  
        @ASN1Element ( name = "digitCollectionControl", isOptional =  true , hasTag =  true, tag = 139 , hasDefaultValue =  false  )
    
	private DigitCollectionControl digitCollectionControl = null;
                
  
        @ASN1Element ( name = "executeScript", isOptional =  true , hasTag =  true, tag = 386 , hasDefaultValue =  false  )
    
	private ExecuteScript executeScript = null;
                
  
        @ASN1Element ( name = "mobileDirectoryNumber", isOptional =  true , hasTag =  true, tag = 93 , hasDefaultValue =  false  )
    
	private MobileDirectoryNumber mobileDirectoryNumber = null;
                
  
        
        public AnnouncementList getAnnouncementList () {
            return this.announcementList;
        }

        
        public boolean isAnnouncementListPresent () {
            return this.announcementList != null;
        }
        

        public void setAnnouncementList (AnnouncementList value) {
            this.announcementList = value;
        }
        
  
        
        public DigitCollectionControl getDigitCollectionControl () {
            return this.digitCollectionControl;
        }

        
        public boolean isDigitCollectionControlPresent () {
            return this.digitCollectionControl != null;
        }
        

        public void setDigitCollectionControl (DigitCollectionControl value) {
            this.digitCollectionControl = value;
        }
        
  
        
        public ExecuteScript getExecuteScript () {
            return this.executeScript;
        }

        
        public boolean isExecuteScriptPresent () {
            return this.executeScript != null;
        }
        

        public void setExecuteScript (ExecuteScript value) {
            this.executeScript = value;
        }
        
  
        
        public MobileDirectoryNumber getMobileDirectoryNumber () {
            return this.mobileDirectoryNumber;
        }

        
        public boolean isMobileDirectoryNumberPresent () {
            return this.mobileDirectoryNumber != null;
        }
        

        public void setMobileDirectoryNumber (MobileDirectoryNumber value) {
            this.mobileDirectoryNumber = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SRFDirectiveSequenceType;
        }

       private static IASN1PreparedElementData preparedData_SRFDirectiveSequenceType = CoderFactory.getInstance().newPreparedElementData(SRFDirectiveSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "SRFDirective", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private SRFDirectiveSequenceType  value;        

        
        
        public SRFDirective () {
        }
        
        
        
        public void setValue(SRFDirectiveSequenceType value) {
            this.value = value;
        }
        
        
        
        public SRFDirectiveSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(SRFDirective.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            