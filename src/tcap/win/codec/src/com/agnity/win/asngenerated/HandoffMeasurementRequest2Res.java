
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "HandoffMeasurementRequest2Res" )
    public class HandoffMeasurementRequest2Res implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "HandoffMeasurementRequest2Res" , isSet = true )
       public static class HandoffMeasurementRequest2ResSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "cdmaTargetMeasurementList", isOptional =  true , hasTag =  true, tag = 134 , hasDefaultValue =  false  )
    
	private CDMATargetMeasurementList cdmaTargetMeasurementList = null;
                
  
        @ASN1Element ( name = "targetMeasurementList", isOptional =  true , hasTag =  true, tag = 157 , hasDefaultValue =  false  )
    
	private TargetMeasurementList targetMeasurementList = null;
                
  
        
        public CDMATargetMeasurementList getCdmaTargetMeasurementList () {
            return this.cdmaTargetMeasurementList;
        }

        
        public boolean isCdmaTargetMeasurementListPresent () {
            return this.cdmaTargetMeasurementList != null;
        }
        

        public void setCdmaTargetMeasurementList (CDMATargetMeasurementList value) {
            this.cdmaTargetMeasurementList = value;
        }
        
  
        
        public TargetMeasurementList getTargetMeasurementList () {
            return this.targetMeasurementList;
        }

        
        public boolean isTargetMeasurementListPresent () {
            return this.targetMeasurementList != null;
        }
        

        public void setTargetMeasurementList (TargetMeasurementList value) {
            this.targetMeasurementList = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_HandoffMeasurementRequest2ResSequenceType;
        }

       private static IASN1PreparedElementData preparedData_HandoffMeasurementRequest2ResSequenceType = CoderFactory.getInstance().newPreparedElementData(HandoffMeasurementRequest2ResSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "HandoffMeasurementRequest2Res", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private HandoffMeasurementRequest2ResSequenceType  value;        

        
        
        public HandoffMeasurementRequest2Res () {
        }
        
        
        
        public void setValue(HandoffMeasurementRequest2ResSequenceType value) {
            this.value = value;
        }
        
        
        
        public HandoffMeasurementRequest2ResSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(HandoffMeasurementRequest2Res.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            