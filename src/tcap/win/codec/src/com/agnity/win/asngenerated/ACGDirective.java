
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "ACGDirective" )
    public class ACGDirective implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ACGDirective" , isSet = true )
       public static class ACGDirectiveSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "controlType", isOptional =  false , hasTag =  true, tag = 341 , hasDefaultValue =  false  )
    
	private ControlType controlType = null;
                
  
        @ASN1Element ( name = "destinationAddress", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private DestinationAddress destinationAddress = null;
                
  
        @ASN1Element ( name = "gapDuration", isOptional =  true , hasTag =  true, tag = 342 , hasDefaultValue =  false  )
    
	private GapDuration gapDuration = null;
                
  
        @ASN1Element ( name = "gapInterval", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private GapInterval gapInterval = null;
                
  
        
        public ControlType getControlType () {
            return this.controlType;
        }

        

        public void setControlType (ControlType value) {
            this.controlType = value;
        }
        
  
        
        public DestinationAddress getDestinationAddress () {
            return this.destinationAddress;
        }

        
        public boolean isDestinationAddressPresent () {
            return this.destinationAddress != null;
        }
        

        public void setDestinationAddress (DestinationAddress value) {
            this.destinationAddress = value;
        }
        
  
        
        public GapDuration getGapDuration () {
            return this.gapDuration;
        }

        
        public boolean isGapDurationPresent () {
            return this.gapDuration != null;
        }
        

        public void setGapDuration (GapDuration value) {
            this.gapDuration = value;
        }
        
  
        
        public GapInterval getGapInterval () {
            return this.gapInterval;
        }

        
        public boolean isGapIntervalPresent () {
            return this.gapInterval != null;
        }
        

        public void setGapInterval (GapInterval value) {
            this.gapInterval = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ACGDirectiveSequenceType;
        }

       private static IASN1PreparedElementData preparedData_ACGDirectiveSequenceType = CoderFactory.getInstance().newPreparedElementData(ACGDirectiveSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ACGDirective", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private ACGDirectiveSequenceType  value;        

        
        
        public ACGDirective () {
        }
        
        
        
        public void setValue(ACGDirectiveSequenceType value) {
            this.value = value;
        }
        
        
        
        public ACGDirectiveSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ACGDirective.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            