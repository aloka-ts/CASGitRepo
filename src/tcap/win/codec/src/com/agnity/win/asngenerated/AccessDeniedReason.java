
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Enum (
        name = "AccessDeniedReason"
    )
    public class AccessDeniedReason implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "not-used", hasTag = true , tag = 0 )
            not_used , 
            @ASN1EnumItem ( name = "unassigned-directory-number", hasTag = true , tag = 1 )
            unassigned_directory_number , 
            @ASN1EnumItem ( name = "inactive", hasTag = true , tag = 2 )
            inactive , 
            @ASN1EnumItem ( name = "busy", hasTag = true , tag = 3 )
            busy , 
            @ASN1EnumItem ( name = "termination-denied", hasTag = true , tag = 4 )
            termination_denied , 
            @ASN1EnumItem ( name = "no-page-response", hasTag = true , tag = 5 )
            no_page_response , 
            @ASN1EnumItem ( name = "unavailable", hasTag = true , tag = 6 )
            unavailable , 
            @ASN1EnumItem ( name = "service-Rejected-by-MS", hasTag = true , tag = 7 )
            service_Rejected_by_MS , 
            @ASN1EnumItem ( name = "services-Rejected-by-the-System", hasTag = true , tag = 8 )
            services_Rejected_by_the_System , 
            @ASN1EnumItem ( name = "service-Type-Mismatch", hasTag = true , tag = 9 )
            service_Type_Mismatch , 
            @ASN1EnumItem ( name = "service-Denied", hasTag = true , tag = 10 )
            service_Denied , 
            @ASN1EnumItem ( name = "position-Determination-Not-Supported", hasTag = true , tag = 12 )
            position_Determination_Not_Supported , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AccessDeniedReason.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            