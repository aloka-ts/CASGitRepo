
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Enum (
        name = "AuthorizationDenied"
    )
    public class AuthorizationDenied implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "not-used", hasTag = true , tag = 0 )
            not_used , 
            @ASN1EnumItem ( name = "delinquent-account", hasTag = true , tag = 1 )
            delinquent_account , 
            @ASN1EnumItem ( name = "invalid-serial-number", hasTag = true , tag = 2 )
            invalid_serial_number , 
            @ASN1EnumItem ( name = "stolen-unit", hasTag = true , tag = 3 )
            stolen_unit , 
            @ASN1EnumItem ( name = "duplicate-unit", hasTag = true , tag = 4 )
            duplicate_unit , 
            @ASN1EnumItem ( name = "unassigned-directory-number", hasTag = true , tag = 5 )
            unassigned_directory_number , 
            @ASN1EnumItem ( name = "unspecified", hasTag = true , tag = 6 )
            unspecified , 
            @ASN1EnumItem ( name = "multiple-access", hasTag = true , tag = 7 )
            multiple_access , 
            @ASN1EnumItem ( name = "not-Authorized-for-the-MSC", hasTag = true , tag = 8 )
            not_Authorized_for_the_MSC , 
            @ASN1EnumItem ( name = "missing-authentication-parameters", hasTag = true , tag = 9 )
            missing_authentication_parameters , 
            @ASN1EnumItem ( name = "terminalType-mismatch", hasTag = true , tag = 10 )
            terminalType_mismatch , 
            @ASN1EnumItem ( name = "requested-Service-Code-Not-Supported", hasTag = true , tag = 11 )
            requested_Service_Code_Not_Supported , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AuthorizationDenied.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            