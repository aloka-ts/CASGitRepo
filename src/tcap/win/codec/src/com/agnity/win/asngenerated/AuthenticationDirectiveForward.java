
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "AuthenticationDirectiveForward" )
    public class AuthenticationDirectiveForward implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "AuthenticationDirectiveForward" , isSet = true )
       public static class AuthenticationDirectiveForwardSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "interMSCCircuitID", isOptional =  false , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private InterMSCCircuitID interMSCCircuitID = null;
                
  
        @ASN1Element ( name = "mobileIdentificationNumber", isOptional =  false , hasTag =  true, tag = 8 , hasDefaultValue =  false  )
    
	private MobileIdentificationNumber mobileIdentificationNumber = null;
                
  
        @ASN1Element ( name = "authenticationResponseUniqueChallenge", isOptional =  true , hasTag =  true, tag = 37 , hasDefaultValue =  false  )
    
	private AuthenticationResponseUniqueChallenge authenticationResponseUniqueChallenge = null;
                
  
        @ASN1Element ( name = "randomVariableUniqueChallenge", isOptional =  true , hasTag =  true, tag = 43 , hasDefaultValue =  false  )
    
	private RandomVariableUniqueChallenge randomVariableUniqueChallenge = null;
                
  
        @ASN1Element ( name = "updateCount", isOptional =  true , hasTag =  true, tag = 51 , hasDefaultValue =  false  )
    
	private UpdateCount updateCount = null;
                
  
        
        public InterMSCCircuitID getInterMSCCircuitID () {
            return this.interMSCCircuitID;
        }

        

        public void setInterMSCCircuitID (InterMSCCircuitID value) {
            this.interMSCCircuitID = value;
        }
        
  
        
        public MobileIdentificationNumber getMobileIdentificationNumber () {
            return this.mobileIdentificationNumber;
        }

        

        public void setMobileIdentificationNumber (MobileIdentificationNumber value) {
            this.mobileIdentificationNumber = value;
        }
        
  
        
        public AuthenticationResponseUniqueChallenge getAuthenticationResponseUniqueChallenge () {
            return this.authenticationResponseUniqueChallenge;
        }

        
        public boolean isAuthenticationResponseUniqueChallengePresent () {
            return this.authenticationResponseUniqueChallenge != null;
        }
        

        public void setAuthenticationResponseUniqueChallenge (AuthenticationResponseUniqueChallenge value) {
            this.authenticationResponseUniqueChallenge = value;
        }
        
  
        
        public RandomVariableUniqueChallenge getRandomVariableUniqueChallenge () {
            return this.randomVariableUniqueChallenge;
        }

        
        public boolean isRandomVariableUniqueChallengePresent () {
            return this.randomVariableUniqueChallenge != null;
        }
        

        public void setRandomVariableUniqueChallenge (RandomVariableUniqueChallenge value) {
            this.randomVariableUniqueChallenge = value;
        }
        
  
        
        public UpdateCount getUpdateCount () {
            return this.updateCount;
        }

        
        public boolean isUpdateCountPresent () {
            return this.updateCount != null;
        }
        

        public void setUpdateCount (UpdateCount value) {
            this.updateCount = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_AuthenticationDirectiveForwardSequenceType;
        }

       private static IASN1PreparedElementData preparedData_AuthenticationDirectiveForwardSequenceType = CoderFactory.getInstance().newPreparedElementData(AuthenticationDirectiveForwardSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "AuthenticationDirectiveForward", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private AuthenticationDirectiveForwardSequenceType  value;        

        
        
        public AuthenticationDirectiveForward () {
        }
        
        
        
        public void setValue(AuthenticationDirectiveForwardSequenceType value) {
            this.value = value;
        }
        
        
        
        public AuthenticationDirectiveForwardSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AuthenticationDirectiveForward.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            