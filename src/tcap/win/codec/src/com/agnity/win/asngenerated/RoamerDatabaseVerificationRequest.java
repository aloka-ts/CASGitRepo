
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "RoamerDatabaseVerificationRequest" )
    public class RoamerDatabaseVerificationRequest implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "RoamerDatabaseVerificationRequest" , isSet = true )
       public static class RoamerDatabaseVerificationRequestSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "invokingNEType", isOptional =  true , hasTag =  true, tag = 353 , hasDefaultValue =  false  )
    
	private InvokingNEType invokingNEType = null;
                
  
        @ASN1Element ( name = "mobileDirectoryNumber", isOptional =  true , hasTag =  true, tag = 93 , hasDefaultValue =  false  )
    
	private MobileDirectoryNumber mobileDirectoryNumber = null;
                
  
        @ASN1Element ( name = "mscid", isOptional =  true , hasTag =  true, tag = 21 , hasDefaultValue =  false  )
    
	private MSCID mscid = null;
                
  
        @ASN1Element ( name = "msid", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private MSID msid = null;
                
  
        @ASN1Element ( name = "range", isOptional =  true , hasTag =  true, tag = 352 , hasDefaultValue =  false  )
    
	private Range range = null;
                
  
        
        public InvokingNEType getInvokingNEType () {
            return this.invokingNEType;
        }

        
        public boolean isInvokingNETypePresent () {
            return this.invokingNEType != null;
        }
        

        public void setInvokingNEType (InvokingNEType value) {
            this.invokingNEType = value;
        }
        
  
        
        public MobileDirectoryNumber getMobileDirectoryNumber () {
            return this.mobileDirectoryNumber;
        }

        
        public boolean isMobileDirectoryNumberPresent () {
            return this.mobileDirectoryNumber != null;
        }
        

        public void setMobileDirectoryNumber (MobileDirectoryNumber value) {
            this.mobileDirectoryNumber = value;
        }
        
  
        
        public MSCID getMscid () {
            return this.mscid;
        }

        
        public boolean isMscidPresent () {
            return this.mscid != null;
        }
        

        public void setMscid (MSCID value) {
            this.mscid = value;
        }
        
  
        
        public MSID getMsid () {
            return this.msid;
        }

        
        public boolean isMsidPresent () {
            return this.msid != null;
        }
        

        public void setMsid (MSID value) {
            this.msid = value;
        }
        
  
        
        public Range getRange () {
            return this.range;
        }

        
        public boolean isRangePresent () {
            return this.range != null;
        }
        

        public void setRange (Range value) {
            this.range = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_RoamerDatabaseVerificationRequestSequenceType;
        }

       private static IASN1PreparedElementData preparedData_RoamerDatabaseVerificationRequestSequenceType = CoderFactory.getInstance().newPreparedElementData(RoamerDatabaseVerificationRequestSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "RoamerDatabaseVerificationRequest", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private RoamerDatabaseVerificationRequestSequenceType  value;        

        
        
        public RoamerDatabaseVerificationRequest () {
        }
        
        
        
        public void setValue(RoamerDatabaseVerificationRequestSequenceType value) {
            this.value = value;
        }
        
        
        
        public RoamerDatabaseVerificationRequestSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(RoamerDatabaseVerificationRequest.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            