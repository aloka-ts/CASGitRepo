
package com.agnity.win.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "InterSystemPage2Res" )
    public class InterSystemPage2Res implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "InterSystemPage2Res" , isSet = true )
       public static class InterSystemPage2ResSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "accessDeniedReason", isOptional =  true , hasTag =  true, tag = 20 , hasDefaultValue =  false  )
    
	private AccessDeniedReason accessDeniedReason = null;
                
  
        @ASN1Element ( name = "authenticationResponseBaseStation", isOptional =  false , hasTag =  true, tag = 36 , hasDefaultValue =  false  )
    
	private AuthenticationResponseBaseStation authenticationResponseBaseStation = null;
                
  
        @ASN1Element ( name = "callHistoryCount", isOptional =  true , hasTag =  true, tag = 38 , hasDefaultValue =  false  )
    
	private CallHistoryCount callHistoryCount = null;
                
  
        @ASN1Element ( name = "cdmaServiceOption", isOptional =  true , hasTag =  true, tag = 175 , hasDefaultValue =  false  )
    
	private CDMAServiceOption cdmaServiceOption = null;
                
  
        @ASN1Element ( name = "randc", isOptional =  true , hasTag =  true, tag = 67 , hasDefaultValue =  false  )
    
	private RANDC randc = null;
                
  
        @ASN1Element ( name = "randomVariableBaseStation", isOptional =  false , hasTag =  true, tag = 41 , hasDefaultValue =  false  )
    
	private RandomVariableBaseStation randomVariableBaseStation = null;
                
  
        @ASN1Element ( name = "systemAccessType", isOptional =  false , hasTag =  true, tag = 34 , hasDefaultValue =  false  )
    
	private SystemAccessType systemAccessType = null;
                
  
        @ASN1Element ( name = "systemCapabilities", isOptional =  true , hasTag =  true, tag = 49 , hasDefaultValue =  false  )
    
	private SystemCapabilities systemCapabilities = null;
                
  
        @ASN1Element ( name = "tdmaDataMode", isOptional =  true , hasTag =  true, tag = 222 , hasDefaultValue =  false  )
    
	private TDMADataMode tdmaDataMode = null;
                
  
        @ASN1Element ( name = "tdmaServiceCode", isOptional =  true , hasTag =  true, tag = 178 , hasDefaultValue =  false  )
    
	private TDMAServiceCode tdmaServiceCode = null;
                
  
        @ASN1Element ( name = "terminalType", isOptional =  true , hasTag =  true, tag = 47 , hasDefaultValue =  false  )
    
	private TerminalType terminalType = null;
                
  
        
        public AccessDeniedReason getAccessDeniedReason () {
            return this.accessDeniedReason;
        }

        
        public boolean isAccessDeniedReasonPresent () {
            return this.accessDeniedReason != null;
        }
        

        public void setAccessDeniedReason (AccessDeniedReason value) {
            this.accessDeniedReason = value;
        }
        
  
        
        public AuthenticationResponseBaseStation getAuthenticationResponseBaseStation () {
            return this.authenticationResponseBaseStation;
        }

        

        public void setAuthenticationResponseBaseStation (AuthenticationResponseBaseStation value) {
            this.authenticationResponseBaseStation = value;
        }
        
  
        
        public CallHistoryCount getCallHistoryCount () {
            return this.callHistoryCount;
        }

        
        public boolean isCallHistoryCountPresent () {
            return this.callHistoryCount != null;
        }
        

        public void setCallHistoryCount (CallHistoryCount value) {
            this.callHistoryCount = value;
        }
        
  
        
        public CDMAServiceOption getCdmaServiceOption () {
            return this.cdmaServiceOption;
        }

        
        public boolean isCdmaServiceOptionPresent () {
            return this.cdmaServiceOption != null;
        }
        

        public void setCdmaServiceOption (CDMAServiceOption value) {
            this.cdmaServiceOption = value;
        }
        
  
        
        public RANDC getRandc () {
            return this.randc;
        }

        
        public boolean isRandcPresent () {
            return this.randc != null;
        }
        

        public void setRandc (RANDC value) {
            this.randc = value;
        }
        
  
        
        public RandomVariableBaseStation getRandomVariableBaseStation () {
            return this.randomVariableBaseStation;
        }

        

        public void setRandomVariableBaseStation (RandomVariableBaseStation value) {
            this.randomVariableBaseStation = value;
        }
        
  
        
        public SystemAccessType getSystemAccessType () {
            return this.systemAccessType;
        }

        

        public void setSystemAccessType (SystemAccessType value) {
            this.systemAccessType = value;
        }
        
  
        
        public SystemCapabilities getSystemCapabilities () {
            return this.systemCapabilities;
        }

        
        public boolean isSystemCapabilitiesPresent () {
            return this.systemCapabilities != null;
        }
        

        public void setSystemCapabilities (SystemCapabilities value) {
            this.systemCapabilities = value;
        }
        
  
        
        public TDMADataMode getTdmaDataMode () {
            return this.tdmaDataMode;
        }

        
        public boolean isTdmaDataModePresent () {
            return this.tdmaDataMode != null;
        }
        

        public void setTdmaDataMode (TDMADataMode value) {
            this.tdmaDataMode = value;
        }
        
  
        
        public TDMAServiceCode getTdmaServiceCode () {
            return this.tdmaServiceCode;
        }

        
        public boolean isTdmaServiceCodePresent () {
            return this.tdmaServiceCode != null;
        }
        

        public void setTdmaServiceCode (TDMAServiceCode value) {
            this.tdmaServiceCode = value;
        }
        
  
        
        public TerminalType getTerminalType () {
            return this.terminalType;
        }

        
        public boolean isTerminalTypePresent () {
            return this.terminalType != null;
        }
        

        public void setTerminalType (TerminalType value) {
            this.terminalType = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_InterSystemPage2ResSequenceType;
        }

       private static IASN1PreparedElementData preparedData_InterSystemPage2ResSequenceType = CoderFactory.getInstance().newPreparedElementData(InterSystemPage2ResSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "InterSystemPage2Res", isOptional =  false , hasTag =  true, tag = 18, 
        tagClass =  TagClass.Private  , hasDefaultValue =  false  )
    
        private InterSystemPage2ResSequenceType  value;        

        
        
        public InterSystemPage2Res () {
        }
        
        
        
        public void setValue(InterSystemPage2ResSequenceType value) {
            this.value = value;
        }
        
        
        
        public InterSystemPage2ResSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(InterSystemPage2Res.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            