
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ControlConditionByCallParty", isSet = false )
    public class ControlConditionByCallParty implements IASN1PreparedElement {
            @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "endOfMessageSendingDigit", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private byte[] endOfMessageSendingDigit = null;
                
  @ASN1OctetString( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "replayDigit", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private byte[] replayDigit = null;
                
  
        
        public byte[] getEndOfMessageSendingDigit () {
            return this.endOfMessageSendingDigit;
        }

        
        public boolean isEndOfMessageSendingDigitPresent () {
            return this.endOfMessageSendingDigit != null;
        }
        

        public void setEndOfMessageSendingDigit (byte[] value) {
            this.endOfMessageSendingDigit = value;
        }
        
  
        
        public byte[] getReplayDigit () {
            return this.replayDigit;
        }

        
        public boolean isReplayDigitPresent () {
            return this.replayDigit != null;
        }
        

        public void setReplayDigit (byte[] value) {
            this.replayDigit = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ControlConditionByCallParty.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            