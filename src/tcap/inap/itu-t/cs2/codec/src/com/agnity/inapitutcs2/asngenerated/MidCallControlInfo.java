
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "MidCallControlInfo" )
    public class MidCallControlInfo implements IASN1PreparedElement {
                
            

       @ASN1PreparedElement
       @ASN1Sequence ( name = "MidCallControlInfo" , isSet = false )
       public static class MidCallControlInfoSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "midCallInfoType", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private MidCallInfoType midCallInfoType = null;
                
  

    @ASN1PreparedElement
    @ASN1Enum (
        name = "MidCallReportTypeEnumType"
    )
    public static class MidCallReportTypeEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "inMonitoringState", hasTag = true , tag = 0 )
            inMonitoringState , 
            @ASN1EnumItem ( name = "inAnyState", hasTag = true , tag = 1 )
            inAnyState
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MidCallReportTypeEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "midCallReportType", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  true  )
    
	private MidCallReportTypeEnumType midCallReportType = null;
                
  
        
        public MidCallInfoType getMidCallInfoType () {
            return this.midCallInfoType;
        }

        

        public void setMidCallInfoType (MidCallInfoType value) {
            this.midCallInfoType = value;
        }
        
  
        
        public MidCallReportTypeEnumType getMidCallReportType () {
            return this.midCallReportType;
        }

        

        public void setMidCallReportType (MidCallReportTypeEnumType value) {
            this.midCallReportType = value;
        }
        
  
                
                
        public void initWithDefaults() {
            MidCallReportTypeEnumType param_MidCallReportType =         
            null;
        setMidCallReportType(param_MidCallReportType);
    
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_MidCallControlInfoSequenceType;
        }

       private static IASN1PreparedElementData preparedData_MidCallControlInfoSequenceType = CoderFactory.getInstance().newPreparedElementData(MidCallControlInfoSequenceType.class);
                
       }

       
                @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 5L 
		
	   )
	   
            @ASN1SequenceOf( name = "MidCallControlInfo" , isSetOf = false)
	    private java.util.Collection<MidCallControlInfoSequenceType> value = null; 
    
            public MidCallControlInfo () {
            }
        
            public MidCallControlInfo ( java.util.Collection<MidCallControlInfoSequenceType> value ) {
                setValue(value);
            }
                        
            public void setValue(java.util.Collection<MidCallControlInfoSequenceType> value) {
                this.value = value;
            }
            
            public java.util.Collection<MidCallControlInfoSequenceType> getValue() {
                return this.value;
            }            
            
            public void initValue() {
                setValue(new java.util.LinkedList<MidCallControlInfoSequenceType>()); 
            }
            
            public void add(MidCallControlInfoSequenceType item) {
                value.add(item);
            }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MidCallControlInfo.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            
