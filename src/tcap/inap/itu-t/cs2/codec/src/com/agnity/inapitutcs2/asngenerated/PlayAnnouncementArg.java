
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "PlayAnnouncementArg", isSet = false )
    public class PlayAnnouncementArg implements IASN1PreparedElement {
            
        @ASN1Element ( name = "informationToSend", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private InformationToSend informationToSend = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "disconnectFromIPForbidden", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  true  )
    
	private Boolean disconnectFromIPForbidden = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "requestAnnouncementComplete", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  true  )
    
	private Boolean requestAnnouncementComplete = null;
                
  
@ASN1SequenceOf( name = "extensions", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 5L
		
	   )
	   
        @ASN1Element ( name = "extensions", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private java.util.Collection<ExtensionField>  extensions = null;
                
  
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "connectedParty" )
    public static class ConnectedPartyChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "legID", isOptional =  false , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private LegID legID = null;
                
  
        @ASN1Element ( name = "callSegmentID", isOptional =  false , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private CallSegmentID callSegmentID = null;
                
  
        
        public LegID getLegID () {
            return this.legID;
        }

        public boolean isLegIDSelected () {
            return this.legID != null;
        }

        private void setLegID (LegID value) {
            this.legID = value;
        }

        
        public void selectLegID (LegID value) {
            this.legID = value;
            
                    setCallSegmentID(null);
                            
        }

        
  
        
        public CallSegmentID getCallSegmentID () {
            return this.callSegmentID;
        }

        public boolean isCallSegmentIDSelected () {
            return this.callSegmentID != null;
        }

        private void setCallSegmentID (CallSegmentID value) {
            this.callSegmentID = value;
        }

        
        public void selectCallSegmentID (CallSegmentID value) {
            this.callSegmentID = value;
            
                    setLegID(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ConnectedPartyChoiceType;
        }

        private static IASN1PreparedElementData preparedData_ConnectedPartyChoiceType = CoderFactory.getInstance().newPreparedElementData(ConnectedPartyChoiceType.class);

    }

                
        @ASN1Element ( name = "connectedParty", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ConnectedPartyChoiceType connectedParty = null;
                
  
        
        public InformationToSend getInformationToSend () {
            return this.informationToSend;
        }

        

        public void setInformationToSend (InformationToSend value) {
            this.informationToSend = value;
        }
        
  
        
        public Boolean getDisconnectFromIPForbidden () {
            return this.disconnectFromIPForbidden;
        }

        

        public void setDisconnectFromIPForbidden (Boolean value) {
            this.disconnectFromIPForbidden = value;
        }
        
  
        
        public Boolean getRequestAnnouncementComplete () {
            return this.requestAnnouncementComplete;
        }

        

        public void setRequestAnnouncementComplete (Boolean value) {
            this.requestAnnouncementComplete = value;
        }
        
  
        
        public java.util.Collection<ExtensionField>  getExtensions () {
            return this.extensions;
        }

        
        public boolean isExtensionsPresent () {
            return this.extensions != null;
        }
        

        public void setExtensions (java.util.Collection<ExtensionField>  value) {
            this.extensions = value;
        }
        
  
        
        public ConnectedPartyChoiceType getConnectedParty () {
            return this.connectedParty;
        }

        
        public boolean isConnectedPartyPresent () {
            return this.connectedParty != null;
        }
        

        public void setConnectedParty (ConnectedPartyChoiceType value) {
            this.connectedParty = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            Boolean param_DisconnectFromIPForbidden =         
            null;
        setDisconnectFromIPForbidden(param_DisconnectFromIPForbidden);
    Boolean param_RequestAnnouncementComplete =         
            null;
        setRequestAnnouncementComplete(param_RequestAnnouncementComplete);
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PlayAnnouncementArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            