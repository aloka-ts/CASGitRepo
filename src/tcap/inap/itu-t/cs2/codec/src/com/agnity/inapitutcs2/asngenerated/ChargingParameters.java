
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ChargingParameters", isSet = false )
    public class ChargingParameters implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "unitsPerInterval", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private Integer unitsPerInterval = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "timePerInterval", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private Integer timePerInterval = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "scalingFactor", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private Integer scalingFactor = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 2L 
		
	   )
	   
        @ASN1Element ( name = "initialUnitIncrement", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private Integer initialUnitIncrement = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "unitsPerDataInterval", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private Integer unitsPerDataInterval = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "segmentsPerDataInterval", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private Integer segmentsPerDataInterval = null;
                
  @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 0L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "initialTimeInterval", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private Integer initialTimeInterval = null;
                
  
        
        public Integer getUnitsPerInterval () {
            return this.unitsPerInterval;
        }

        

        public void setUnitsPerInterval (Integer value) {
            this.unitsPerInterval = value;
        }
        
  
        
        public Integer getTimePerInterval () {
            return this.timePerInterval;
        }

        

        public void setTimePerInterval (Integer value) {
            this.timePerInterval = value;
        }
        
  
        
        public Integer getScalingFactor () {
            return this.scalingFactor;
        }

        

        public void setScalingFactor (Integer value) {
            this.scalingFactor = value;
        }
        
  
        
        public Integer getInitialUnitIncrement () {
            return this.initialUnitIncrement;
        }

        
        public boolean isInitialUnitIncrementPresent () {
            return this.initialUnitIncrement != null;
        }
        

        public void setInitialUnitIncrement (Integer value) {
            this.initialUnitIncrement = value;
        }
        
  
        
        public Integer getUnitsPerDataInterval () {
            return this.unitsPerDataInterval;
        }

        
        public boolean isUnitsPerDataIntervalPresent () {
            return this.unitsPerDataInterval != null;
        }
        

        public void setUnitsPerDataInterval (Integer value) {
            this.unitsPerDataInterval = value;
        }
        
  
        
        public Integer getSegmentsPerDataInterval () {
            return this.segmentsPerDataInterval;
        }

        
        public boolean isSegmentsPerDataIntervalPresent () {
            return this.segmentsPerDataInterval != null;
        }
        

        public void setSegmentsPerDataInterval (Integer value) {
            this.segmentsPerDataInterval = value;
        }
        
  
        
        public Integer getInitialTimeInterval () {
            return this.initialTimeInterval;
        }

        
        public boolean isInitialTimeIntervalPresent () {
            return this.initialTimeInterval != null;
        }
        

        public void setInitialTimeInterval (Integer value) {
            this.initialTimeInterval = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ChargingParameters.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            