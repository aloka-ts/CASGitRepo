
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "MoveCallSegmentsArg", isSet = false )
    public class MoveCallSegmentsArg implements IASN1PreparedElement {
            
        @ASN1Element ( name = "targetCallSegmentAssociation", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private CSAID targetCallSegmentAssociation = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "callSegments" , isSet = false )
       public static class CallSegmentsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "sourceCallSegment", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  true  )
    
	private CallSegmentID sourceCallSegment = null;
                
  
        @ASN1Element ( name = "newCallSegment", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private CallSegmentID newCallSegment = null;
                
  
        
        public CallSegmentID getSourceCallSegment () {
            return this.sourceCallSegment;
        }

        

        public void setSourceCallSegment (CallSegmentID value) {
            this.sourceCallSegment = value;
        }
        
  
        
        public CallSegmentID getNewCallSegment () {
            return this.newCallSegment;
        }

        

        public void setNewCallSegment (CallSegmentID value) {
            this.newCallSegment = value;
        }
        
  
                
                
        public void initWithDefaults() {
            CallSegmentID param_SourceCallSegment =         
            null;
        setSourceCallSegment(param_SourceCallSegment);
    
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_CallSegmentsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_CallSegmentsSequenceType = CoderFactory.getInstance().newPreparedElementData(CallSegmentsSequenceType.class);
                
       }

       
                
@ASN1SequenceOf( name = "callSegments", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 4L 
		
	   )
	   
        @ASN1Element ( name = "callSegments", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private java.util.Collection<CallSegmentsSequenceType>  callSegments = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "legs" , isSet = false )
       public static class LegsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "sourceLeg", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private LegID sourceLeg = null;
                
  
        @ASN1Element ( name = "newLeg", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private LegID newLeg = null;
                
  
        
        public LegID getSourceLeg () {
            return this.sourceLeg;
        }

        

        public void setSourceLeg (LegID value) {
            this.sourceLeg = value;
        }
        
  
        
        public LegID getNewLeg () {
            return this.newLeg;
        }

        

        public void setNewLeg (LegID value) {
            this.newLeg = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_LegsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_LegsSequenceType = CoderFactory.getInstance().newPreparedElementData(LegsSequenceType.class);
                
       }

       
                
@ASN1SequenceOf( name = "legs", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 4L 
		
	   )
	   
        @ASN1Element ( name = "legs", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private java.util.Collection<LegsSequenceType>  legs = null;
                
  
@ASN1SequenceOf( name = "extensions", isSetOf = false ) 

    @ASN1ValueRangeConstraint ( 
		
		min = 1L, 
		
		max = 5L 
		
	   )
	   
        @ASN1Element ( name = "extensions", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private java.util.Collection<ExtensionField>  extensions = null;
                
  
        
        public CSAID getTargetCallSegmentAssociation () {
            return this.targetCallSegmentAssociation;
        }

        

        public void setTargetCallSegmentAssociation (CSAID value) {
            this.targetCallSegmentAssociation = value;
        }
        
  
        
        public java.util.Collection<CallSegmentsSequenceType>  getCallSegments () {
            return this.callSegments;
        }

        

        public void setCallSegments (java.util.Collection<CallSegmentsSequenceType>  value) {
            this.callSegments = value;
        }
        
  
        
        public java.util.Collection<LegsSequenceType>  getLegs () {
            return this.legs;
        }

        

        public void setLegs (java.util.Collection<LegsSequenceType>  value) {
            this.legs = value;
        }
        
  
        
        public java.util.Collection<ExtensionField>  getExtensions () {
            return this.extensions;
        }

        
        public boolean isExtensionsPresent () {
            return this.extensions != null;
        }
        

        public void setExtensions (java.util.Collection<ExtensionField>  value) {
            this.extensions = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(MoveCallSegmentsArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            
