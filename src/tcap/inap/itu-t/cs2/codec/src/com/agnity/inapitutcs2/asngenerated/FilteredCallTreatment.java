
package com.agnity.inapitutcs2.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "FilteredCallTreatment", isSet = false )
    public class FilteredCallTreatment implements IASN1PreparedElement {
            
        @ASN1Element ( name = "sFBillingChargingCharacteristics", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private SFBillingChargingCharacteristics sFBillingChargingCharacteristics = null;
                
  
        @ASN1Element ( name = "informationToSend", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private InformationToSend informationToSend = null;
                
  
        @ASN1Element ( name = "maximumNumberOfCounters", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private MaximumNumberOfCounters maximumNumberOfCounters = null;
                
  
        @ASN1Element ( name = "releaseCause", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private Cause releaseCause = null;
                
  
        
        public SFBillingChargingCharacteristics getSFBillingChargingCharacteristics () {
            return this.sFBillingChargingCharacteristics;
        }

        

        public void setSFBillingChargingCharacteristics (SFBillingChargingCharacteristics value) {
            this.sFBillingChargingCharacteristics = value;
        }
        
  
        
        public InformationToSend getInformationToSend () {
            return this.informationToSend;
        }

        
        public boolean isInformationToSendPresent () {
            return this.informationToSend != null;
        }
        

        public void setInformationToSend (InformationToSend value) {
            this.informationToSend = value;
        }
        
  
        
        public MaximumNumberOfCounters getMaximumNumberOfCounters () {
            return this.maximumNumberOfCounters;
        }

        
        public boolean isMaximumNumberOfCountersPresent () {
            return this.maximumNumberOfCounters != null;
        }
        

        public void setMaximumNumberOfCounters (MaximumNumberOfCounters value) {
            this.maximumNumberOfCounters = value;
        }
        
  
        
        public Cause getReleaseCause () {
            return this.releaseCause;
        }

        
        public boolean isReleaseCausePresent () {
            return this.releaseCause != null;
        }
        

        public void setReleaseCause (Cause value) {
            this.releaseCause = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(FilteredCallTreatment.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            