
package com.genband.inap.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Choice ( name = "ReleaseCallArg" )
    public class ReleaseCallArg implements IASN1PreparedElement {
            
        @ASN1Element ( name = "initialCallSegment", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Cause initialCallSegment = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "associatedCallSegment" , isSet = false )
       public static class AssociatedCallSegmentSequenceType implements IASN1PreparedElement {
                @ASN1Integer( name = "" )
    @ASN1ValueRangeConstraint ( 
		
		min = 2L, 
		
		max = 4L 
		
	   )
	   
        @ASN1Element ( name = "callSegment", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private Integer callSegment = null;
                
  
        @ASN1Element ( name = "releaseCause", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private Cause releaseCause = null;
                
  
        
        public Integer getCallSegment () {
            return this.callSegment;
        }

        

        public void setCallSegment (Integer value) {
            this.callSegment = value;
        }
        
  
        
        public Cause getReleaseCause () {
            return this.releaseCause;
        }

        
        public boolean isReleaseCausePresent () {
            return this.releaseCause != null;
        }
        

        public void setReleaseCause (Cause value) {
            this.releaseCause = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_AssociatedCallSegmentSequenceType;
        }

       private static IASN1PreparedElementData preparedData_AssociatedCallSegmentSequenceType = CoderFactory.getInstance().newPreparedElementData(AssociatedCallSegmentSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "associatedCallSegment", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private AssociatedCallSegmentSequenceType associatedCallSegment = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "allCallSegments" , isSet = false )
       public static class AllCallSegmentsSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "releaseCause", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private Cause releaseCause = null;
                
  
        
        public Cause getReleaseCause () {
            return this.releaseCause;
        }

        
        public boolean isReleaseCausePresent () {
            return this.releaseCause != null;
        }
        

        public void setReleaseCause (Cause value) {
            this.releaseCause = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_AllCallSegmentsSequenceType;
        }

       private static IASN1PreparedElementData preparedData_AllCallSegmentsSequenceType = CoderFactory.getInstance().newPreparedElementData(AllCallSegmentsSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "allCallSegments", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private AllCallSegmentsSequenceType allCallSegments = null;
                
  
        
        public Cause getInitialCallSegment () {
            return this.initialCallSegment;
        }

        public boolean isInitialCallSegmentSelected () {
            return this.initialCallSegment != null;
        }

        private void setInitialCallSegment (Cause value) {
            this.initialCallSegment = value;
        }

        
        public void selectInitialCallSegment (Cause value) {
            this.initialCallSegment = value;
            
                    setAssociatedCallSegment(null);
                
                    setAllCallSegments(null);
                            
        }

        
  
        
        public AssociatedCallSegmentSequenceType getAssociatedCallSegment () {
            return this.associatedCallSegment;
        }

        public boolean isAssociatedCallSegmentSelected () {
            return this.associatedCallSegment != null;
        }

        private void setAssociatedCallSegment (AssociatedCallSegmentSequenceType value) {
            this.associatedCallSegment = value;
        }

        
        public void selectAssociatedCallSegment (AssociatedCallSegmentSequenceType value) {
            this.associatedCallSegment = value;
            
                    setInitialCallSegment(null);
                
                    setAllCallSegments(null);
                            
        }

        
  
        
        public AllCallSegmentsSequenceType getAllCallSegments () {
            return this.allCallSegments;
        }

        public boolean isAllCallSegmentsSelected () {
            return this.allCallSegments != null;
        }

        private void setAllCallSegments (AllCallSegmentsSequenceType value) {
            this.allCallSegments = value;
        }

        
        public void selectAllCallSegments (AllCallSegmentsSequenceType value) {
            this.allCallSegments = value;
            
                    setInitialCallSegment(null);
                
                    setAssociatedCallSegment(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ReleaseCallArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }


    }
            