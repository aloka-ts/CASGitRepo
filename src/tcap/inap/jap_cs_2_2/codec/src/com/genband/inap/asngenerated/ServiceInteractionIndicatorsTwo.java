
package com.genband.inap.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "ServiceInteractionIndicatorsTwo", isSet = false )
    public class ServiceInteractionIndicatorsTwo implements IASN1PreparedElement {
            @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "allowedCdINNoPresentaionInd", isOptional =  true , hasTag =  true, tag = 7 , hasDefaultValue =  false  )
    
	private Boolean allowedCdINNoPresentaionInd = null;
                
  @ASN1Boolean( name = "" )
    
        @ASN1Element ( name = "calledINNumberOverriding", isOptional =  true , hasTag =  true, tag = 11 , hasDefaultValue =  false  )
    
	private Boolean calledINNumberOverriding = null;
                
  

       @ASN1PreparedElement
       @ASN1Sequence ( name = "redirectServiceTreatmentInd" , isSet = false )
       public static class RedirectServiceTreatmentIndSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "redirectReason", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private RedirectReason redirectReason = null;
                
  
        
        public RedirectReason getRedirectReason () {
            return this.redirectReason;
        }

        
        public boolean isRedirectReasonPresent () {
            return this.redirectReason != null;
        }
        

        public void setRedirectReason (RedirectReason value) {
            this.redirectReason = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_RedirectServiceTreatmentIndSequenceType;
        }

       private static IASN1PreparedElementData preparedData_RedirectServiceTreatmentIndSequenceType = CoderFactory.getInstance().newPreparedElementData(RedirectServiceTreatmentIndSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "redirectServiceTreatmentInd", isOptional =  true , hasTag =  true, tag = 12 , hasDefaultValue =  false  )
    
	private RedirectServiceTreatmentIndSequenceType redirectServiceTreatmentInd = null;
                
  
        
        public Boolean getAllowedCdINNoPresentaionInd () {
            return this.allowedCdINNoPresentaionInd;
        }

        
        public boolean isAllowedCdINNoPresentaionIndPresent () {
            return this.allowedCdINNoPresentaionInd != null;
        }
        

        public void setAllowedCdINNoPresentaionInd (Boolean value) {
            this.allowedCdINNoPresentaionInd = value;
        }
        
  
        
        public Boolean getCalledINNumberOverriding () {
            return this.calledINNumberOverriding;
        }

        
        public boolean isCalledINNumberOverridingPresent () {
            return this.calledINNumberOverriding != null;
        }
        

        public void setCalledINNumberOverriding (Boolean value) {
            this.calledINNumberOverriding = value;
        }
        
  
        
        public RedirectServiceTreatmentIndSequenceType getRedirectServiceTreatmentInd () {
            return this.redirectServiceTreatmentInd;
        }

        
        public boolean isRedirectServiceTreatmentIndPresent () {
            return this.redirectServiceTreatmentInd != null;
        }
        

        public void setRedirectServiceTreatmentInd (RedirectServiceTreatmentIndSequenceType value) {
            this.redirectServiceTreatmentInd = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ServiceInteractionIndicatorsTwo.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            