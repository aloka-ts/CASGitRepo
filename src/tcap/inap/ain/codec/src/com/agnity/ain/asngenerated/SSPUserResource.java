
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "SSPUserResource" )
    public class SSPUserResource implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "SSPUserResource" , isSet = false )
       public static class SSPUserResourceSequenceType implements IASN1PreparedElement {
                
        @ASN1Element ( name = "sSPUserResourceID", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private SSPUserResourceID sSPUserResourceID = null;
                
  
        @ASN1Element ( name = "serviceProviderID", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ServiceProviderID serviceProviderID = null;
                
  
        @ASN1Element ( name = "updateGroups", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private UpdateGroups updateGroups = null;
                
  
        @ASN1Element ( name = "oNoAnswerTimer", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ONoAnswerTimer oNoAnswerTimer = null;
                
  
        @ASN1Element ( name = "tNoAnswerTimer", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private TNoAnswerTimer tNoAnswerTimer = null;
                
  
        @ASN1Element ( name = "displayText", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private DisplayText displayText = null;
                
  
        @ASN1Element ( name = "dPConverter", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private DPConverter dPConverter = null;
                
  
        @ASN1Element ( name = "cancelInterdigitTimer", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private CancelInterdigitTimer cancelInterdigitTimer = null;
                
  
        
        public SSPUserResourceID getSSPUserResourceID () {
            return this.sSPUserResourceID;
        }

        

        public void setSSPUserResourceID (SSPUserResourceID value) {
            this.sSPUserResourceID = value;
        }
        
  
        
        public ServiceProviderID getServiceProviderID () {
            return this.serviceProviderID;
        }

        
        public boolean isServiceProviderIDPresent () {
            return this.serviceProviderID != null;
        }
        

        public void setServiceProviderID (ServiceProviderID value) {
            this.serviceProviderID = value;
        }
        
  
        
        public UpdateGroups getUpdateGroups () {
            return this.updateGroups;
        }

        
        public boolean isUpdateGroupsPresent () {
            return this.updateGroups != null;
        }
        

        public void setUpdateGroups (UpdateGroups value) {
            this.updateGroups = value;
        }
        
  
        
        public ONoAnswerTimer getONoAnswerTimer () {
            return this.oNoAnswerTimer;
        }

        
        public boolean isONoAnswerTimerPresent () {
            return this.oNoAnswerTimer != null;
        }
        

        public void setONoAnswerTimer (ONoAnswerTimer value) {
            this.oNoAnswerTimer = value;
        }
        
  
        
        public TNoAnswerTimer getTNoAnswerTimer () {
            return this.tNoAnswerTimer;
        }

        
        public boolean isTNoAnswerTimerPresent () {
            return this.tNoAnswerTimer != null;
        }
        

        public void setTNoAnswerTimer (TNoAnswerTimer value) {
            this.tNoAnswerTimer = value;
        }
        
  
        
        public DisplayText getDisplayText () {
            return this.displayText;
        }

        
        public boolean isDisplayTextPresent () {
            return this.displayText != null;
        }
        

        public void setDisplayText (DisplayText value) {
            this.displayText = value;
        }
        
  
        
        public DPConverter getDPConverter () {
            return this.dPConverter;
        }

        
        public boolean isDPConverterPresent () {
            return this.dPConverter != null;
        }
        

        public void setDPConverter (DPConverter value) {
            this.dPConverter = value;
        }
        
  
        
        public CancelInterdigitTimer getCancelInterdigitTimer () {
            return this.cancelInterdigitTimer;
        }

        
        public boolean isCancelInterdigitTimerPresent () {
            return this.cancelInterdigitTimer != null;
        }
        

        public void setCancelInterdigitTimer (CancelInterdigitTimer value) {
            this.cancelInterdigitTimer = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_SSPUserResourceSequenceType;
        }

       private static IASN1PreparedElementData preparedData_SSPUserResourceSequenceType = CoderFactory.getInstance().newPreparedElementData(SSPUserResourceSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "SSPUserResource", isOptional =  false , hasTag =  true, tag = 103 , hasDefaultValue =  false  )
    
        private SSPUserResourceSequenceType  value;        

        
        
        public SSPUserResource () {
        }
        
        
        
        public void setValue(SSPUserResourceSequenceType value) {
            this.value = value;
        }
        
        
        
        public SSPUserResourceSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(SSPUserResource.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            