
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "AMAMeasure" )
    public class AMAMeasure implements IASN1PreparedElement {
                
        

    @ASN1PreparedElement
    @ASN1Enum (
        name = "AMAMeasureEnumType"
    )
    public static class AMAMeasureEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "connectTimeRecordedDestinationSSP", hasTag = true , tag = 0 )
            connectTimeRecordedDestinationSSP , 
            @ASN1EnumItem ( name = "connectTimeRecordedDestinationSCP", hasTag = true , tag = 1 )
            connectTimeRecordedDestinationSCP , 
            @ASN1EnumItem ( name = "connectTimeNotRecorded", hasTag = true , tag = 2 )
            connectTimeNotRecorded , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AMAMeasureEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "AMAMeasure", isOptional =  false , hasTag =  true, tag = 71 , hasDefaultValue =  false  )
    
        private AMAMeasureEnumType  value;        

        
        
        public AMAMeasure () {
        }
        
        
        
        public void setValue(AMAMeasureEnumType value) {
            this.value = value;
        }
        
        
        
        public AMAMeasureEnumType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AMAMeasure.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            