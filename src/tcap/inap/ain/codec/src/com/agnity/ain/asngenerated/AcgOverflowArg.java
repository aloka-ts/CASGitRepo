
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "AcgOverflowArg", isSet = false )
    public class AcgOverflowArg implements IASN1PreparedElement {
            
        @ASN1Element ( name = "controlCauseIndicator", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ControlCauseIndicator controlCauseIndicator = null;
                
  
        @ASN1Element ( name = "translationType", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private TranslationType translationType = null;
                
  
        @ASN1Element ( name = "globalTitleAddress", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private GlobalTitleAddress globalTitleAddress = null;
                
  
        @ASN1Element ( name = "extensionParameter", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ExtensionParameter extensionParameter = null;
                
  
        
        public ControlCauseIndicator getControlCauseIndicator () {
            return this.controlCauseIndicator;
        }

        

        public void setControlCauseIndicator (ControlCauseIndicator value) {
            this.controlCauseIndicator = value;
        }
        
  
        
        public TranslationType getTranslationType () {
            return this.translationType;
        }

        

        public void setTranslationType (TranslationType value) {
            this.translationType = value;
        }
        
  
        
        public GlobalTitleAddress getGlobalTitleAddress () {
            return this.globalTitleAddress;
        }

        

        public void setGlobalTitleAddress (GlobalTitleAddress value) {
            this.globalTitleAddress = value;
        }
        
  
        
        public ExtensionParameter getExtensionParameter () {
            return this.extensionParameter;
        }

        
        public boolean isExtensionParameterPresent () {
            return this.extensionParameter != null;
        }
        

        public void setExtensionParameter (ExtensionParameter value) {
            this.extensionParameter = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AcgOverflowArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            