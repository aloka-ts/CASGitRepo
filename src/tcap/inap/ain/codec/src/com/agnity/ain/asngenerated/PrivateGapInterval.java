
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "PrivateGapInterval" )
    public class PrivateGapInterval implements IASN1PreparedElement {
                
        

    @ASN1PreparedElement
    @ASN1Enum (
        name = "PrivateGapIntervalEnumType"
    )
    public static class PrivateGapIntervalEnumType implements IASN1PreparedElement {        
        public enum EnumType {
            
            @ASN1EnumItem ( name = "no0Seconds", hasTag = true , tag = 0 )
            no0Seconds , 
            @ASN1EnumItem ( name = "no3Seconds", hasTag = true , tag = 1 )
            no3Seconds , 
            @ASN1EnumItem ( name = "no4Seconds", hasTag = true , tag = 2 )
            no4Seconds , 
            @ASN1EnumItem ( name = "no6Seconds", hasTag = true , tag = 3 )
            no6Seconds , 
            @ASN1EnumItem ( name = "no8Seconds", hasTag = true , tag = 4 )
            no8Seconds , 
            @ASN1EnumItem ( name = "no11Seconds", hasTag = true , tag = 5 )
            no11Seconds , 
            @ASN1EnumItem ( name = "no16Seconds", hasTag = true , tag = 6 )
            no16Seconds , 
            @ASN1EnumItem ( name = "no22Seconds", hasTag = true , tag = 7 )
            no22Seconds , 
            @ASN1EnumItem ( name = "no30Seconds", hasTag = true , tag = 8 )
            no30Seconds , 
            @ASN1EnumItem ( name = "no42Seconds", hasTag = true , tag = 9 )
            no42Seconds , 
            @ASN1EnumItem ( name = "no58Seconds", hasTag = true , tag = 10 )
            no58Seconds , 
            @ASN1EnumItem ( name = "no81Seconds", hasTag = true , tag = 11 )
            no81Seconds , 
            @ASN1EnumItem ( name = "no112Seconds", hasTag = true , tag = 12 )
            no112Seconds , 
            @ASN1EnumItem ( name = "no156Seconds", hasTag = true , tag = 13 )
            no156Seconds , 
            @ASN1EnumItem ( name = "no217Seconds", hasTag = true , tag = 14 )
            no217Seconds , 
            @ASN1EnumItem ( name = "no300Seconds", hasTag = true , tag = 15 )
            no300Seconds , 
            @ASN1EnumItem ( name = "removeGapControl", hasTag = true , tag = 16 )
            removeGapControl , 
            @ASN1EnumItem ( name = "no010Seconds", hasTag = true , tag = 17 )
            no010Seconds , 
            @ASN1EnumItem ( name = "no025Seconds", hasTag = true , tag = 18 )
            no025Seconds , 
            @ASN1EnumItem ( name = "no050Seconds", hasTag = true , tag = 19 )
            no050Seconds , 
            @ASN1EnumItem ( name = "no1Second", hasTag = true , tag = 20 )
            no1Second , 
            @ASN1EnumItem ( name = "no2Seconds", hasTag = true , tag = 21 )
            no2Seconds , 
        }
        
        private EnumType value;
        private Integer integerForm;
        
        public EnumType getValue() {
            return this.value;
        }
        
        public void setValue(EnumType value) {
            this.value = value;
        }
        
        public Integer getIntegerForm() {
            return integerForm;
        }
        
        public void setIntegerForm(Integer value) {
            integerForm = value;
        }

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PrivateGapIntervalEnumType.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

    }
                
        @ASN1Element ( name = "PrivateGapInterval", isOptional =  false , hasTag =  true, tag = 64 , hasDefaultValue =  false  )
    
        private PrivateGapIntervalEnumType  value;        

        
        
        public PrivateGapInterval () {
        }
        
        
        
        public void setValue(PrivateGapIntervalEnumType value) {
            this.value = value;
        }
        
        
        
        public PrivateGapIntervalEnumType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(PrivateGapInterval.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            