
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "ExtensionParameter" )
    public class ExtensionParameter implements IASN1PreparedElement {
                
        

       @ASN1PreparedElement
       @ASN1Sequence ( name = "ExtensionParameter" , isSet = false )
       public static class ExtensionParameterSequenceType implements IASN1PreparedElement {
                @ASN1ObjectIdentifier( name = "" )
    
        @ASN1Element ( name = "assignmentAuthority", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ObjectIdentifier assignmentAuthority = null;
                
  @ASN1Any( name = "" )
    
        @ASN1Element ( name = "parameters", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private byte[] parameters = null;
                
  
        
        public ObjectIdentifier getAssignmentAuthority () {
            return this.assignmentAuthority;
        }

        

        public void setAssignmentAuthority (ObjectIdentifier value) {
            this.assignmentAuthority = value;
        }
        
  
        
        public byte[] getParameters () {
            return this.parameters;
        }

        

        public void setParameters (byte[] value) {
            this.parameters = value;
        }
        
  
                
                
        public void initWithDefaults() {
            
        }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_ExtensionParameterSequenceType;
        }

       private static IASN1PreparedElementData preparedData_ExtensionParameterSequenceType = CoderFactory.getInstance().newPreparedElementData(ExtensionParameterSequenceType.class);
                
       }

       
                
        @ASN1Element ( name = "ExtensionParameter", isOptional =  false , hasTag =  true, tag = 84 , hasDefaultValue =  false  )
    
        private ExtensionParameterSequenceType  value;        

        
        
        public ExtensionParameter () {
        }
        
        
        
        public void setValue(ExtensionParameterSequenceType value) {
            this.value = value;
        }
        
        
        
        public ExtensionParameterSequenceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(ExtensionParameter.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            