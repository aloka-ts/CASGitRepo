
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1BoxedType ( name = "Timeout" )
    public class Timeout implements IASN1PreparedElement {
                
        
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "Timeout" )
    public static class TimeoutChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "intervalTime", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private IntervalTime intervalTime = null;
                
  
        @ASN1Element ( name = "localSSPTime", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private LocalSSPTime localSSPTime = null;
                
  
        @ASN1Element ( name = "absoluteSCPTime", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private AbsoluteSCPTime absoluteSCPTime = null;
                
  
        
        public IntervalTime getIntervalTime () {
            return this.intervalTime;
        }

        public boolean isIntervalTimeSelected () {
            return this.intervalTime != null;
        }

        private void setIntervalTime (IntervalTime value) {
            this.intervalTime = value;
        }

        
        public void selectIntervalTime (IntervalTime value) {
            this.intervalTime = value;
            
                    setLocalSSPTime(null);
                
                    setAbsoluteSCPTime(null);
                            
        }

        
  
        
        public LocalSSPTime getLocalSSPTime () {
            return this.localSSPTime;
        }

        public boolean isLocalSSPTimeSelected () {
            return this.localSSPTime != null;
        }

        private void setLocalSSPTime (LocalSSPTime value) {
            this.localSSPTime = value;
        }

        
        public void selectLocalSSPTime (LocalSSPTime value) {
            this.localSSPTime = value;
            
                    setIntervalTime(null);
                
                    setAbsoluteSCPTime(null);
                            
        }

        
  
        
        public AbsoluteSCPTime getAbsoluteSCPTime () {
            return this.absoluteSCPTime;
        }

        public boolean isAbsoluteSCPTimeSelected () {
            return this.absoluteSCPTime != null;
        }

        private void setAbsoluteSCPTime (AbsoluteSCPTime value) {
            this.absoluteSCPTime = value;
        }

        
        public void selectAbsoluteSCPTime (AbsoluteSCPTime value) {
            this.absoluteSCPTime = value;
            
                    setIntervalTime(null);
                
                    setLocalSSPTime(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_TimeoutChoiceType;
        }

        private static IASN1PreparedElementData preparedData_TimeoutChoiceType = CoderFactory.getInstance().newPreparedElementData(TimeoutChoiceType.class);

    }

                
        @ASN1Element ( name = "Timeout", isOptional =  false , hasTag =  true, tag = 139 , hasDefaultValue =  false  )
    
        private TimeoutChoiceType  value;        

        
        
        public Timeout () {
        }
        
        
        
        public void setValue(TimeoutChoiceType value) {
            this.value = value;
        }
        
        
        
        public TimeoutChoiceType getValue() {
            return this.value;
        }            
        

	    public void initWithDefaults() {
	    }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Timeout.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            