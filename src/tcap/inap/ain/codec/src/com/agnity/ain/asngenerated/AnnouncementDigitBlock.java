
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "AnnouncementDigitBlock", isSet = false )
    public class AnnouncementDigitBlock implements IASN1PreparedElement {
            
        @ASN1Element ( name = "maximumDigits", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private MaximumDigits maximumDigits = null;
                
  
        @ASN1Element ( name = "uninterAnnounceBlock", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private UninterAnnounceBlock uninterAnnounceBlock = null;
                
  
        @ASN1Element ( name = "interAnnounceBlock", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private InterAnnounceBlock interAnnounceBlock = null;
                
  
        @ASN1Element ( name = "dtmfKeyMap", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private DTMFKeyMap dtmfKeyMap = null;
                
  
        @ASN1Element ( name = "iPResourceMeasure", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private IPResourceMeasure iPResourceMeasure = null;
                
  
        @ASN1Element ( name = "iPStayOnLine", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private IPStayOnLine iPStayOnLine = null;
                
  
        
        public MaximumDigits getMaximumDigits () {
            return this.maximumDigits;
        }

        

        public void setMaximumDigits (MaximumDigits value) {
            this.maximumDigits = value;
        }
        
  
        
        public UninterAnnounceBlock getUninterAnnounceBlock () {
            return this.uninterAnnounceBlock;
        }

        
        public boolean isUninterAnnounceBlockPresent () {
            return this.uninterAnnounceBlock != null;
        }
        

        public void setUninterAnnounceBlock (UninterAnnounceBlock value) {
            this.uninterAnnounceBlock = value;
        }
        
  
        
        public InterAnnounceBlock getInterAnnounceBlock () {
            return this.interAnnounceBlock;
        }

        
        public boolean isInterAnnounceBlockPresent () {
            return this.interAnnounceBlock != null;
        }
        

        public void setInterAnnounceBlock (InterAnnounceBlock value) {
            this.interAnnounceBlock = value;
        }
        
  
        
        public DTMFKeyMap getDtmfKeyMap () {
            return this.dtmfKeyMap;
        }

        
        public boolean isDtmfKeyMapPresent () {
            return this.dtmfKeyMap != null;
        }
        

        public void setDtmfKeyMap (DTMFKeyMap value) {
            this.dtmfKeyMap = value;
        }
        
  
        
        public IPResourceMeasure getIPResourceMeasure () {
            return this.iPResourceMeasure;
        }

        
        public boolean isIPResourceMeasurePresent () {
            return this.iPResourceMeasure != null;
        }
        

        public void setIPResourceMeasure (IPResourceMeasure value) {
            this.iPResourceMeasure = value;
        }
        
  
        
        public IPStayOnLine getIPStayOnLine () {
            return this.iPStayOnLine;
        }

        
        public boolean isIPStayOnLinePresent () {
            return this.iPStayOnLine != null;
        }
        

        public void setIPStayOnLine (IPStayOnLine value) {
            this.iPStayOnLine = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(AnnouncementDigitBlock.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            