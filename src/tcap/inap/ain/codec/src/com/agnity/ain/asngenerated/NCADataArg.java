
package com.agnity.ain.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "NCADataArg", isSet = false )
    public class NCADataArg implements IASN1PreparedElement {
            
        
    @ASN1PreparedElement
    @ASN1Choice ( name = "nCAData" )
    public static class NCADataChoiceType implements IASN1PreparedElement {
            
        @ASN1Element ( name = "calledPartyID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CalledPartyID calledPartyID = null;
                
  
        @ASN1Element ( name = "srhrGroupID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private SrhrGroupID srhrGroupID = null;
                
  
        
        public CalledPartyID getCalledPartyID () {
            return this.calledPartyID;
        }

        public boolean isCalledPartyIDSelected () {
            return this.calledPartyID != null;
        }

        private void setCalledPartyID (CalledPartyID value) {
            this.calledPartyID = value;
        }

        
        public void selectCalledPartyID (CalledPartyID value) {
            this.calledPartyID = value;
            
                    setSrhrGroupID(null);
                            
        }

        
  
        
        public SrhrGroupID getSrhrGroupID () {
            return this.srhrGroupID;
        }

        public boolean isSrhrGroupIDSelected () {
            return this.srhrGroupID != null;
        }

        private void setSrhrGroupID (SrhrGroupID value) {
            this.srhrGroupID = value;
        }

        
        public void selectSrhrGroupID (SrhrGroupID value) {
            this.srhrGroupID = value;
            
                    setCalledPartyID(null);
                            
        }

        
  

	    public void initWithDefaults() {
	    }

        public IASN1PreparedElementData getPreparedData() {
            return preparedData_NCADataChoiceType;
        }

        private static IASN1PreparedElementData preparedData_NCADataChoiceType = CoderFactory.getInstance().newPreparedElementData(NCADataChoiceType.class);

    }

                
        @ASN1Element ( name = "nCAData", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private NCADataChoiceType nCAData = null;
                
  
        @ASN1Element ( name = "callingPartyID", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private CallingPartyID callingPartyID = null;
                
  
        @ASN1Element ( name = "envelopeEncodingAuthority", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private EnvelopeEncodingAuthority envelopeEncodingAuthority = null;
                
  
        @ASN1Element ( name = "envelopContent", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private EnvelopContent envelopContent = null;
                
  
        @ASN1Element ( name = "securityEnvelope", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private SecurityEnvelope securityEnvelope = null;
                
  
        @ASN1Element ( name = "amp1", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private Amp1 amp1 = null;
                
  
        @ASN1Element ( name = "amp2", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private Amp2 amp2 = null;
                
  
        @ASN1Element ( name = "aCGEncountered", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ACGEncountered aCGEncountered = null;
                
  
        @ASN1Element ( name = "extensionParameter", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ExtensionParameter extensionParameter = null;
                
  
        @ASN1Element ( name = "controlEncountered", isOptional =  true , hasTag =  false  , hasDefaultValue =  false  )
    
	private ControlEncountered controlEncountered = null;
                
  
        
        public NCADataChoiceType getNCAData () {
            return this.nCAData;
        }

        

        public void setNCAData (NCADataChoiceType value) {
            this.nCAData = value;
        }
        
  
        
        public CallingPartyID getCallingPartyID () {
            return this.callingPartyID;
        }

        

        public void setCallingPartyID (CallingPartyID value) {
            this.callingPartyID = value;
        }
        
  
        
        public EnvelopeEncodingAuthority getEnvelopeEncodingAuthority () {
            return this.envelopeEncodingAuthority;
        }

        

        public void setEnvelopeEncodingAuthority (EnvelopeEncodingAuthority value) {
            this.envelopeEncodingAuthority = value;
        }
        
  
        
        public EnvelopContent getEnvelopContent () {
            return this.envelopContent;
        }

        

        public void setEnvelopContent (EnvelopContent value) {
            this.envelopContent = value;
        }
        
  
        
        public SecurityEnvelope getSecurityEnvelope () {
            return this.securityEnvelope;
        }

        
        public boolean isSecurityEnvelopePresent () {
            return this.securityEnvelope != null;
        }
        

        public void setSecurityEnvelope (SecurityEnvelope value) {
            this.securityEnvelope = value;
        }
        
  
        
        public Amp1 getAmp1 () {
            return this.amp1;
        }

        
        public boolean isAmp1Present () {
            return this.amp1 != null;
        }
        

        public void setAmp1 (Amp1 value) {
            this.amp1 = value;
        }
        
  
        
        public Amp2 getAmp2 () {
            return this.amp2;
        }

        
        public boolean isAmp2Present () {
            return this.amp2 != null;
        }
        

        public void setAmp2 (Amp2 value) {
            this.amp2 = value;
        }
        
  
        
        public ACGEncountered getACGEncountered () {
            return this.aCGEncountered;
        }

        
        public boolean isACGEncounteredPresent () {
            return this.aCGEncountered != null;
        }
        

        public void setACGEncountered (ACGEncountered value) {
            this.aCGEncountered = value;
        }
        
  
        
        public ExtensionParameter getExtensionParameter () {
            return this.extensionParameter;
        }

        
        public boolean isExtensionParameterPresent () {
            return this.extensionParameter != null;
        }
        

        public void setExtensionParameter (ExtensionParameter value) {
            this.extensionParameter = value;
        }
        
  
        
        public ControlEncountered getControlEncountered () {
            return this.controlEncountered;
        }

        
        public boolean isControlEncounteredPresent () {
            return this.controlEncountered != null;
        }
        

        public void setControlEncountered (ControlEncountered value) {
            this.controlEncountered = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(NCADataArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            