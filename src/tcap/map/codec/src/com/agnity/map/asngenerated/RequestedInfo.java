
package com.agnity.map.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;

import com.agnity.map.asngenerated.DomainType;




@ASN1PreparedElement
@ASN1Sequence ( name = "RequestedInfo", isSet = false )
public class RequestedInfo implements IASN1PreparedElement {

	@ASN1Null ( name = "locationInformation" ) 

	@ASN1Element ( name = "locationInformation", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )

	private org.bn.types.NullObject locationInformation = null;


	@ASN1Null ( name = "subscriberState" ) 

	@ASN1Element ( name = "subscriberState", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )

	private org.bn.types.NullObject subscriberState = null;


	@ASN1Null ( name = "currentLocation" ) 

	@ASN1Element ( name = "currentLocation", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )

	private org.bn.types.NullObject currentLocation = null;


	public org.bn.types.NullObject getCurrentLocation() {
		return currentLocation;
	}


	public void setCurrentLocation(org.bn.types.NullObject currentLocation) {
		this.currentLocation = currentLocation;
	}

	public boolean isCurrentLocationSelected () {
		return this.currentLocation != null;
	}

	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	public org.bn.types.NullObject getLocationInformation() {
		return locationInformation;
	}


	public void setLocationInformation(org.bn.types.NullObject locationInformation) {
		this.locationInformation = locationInformation;
	}

	public boolean isLocationInformationSelected () {
		return this.locationInformation != null;
	}


	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	public org.bn.types.NullObject getSubscriberState() {
		return subscriberState;
	}


	public void setSubscriberState(org.bn.types.NullObject subscriberState) {
		this.subscriberState = subscriberState;
	}

	public boolean isSubscriberStateSelected () {
		return this.subscriberState != null;
	}

	@ASN1Element ( name = "requestedDomain", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )

	private DomainType requestedDomain = null;


	@ASN1Null ( name = "imei" ) 

	@ASN1Element ( name = "imei", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )

	private org.bn.types.NullObject imei = null;


	@ASN1Null ( name = "ms-classmark" ) 

	@ASN1Element ( name = "ms-classmark", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )

	private org.bn.types.NullObject ms_classmark = null;


	@ASN1Null ( name = "mnpRequestedInfo" ) 

	@ASN1Element ( name = "mnpRequestedInfo", isOptional =  true , hasTag =  true, tag = 7 , hasDefaultValue =  false  )

	private org.bn.types.NullObject mnpRequestedInfo = null;


	@ASN1Null ( name = "t-adsData" ) 

	@ASN1Element ( name = "t-adsData", isOptional =  true , hasTag =  true, tag = 8 , hasDefaultValue =  false  )

	private org.bn.types.NullObject t_adsData = null;


	@ASN1Element ( name = "requestedNodes", isOptional =  true , hasTag =  true, tag = 9 , hasDefaultValue =  false  )

	private RequestedNodes requestedNodes = null;



	public DomainType getRequestedDomain () {
		return this.requestedDomain;
	}


	public boolean isRequestedDomainPresent () {
		return this.requestedDomain != null;
	}


	public void setRequestedDomain (DomainType value) {
		this.requestedDomain = value;
	}



	public RequestedNodes getRequestedNodes () {
		return this.requestedNodes;
	}


	public boolean isRequestedNodesPresent () {
		return this.requestedNodes != null;
	}


	public void setRequestedNodes (RequestedNodes value) {
		this.requestedNodes = value;
	}




	public void initWithDefaults() {

	}

	private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(RequestedInfo.class);
	public IASN1PreparedElementData getPreparedData() {
		return preparedData;
	}


}
