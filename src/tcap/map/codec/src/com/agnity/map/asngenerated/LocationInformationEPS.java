
package com.agnity.map.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "LocationInformationEPS", isSet = false )
    public class LocationInformationEPS implements IASN1PreparedElement {
            @ASN1OctetString( name = "" )
    
            @ASN1SizeConstraint ( max = 7L )
        
        @ASN1Element ( name = "e-utranCellGlobalIdentity", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private byte[] e_utranCellGlobalIdentity = null;
                
  @ASN1OctetString( name = "" )
    
            @ASN1SizeConstraint ( max = 5L )
        
        @ASN1Element ( name = "trackingAreaIdentity", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private byte[] trackingAreaIdentity = null;
                
  
        @ASN1Element ( name = "extensionContainer", isOptional =  true , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private ExtensionContainer extensionContainer = null;
                
  
        @ASN1Element ( name = "geographicalInformation", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private GeographicalInformation geographicalInformation = null;
                
  
        @ASN1Element ( name = "geodeticInformation", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private GeodeticInformation geodeticInformation = null;
                
  
        @ASN1Null ( name = "currentLocationRetrieved" ) 
    
        @ASN1Element ( name = "currentLocationRetrieved", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject currentLocationRetrieved = null;
                
  
        @ASN1Element ( name = "ageOfLocationInformation", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private AgeOfLocationInformation ageOfLocationInformation = null;
                
  
        
        public byte[] getE_utranCellGlobalIdentity () {
            return this.e_utranCellGlobalIdentity;
        }

        
        public boolean isE_utranCellGlobalIdentityPresent () {
            return this.e_utranCellGlobalIdentity != null;
        }
        

        public void setE_utranCellGlobalIdentity (byte[] value) {
            this.e_utranCellGlobalIdentity = value;
        }
        
  
        
        public byte[] getTrackingAreaIdentity () {
            return this.trackingAreaIdentity;
        }

        
        public boolean isTrackingAreaIdentityPresent () {
            return this.trackingAreaIdentity != null;
        }
        

        public void setTrackingAreaIdentity (byte[] value) {
            this.trackingAreaIdentity = value;
        }
        
  
        
        public ExtensionContainer getExtensionContainer () {
            return this.extensionContainer;
        }

        
        public boolean isExtensionContainerPresent () {
            return this.extensionContainer != null;
        }
        

        public void setExtensionContainer (ExtensionContainer value) {
            this.extensionContainer = value;
        }
        
  
        
        public GeographicalInformation getGeographicalInformation () {
            return this.geographicalInformation;
        }

        
        public boolean isGeographicalInformationPresent () {
            return this.geographicalInformation != null;
        }
        

        public void setGeographicalInformation (GeographicalInformation value) {
            this.geographicalInformation = value;
        }
        
  
        
        public GeodeticInformation getGeodeticInformation () {
            return this.geodeticInformation;
        }

        
        public boolean isGeodeticInformationPresent () {
            return this.geodeticInformation != null;
        }
        

        public void setGeodeticInformation (GeodeticInformation value) {
            this.geodeticInformation = value;
        }
        
  
        
        public AgeOfLocationInformation getAgeOfLocationInformation () {
            return this.ageOfLocationInformation;
        }

        
        public boolean isAgeOfLocationInformationPresent () {
            return this.ageOfLocationInformation != null;
        }
        

        public void setAgeOfLocationInformation (AgeOfLocationInformation value) {
            this.ageOfLocationInformation = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(LocationInformationEPS.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            