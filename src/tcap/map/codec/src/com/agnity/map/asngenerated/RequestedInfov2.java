
package com.agnity.map.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "RequestedInfov2", isSet = false )
    public class RequestedInfov2 implements IASN1PreparedElement {
            
        @ASN1Null ( name = "locationInformation" ) 
    
        @ASN1Element ( name = "locationInformation", isOptional =  true , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject locationInformation = null;
                
  
        @ASN1Null ( name = "subscriberState" ) 
    
        @ASN1Element ( name = "subscriberState", isOptional =  true , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject subscriberState = null;
                
  
        @ASN1Null ( name = "currentLocation" ) 
    
        @ASN1Element ( name = "currentLocation", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject currentLocation = null;
                
  
        @ASN1Element ( name = "requestedDomain", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private DomainType requestedDomain = null;
                
  
        @ASN1Null ( name = "imei" ) 
    
        @ASN1Element ( name = "imei", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private org.bn.types.NullObject imei = null;
                
  
        @ASN1Element ( name = "requestedNodes", isOptional =  true , hasTag =  true, tag = 9 , hasDefaultValue =  false  )
    
	private RequestedNodes requestedNodes = null;
                
  
        
        public DomainType getRequestedDomain () {
            return this.requestedDomain;
        }

        
        public boolean isRequestedDomainPresent () {
            return this.requestedDomain != null;
        }
        

        public void setRequestedDomain (DomainType value) {
            this.requestedDomain = value;
        }
        
  
        
        public RequestedNodes getRequestedNodes () {
            return this.requestedNodes;
        }

        
        public boolean isRequestedNodesPresent () {
            return this.requestedNodes != null;
        }
        

        public void setRequestedNodes (RequestedNodes value) {
            this.requestedNodes = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(RequestedInfov2.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            