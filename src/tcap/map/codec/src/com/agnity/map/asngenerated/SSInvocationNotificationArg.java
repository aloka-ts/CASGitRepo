
package com.agnity.map.asngenerated;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "SSInvocationNotificationArg", isSet = false )
    public class SSInvocationNotificationArg implements IASN1PreparedElement {
            
        @ASN1Element ( name = "imsi", isOptional =  false , hasTag =  true, tag = 0 , hasDefaultValue =  false  )
    
	private IMSI imsi = null;
                
  
        @ASN1Element ( name = "msisdn", isOptional =  false , hasTag =  true, tag = 1 , hasDefaultValue =  false  )
    
	private ISDN_AddressString msisdn = null;
                
  
        @ASN1Element ( name = "ss-Event", isOptional =  false , hasTag =  true, tag = 2 , hasDefaultValue =  false  )
    
	private SS_Code ss_Event = null;
                
  
        @ASN1Element ( name = "ss-EventSpecification", isOptional =  true , hasTag =  true, tag = 3 , hasDefaultValue =  false  )
    
	private SS_EventSpecification ss_EventSpecification = null;
                
  
        @ASN1Element ( name = "extensionContainer", isOptional =  true , hasTag =  true, tag = 4 , hasDefaultValue =  false  )
    
	private ExtensionContainer extensionContainer = null;
                
  
        @ASN1Element ( name = "b-subscriberNumber", isOptional =  true , hasTag =  true, tag = 5 , hasDefaultValue =  false  )
    
	private ISDN_AddressString b_subscriberNumber = null;
                
  
        @ASN1Element ( name = "ccbs-RequestState", isOptional =  true , hasTag =  true, tag = 6 , hasDefaultValue =  false  )
    
	private CCBS_RequestState ccbs_RequestState = null;
                
  
        
        public IMSI getImsi () {
            return this.imsi;
        }

        

        public void setImsi (IMSI value) {
            this.imsi = value;
        }
        
  
        
        public ISDN_AddressString getMsisdn () {
            return this.msisdn;
        }

        

        public void setMsisdn (ISDN_AddressString value) {
            this.msisdn = value;
        }
        
  
        
        public SS_Code getSs_Event () {
            return this.ss_Event;
        }

        

        public void setSs_Event (SS_Code value) {
            this.ss_Event = value;
        }
        
  
        
        public SS_EventSpecification getSs_EventSpecification () {
            return this.ss_EventSpecification;
        }

        
        public boolean isSs_EventSpecificationPresent () {
            return this.ss_EventSpecification != null;
        }
        

        public void setSs_EventSpecification (SS_EventSpecification value) {
            this.ss_EventSpecification = value;
        }
        
  
        
        public ExtensionContainer getExtensionContainer () {
            return this.extensionContainer;
        }

        
        public boolean isExtensionContainerPresent () {
            return this.extensionContainer != null;
        }
        

        public void setExtensionContainer (ExtensionContainer value) {
            this.extensionContainer = value;
        }
        
  
        
        public ISDN_AddressString getB_subscriberNumber () {
            return this.b_subscriberNumber;
        }

        
        public boolean isB_subscriberNumberPresent () {
            return this.b_subscriberNumber != null;
        }
        

        public void setB_subscriberNumber (ISDN_AddressString value) {
            this.b_subscriberNumber = value;
        }
        
  
        
        public CCBS_RequestState getCcbs_RequestState () {
            return this.ccbs_RequestState;
        }

        
        public boolean isCcbs_RequestStatePresent () {
            return this.ccbs_RequestState != null;
        }
        

        public void setCcbs_RequestState (CCBS_RequestState value) {
            this.ccbs_RequestState = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(SSInvocationNotificationArg.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            