/*
 * Created on Oct 30, 2004
 *
 */
package com.baypackets.ase.sbb;

import javax.servlet.sip.SipServletMessage;

/**
 * The SBBEvent class defines events generated by the SBBs
 * to indicate the completion or failure of a specific task 
 * or operation that the application has requested from the SBB.
 * 
 * <p>
 * SBBs also notify the application when receiving SIP messages from endpoints 
 * passing the decision to the application. 
 */
public class SBBEvent {

	/**
	 * Event Identifier used to notify the application that the connection was 
	 * made between both endpoints successfully.
	 */
	public static final String EVENT_CONNECTED = "CONNECTED".intern();
	
	/**
	 * Event Identifier used to notify the application that the connection is
	 * in progress (for SIP-T calls).
	 */
	public static final String EVENT_CONNECT_PROGRESS = "CONNECT_PROGRESS".intern();
	
	/**
	 * Event Identifier used to notify the application of a failed connection attempt made by the SBB
	 * to connect both endpoints.
	 */
	public static final String EVENT_CONNECT_FAILED = "CONNECT_FAILED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the hold operation requested by the application was successful.
	 */
	public static final String EVENT_HOLD_COMPLETE = "HOLD_COMPLETE".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the hold operation requested by the application failed.
	 */
	public static final String EVENT_HOLD_FAILED = "HOLD_FAILED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the un-hold operation requested by the application was successful.
	 */
	public static final String EVENT_UNHOLD_COMPLETED = "UNHOLD_COMPLETED".intern();

	/**
	 * Event Identifier used to notify the application that 
	 * the un-hold operation requested by the application failed.
	 */
	public static final String EVENT_UNHOLD_FAILED = "UNHOLD_FAILED".intern();

	/**
	 * Event Identifier used to notify the application that 
	 * the resync operation requested by the application was successful.
	 */
	public static final String EVENT_RESYNC_COMPLETED = "RESYNC_COMPLETED".intern();

	/**
	 * Event Identifier used to notify the application that 
	 * the resync operation requested by the application failed.
	 */
	public static final String EVENT_RESYNC_FAILED = "RESYNC_FAILED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the disconnect operation requested by the application was successful.
	 */
	public static final String EVENT_DISCONNECTED = "DISCONNECTED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the disconnect operation requested by the application failed.
	 */
	public static final String EVENT_DISCONNECT_FAILED = "DISCONNECT_FAILED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the SBB has received a request from one of the endpoints 
	 */
	public static final String EVENT_SIG_IN_PROGRESS = "SIG_IN_PROGRESS".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the SBB has completed processing the SIP signalling message originated from an endpoint. 
	 */
	public static final String EVENT_SIG_COMPLETED = "SIG_COMPLETED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the SBB failed while processing the SIP signalling message originated from an endpoint. 
	 */
	public static final String EVENT_SIG_FAILED = "SIG_FAILED".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the application to any media server operation to be done at early media. 
	 */
	public static final String EVENT_EARLY_MEDIA = "EARLY_MEDIA".intern();
	
	/**
	 * Event Identifier used to notify the application that 
	 * the early media connect is in progress.
	 * This is used in SIP-T calls for setting ANM, ACM 
	 */
	public static final String EVENT_EARLY_MEDIA_CONNECT_PROGRESS = "EARLY_MEDIA_CONNECT_PROGRESS".intern();

	/**
     * Event Identifier used to notify the application that
     * the SBB has successfully updated the conference.
     */
    public static final String EVENT_CONF_UPDATED = "CONF_UPDATED".intern();


	/**
     * Event Identifier used to notify the application that
     * the SBB failed while UPDATEting the conference.
     */
    public static final String EVENT_CONF_UPDATE_FAILED = "CONF_UPDATE_FAILED".intern();


	/**
     * Event Identifier used to notify the application that
     * the  a participent has successfully joined the conference.
     */
    public static final String EVENT_CONF_JOINED = "JOIN_CONF_JOINED".intern();
	

	/**
     * Event Identifier used to notify the application that
     * the SBB failed while JOINing the conference.
     */
    public static final String EVENT_CONF_JOIN_FAILED = "CONF_JOIN_FAILED".intern();

	/**
     * Event Identifier used to notify the application that
     * the SBB has successfully unjoind a participent from conference.
     */
    public static final String EVENT_CONF_UNJOINED= "UNJOINED_CONF".intern();

	/**
     * Event Identifier used to notify the application that
     * the SBB failed while Unjoining the conference.
     */
    public static final String EVENT_CONF_UNJOIN_FAILED = "CONF_UNJOIN_FAILED".intern();

    /**
     * Event Identifier used to notify the application that
     * the monitor stream has successfully joined the conference.
     */
    public static final String EVENT_CONF_MONITOR_STREAM_JOINED = "JOIN_CONF_MONITOR_STREAM_JOINED".intern();
	
	/**
     * Event Identifier used to notify the application that
     * the monitor stream failed to join the conference.
     */
    public static final String EVENT_CONF_MONITOR_STREAM_JOIN_FAILED = "CONF_MONITOR_STREAM_JOIN_FAILED".intern();

	/**
     * Event Identifier used to notify the application that
     * the monitor stream has successfully unjoined a from conference.
     */
    public static final String EVENT_CONF_MONITOR_STREAM_UNJOINED= "UNJOINED_CONF_MONITOR_STREAM".intern();

	/**
     * Event Identifier used to notify the application that
     * the monitor stream failed to unjoin the conference.
     */
    public static final String EVENT_CONF_MONITOR_STREAM_UNJOIN_FAILED = "CONF_MONITOR_STREAM_UNJOIN_FAILED".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB has successfully unjoined streams from the conference.
     */
    public static final String EVENT_CONF_STREAM_UNJOINED= "UNJOINED_CONF_STREAM".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB failed while unjoining streams from the conference.
     */
    public static final String EVENT_CONF_STREAM_UNJOIN_FAILED = "CONF_STREAM_UNJOIN_FAILED".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB has successfully unjoined streams from the conference.
     */
    public static final String EVENT_CONF_PARTICIPANT_AND_STREAM_UNJOINED= "UNJOINED_CONF_PARTICIPANT_AND_STREAM".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB failed while unjoining streams from the conference.
     */
    public static final String EVENT_CONF_PARTICIPANT_AND_STREAM_UNJOIN_FAILED = "CONF_PARTICIPANT_AND_STREAM_UNJOIN_FAILED".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB has successfully modified the stream.
     */
    public static final String EVENT_STREAM_MODIFIED= "STREAM_MODIFIED".intern();

	/**
     * Event Identifier used to notify the application that
     * the SBB failed while modifying the stream.
     */
    public static final String EVENT_STREAM_MODIFY_FAILED = "STREAM_MODIFY_FAILED".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the "conf.nomedia" event is received from Media Server in INFO request.
     * Application can perform cleanup operations.
     */
    public static final String EVENT_CONF_NOMEDIA= "NOMEDIA_CONF".intern();
    
    /**
     * Event Identifier used to notify the application that
     * the SBB has successfully destroyed the conference.
     */
    public static final String EVENT_CONF_DESTROYED= "DESTROYED_CONF".intern();

	/**
     * Event Identifier used to notify the application that
     * the SBB failed while destroying the conference.
     */
    public static final String EVENT_CONF_DESTROY_FAILED = "CONF_DESTROY_FAILED".intern();

	/**
     * Event Identifier used to notify the application that
     * the timer has expired.
     */
    public static final String EVENT_TIMER= "TIMER".intern();

	/**
	 * Event identifier used to notify success of a TBCT operation.
	 */
	public static final String EVENT_TBCT_SUCCESSFUL = "TBCT_SUCCESSFUL".intern();
	
	/**
	 * Event identifier used to notify failure of a TBCT operation.
	 */
	public static final String EVENT_TBCT_FAILED = "TBCT_FAILED".intern();

	/** 
	* Event identifier used to notify sucess of a CallTransfer operation.
	*/

	public static final String EVENT_CALL_TRANSFER_SUCCESSFUL = "CALL_TRANSFER_SUCCESSFUL".intern();

	/**
	* Event identifier used to notify failure of a Call Transfer operation.
	*/
	public static final String EVENT_CALL_TRANSFER_FAILED = "CALL_TRANSFER_FAILED".intern();

       /**
        * Event identifier used to handle HTTP GET,POST,PUT.
        */
        public static final String EVENT_HTTP_GET = "EVENT_HTTP_GET".intern();
        public static final String EVENT_HTTP_POST = "EVENT_HTTP_POST".intern();
        public static final String EVENT_HTTP_PUT = "EVENT_HTTP_PUT".intern(); 
	
	/**
	 * Reason code value set by the event generator if a failure occurs due 
       * to an ERROR response from the network.
	 * The event generator fills the responseCode and the response object
	 * as part of this event.
	 */
	public static final String REASON_CODE_ERROR_RESPONSE = "ERROR_RESPONSE".intern();
	
	/**
	 * Reason code value set by the event generator if a failure occurs due to the ACK timeout.
	 */
	public static final String REASON_CODE_ACK_TIMEOUT	= "ACK_TIMEOUT";
	
	/**
	 * Reason code value set by the event generator if a failure occurs due to the PRACK timeout.
	 */
	public static final String REASON_CODE_PRACK_TIMEOUT	= "PRACK_TIMEOUT";

	/**
     * Reason code value set by the event generator if a failure occurs due to Party A 
     * not supporting 100rel.
     */
    public static final String REASON_CODE_A_REL100_NOT_SUPPORTED = "REL100_NOT_SUPPORTED";
	
    /**
	 * Reason Code used to notify the application that 
	 * the Peer Session was not replicated. 
	 */
	public static final String REASON_CODE_PEER_SESSION_NOT_REPLICATED = "PEER_NOT_REPLICATED".intern();
	
	/**
	 * Reason code value set by the event generator if an exception has triggered the failure. 
	 * The event generator also sets the exception in the error attribute.
	 */
	public static final String REASON_CODE_ERROR			= "ERROR";

	/**
	 * Reason code value set by the event generator if an operation is successful.
	 */
     public static final String REASON_CODE_SUCCESS			= "SUCCESS";
	
	/**
	 * Reason code value to indicate expiry of subscription
	 */
     public static final String REASON_CODE_SUBSCRIPTION_EXPIRED	= "SUBSCRIPTION_EXPIRED";
     
     /**
      * Reason code value to indicate the Operation was cancelled by one of the endpoints.
      */
     public static final String REASON_CODE_CANCELLED_BY_ENDPOINT = "CANCELED_BY_ENDPOINT".intern();
     
     /**
      * Reason code value to indicate the Operation was cancelled by the application.
      */
     public static final String REASON_CODE_CANCELLED_BY_APPLICATION = "CANCELLED_BY_APPLICATION".intern();
     
     
     /**
      * Event Identifier used to notify media server sip session has expired 
      */
     public static final String EVENT_MS_SESSION_EXPIRED = "EVENT_MS_SESSION_EXPIRED".intern();
     
	private String eventId;
	
	private String reasonCode;
	
	private String reason;
	
	private Throwable error;


	private SipServletMessage message = null;
	
	public SBBEvent() {
		super();
	}

	public SBBEvent(String id) {
		this.eventId = id;
	}

	public SBBEvent(String eventId, String reasonCode, String reasonString) {
		this.eventId = eventId;
		this.reasonCode = reasonCode;
		this.reason = reasonString;
	}

	public SBBEvent(String eventId, String  reasonCode) {
		this.eventId = eventId;
       	this.reasonCode = reasonCode;
	}


	public SBBEvent(String eventId, String reasonCode, Throwable error) {
		this.eventId = eventId;
        this.reasonCode = reasonCode;
		this.error = error; 
    }

	/**
	 * Returns the throwable object that caused the generation of this event.
	 * @return Exception OR Error which caused the generation of this event.
	 */
	public Throwable getError() {
		return error;
	}

	/**
	 * Gets the event ID for this event.
	 * @return The EVENT_ID
	 */
	public String getEventId() {
		return eventId;
	}

	/**
	 * Returns the reason string specified by the event generator.
	 * @return The reason string.
	 */
	public String getReason() {
		return reason;
	}

	/**
	 * Returns the reason code for generating this event.
	 * @return Reason code for generating this event as set by the event generator.
	 */
	public String getReasonCode() {
		return reasonCode;
	}

	
	public SipServletMessage getMessage() {
		return message;
	}

	/**
	 * Sets the error/exception associated with the generation of this event.
	 * @param throwable - Exception that caused the generation of this event.
	 */
	public void setError(Throwable throwable) {
		error = throwable;
	}

	/**
	 * Sets the event ID for this event.
	 * @param id Event ID.
	 */
	public void setEventId(String id) {
		eventId = id;
	}

	/**
	 * Sets the reason for generating this event.
	 * @param string - Specified reason for this event.
	 */
	public void setReason(String string) {
		reason = string;
	}

	/**
	 * Sets the Reason code for generating this event.
	 * @param code Reason Code.
	 */
	public void setReasonCode(String code) {
		reasonCode = code;
	}

	

	public void setMessage(SipServletMessage  msg) {
		message = msg;

	}


}
