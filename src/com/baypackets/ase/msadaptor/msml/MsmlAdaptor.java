/*
 * MsmlAdaptor.java
 * 
 * @author Amit Baxi 
 */

package com.baypackets.ase.msadaptor.msml;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;

import javax.servlet.sip.SipServletMessage;
import javax.xml.parsers.SAXParserFactory;

import org.apache.log4j.Logger;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.baypackets.ase.msadaptor.InputValidator;
import com.baypackets.ase.msadaptor.MsConfSpec;
import com.baypackets.ase.msadaptor.MsDialogSpec;
import com.baypackets.ase.msadaptor.MsOperationSpec;
import com.baypackets.ase.sbb.MsVideoConferenceSpec;
import com.baypackets.ase.msadaptor.convedia.MsmlMomlAdaptor;
import com.baypackets.ase.sbb.ConferenceController;
import com.baypackets.ase.sbb.MediaServerException;
import com.baypackets.ase.sbb.MsCollectPattern;
import com.baypackets.ase.sbb.MsCollectSpec;
import com.baypackets.ase.sbb.MsConferenceStream;
import com.baypackets.ase.msadaptor.MsAuditSpec;
import com.baypackets.ase.sbb.dialog.group.MsGroupSpec;
import com.baypackets.ase.sbb.dialog.transform.MsAgcSpec;
import com.baypackets.ase.sbb.dialog.transform.MsClampSpec;
import com.baypackets.ase.sbb.dialog.transform.MsGainSpec;
import com.baypackets.ase.sbb.dialog.transform.MsGateSpec;
import com.baypackets.ase.sbb.dialog.transform.MsRelaySpec;
import com.baypackets.ase.sbb.dialog.transform.MsVadSpec;
import com.baypackets.ase.sbb.MsColorSpec;
import com.baypackets.ase.sbb.MsMonitorSpec;
import com.baypackets.ase.sbb.MsOperationResult;
import com.baypackets.ase.sbb.MsPlayAudio;
import com.baypackets.ase.sbb.MsPlaySpec;
import com.baypackets.ase.sbb.MsPlayVideo;
import com.baypackets.ase.sbb.MsRecordSpec;
import com.baypackets.ase.sbb.MsRegionSpec;
import com.baypackets.ase.sbb.MsRootSpec;
import com.baypackets.ase.sbb.MsSelectorSpec;
import com.baypackets.ase.sbb.MsSendSpec;
import com.baypackets.ase.sbb.MsVarAnnouncement;
import com.baypackets.ase.util.Constants;

public class MsmlAdaptor extends MsmlMomlAdaptor {
	protected static final String MSML_MESSAGE_TYPE = "application/xml".intern();
	protected static final String MSML_XML_MESSAGE_TYPE = "application/msml+xml".intern();
	protected static final String VALIDATION_FILE = "input-values.xml".intern();
	private static Logger _logger = Logger.getLogger(MsmlAdaptor.class);

	public MsmlAdaptor() throws MediaServerException {

		InputStream stream = null;
		try {
			SAXParserFactory factory = SAXParserFactory.newInstance();
			this.saxParser = factory.newSAXParser();
			File validatorFile = new File(Constants.ASE_HOME + "/msml/"+ VALIDATION_FILE);
			if (validatorFile.exists()) {
				_logger.debug("Xml is found for validation :"+ validatorFile.getAbsolutePath());
				stream = new FileInputStream(validatorFile);
			} else {
				_logger.debug("No xml is found for validation using default input-values.xml");
				stream = this.getClass().getResourceAsStream(VALIDATION_FILE);
			}
			this.validator = new InputValidator(stream);
		} catch (Exception e) {
			throw new MediaServerException(e);
		} finally {
			try {
				if (stream != null)
					stream.close();
			} catch (IOException e) {
				_logger.error(e.getMessage(), e);
			}
		}
	}
		/**
		  * This method generates the MSML payload to be sent in the SIP INFO message to the media server.
		  *@param message
		  *@param specs
		  */
		public void generateMessage(SipServletMessage message, 
				MsOperationSpec[] specs) throws MediaServerException {
	
		try{
			StringBuffer buffer = new StringBuffer(); 
			
			//Write the MSML tag into the buffer.
			buffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>");
			buffer.append("\n<msml version=\"1.1\">");
			
			//Generate the operation specific tags.
			for(int i=0; i<specs.length;i++){
				this.generateSpec(specs[i], buffer);
			}
			
			//End the MSML tag.
			buffer.append("\n</msml>");
			
			message.setContent(buffer.toString(),"application/msml+xml");
		}catch(UnsupportedEncodingException e){
			throw new MediaServerException(e.getMessage(), e);
		}
	}
		/**
		 * This method adds dialogstart or dialogend element with it's attributes and child elements in msml request to be generated by the Adaptor. 
		 * @param spec
		 * @param buffer
		 * @throws MediaServerException
		 */
	protected void generateDialogSpec(MsDialogSpec spec, StringBuffer buffer) throws MediaServerException{
			
	_logger.debug("Inside generateDialogSpec().....");
		
		if (spec.getOperation()==MsDialogSpec.OP_CODE_DIALOG_START) {
		
			//Start the dialogstart element.
			buffer.append("\n<dialogstart ");
			
			//Set the target attribute.
			if(validator.isValid("dialog.target", spec.getConnectionId())){
				buffer.append(" target=\""+spec.getConnectionId()+"\"");
			}
			String src=spec.getSrc();
			if(src!=null && validator.isValid("dialog.target",src)){
				buffer.append(" source=\""+src+"\"");
			}
			
			String name=spec.getName();
			if(name!=null && validator.isValid("dialog.name",name)){
				buffer.append(" name=\""+name+"\"");
			}	
			//Set the type attribute.
			buffer.append(" type=\"application/moml+xml\"");

			//set mark attribute
			String mark=spec.getMark();
			if(mark!=null && validator.isValid("dialog.mark",mark)){
				buffer.append(" mark=\""+mark+"\"");
			}
			buffer.append(">");
			
			if(spec.getGroup()!=null)
					this.generateGroupSpec(spec.getGroup(), buffer);
			
			//Write each of the contained spec elements.
			Iterator iterator = spec.getSpecs();
			for(;iterator.hasNext();){
				Object temp = iterator.next();
				this.generateSpec(temp,buffer); 
			}
			
			if(validator.isValid("dialog.exit", "dialog.exit"))
				if(spec.getExitNameList()!=null && validator.isValid("exit.namelist", spec.getExitNameList()))
			buffer.append("\n<exit namelist=\""+spec.getExitNameList()+"\" />");
			
			if(validator.isValid("dialog.disconnect", "dialog.disconnect"))
				if(spec.getDisconnectNameList()!=null && validator.isValid("disconnect.namelist", spec.getDisconnectNameList()))
				buffer.append("\n<disconnect namelist=\""+spec.getDisconnectNameList()+"\" />");

			if(spec.getSendTag()!=null)
					generateSendTag(spec.getSendTag(),buffer);
			
			//End the dialog start element.
			buffer.append("\n</dialogstart>");
		}
		
		else if(spec.getOperation()==MsDialogSpec.OP_CODE_DIALOG_END)
		{
			String target = spec.getTarget();
			String name = spec.getName();
			String id = null;
			if (target != null && name != null) {
				id = target +"/dialog:"+name;
				_logger.debug("dialogend for id=\"" + id);
				buffer.append("<dialogend id=\""+id+"\"");
				String mark=spec.getMark();
				if(mark!=null && validator.isValid("dialog.mark",mark)){
					buffer.append(" mark=\""+mark+"\"");
				}
				buffer.append("/>");
			}
		}
		}
	public void generateSpec(Object spec, StringBuffer buffer) throws MediaServerException{
		if(spec instanceof MsDialogSpec){
			this.generateDialogSpec((MsDialogSpec)spec, buffer);
		}else if(spec instanceof MsPlaySpec){
			this.generatePlaySpec((MsPlaySpec)spec, buffer);
		}else if(spec instanceof MsCollectSpec){
			this.generateCollectSpec((MsCollectSpec)spec, buffer);
		}else if(spec instanceof MsRecordSpec){
			this.generateRecordSpec((MsRecordSpec)spec, buffer);
		}else if(spec instanceof MsConfSpec){
			this.generateConfSpec((MsConfSpec)spec, buffer);
		}else if(spec instanceof MsVadSpec){
			this.generateVadSpec((MsVadSpec)spec, buffer);
		}else if(spec instanceof MsGainSpec){
			this.generateGainSpec((MsGainSpec)spec, buffer);
		}else if(spec instanceof MsAgcSpec){
			this.generateAgcSpec((MsAgcSpec)spec, buffer);
		}else if(spec instanceof MsGateSpec){
			this.generateGateSpec((MsGateSpec)spec, buffer);
		}else if(spec instanceof MsClampSpec){
			this.generateClampSpec((MsClampSpec)spec, buffer);
		}else if(spec instanceof MsRelaySpec){
			this.generateRelaySpec((MsRelaySpec)spec, buffer);
		}else if(spec instanceof MsAuditSpec){
			this.generateAuditSpec((MsAuditSpec)spec, buffer);
		}
		
	}
	
	/**
	 * This method adds audit element with it's attributes and child elements in msml request to be generated by the Adaptor. 
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
private void generateAuditSpec(MsAuditSpec spec, StringBuffer buffer)throws MediaServerException {
		String queryid=spec.getQueryId();
		String statelist =spec.getStateList();
		String mark =spec.getMark();
		buffer.append("\n<audit");
		if(validator.isValid("audit.queryid", queryid))
			buffer.append(" queryid=\""+queryid+"\"");		
		if(validator.isValid("audit.statelist", statelist))
			buffer.append(" statelist=\""+statelist+"\"");
		if(validator.isValid("audit.mark", mark))
			buffer.append(" mark=\""+mark+"\"");
		buffer.append("/>");
		
	}
/**
 * This method adds group element of dialog group package with it's attributes and child elements in msml request to be generated by the Adaptor.
 * @param spec group tag specification.
 * @param buffer 
 * @throws MediaServerException
 */
	protected void generateGroupSpec(MsGroupSpec spec,StringBuffer buffer)throws MediaServerException{
		if(validator.isValid("dialog.group", "dialog.group")){
			buffer.append("\n<group");
		String groupTopology=spec.getGroupTopology(); // Mandatory Attribute
		if(validator.isValid("group.topology",groupTopology)) {
			buffer.append(" topology=\"" + groupTopology + "\"");
			if(spec.getGroupId()!=null && validator.isValid("group.id", spec.getGroupId()))
				buffer.append(" id=\"" + spec.getGroupId()+ "\"");		
			buffer.append(">");
			
			//Generate msml for nested Group Specs 
			Iterator iterator=spec.getGroupSpecs();
			for(;iterator.hasNext();){
				MsGroupSpec childGroupSpec = (MsGroupSpec) iterator.next();
				this.generateGroupSpec(childGroupSpec,buffer); 
			}
			
			iterator = spec.getSpecs();
			for(;iterator.hasNext();){
				Object temp = iterator.next();
				this.generateSpec(temp,buffer); 
			}
			MsSendSpec groupexit=spec.getGroupexitSendTag();
			   if(groupexit!=null && validator.isValid("group.groupexit", "group.groupexit")){
				buffer.append("<groupexit>");
				this.generateSendTag(groupexit, buffer);
				buffer.append("\n</groupexit>");
			   }
				buffer.append("</group>");				
			}
		}
	}
	
	/**
	 * This method adds "play" element with it's attributes and child element in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generatePlaySpec(MsPlaySpec spec, StringBuffer buffer) throws MediaServerException{

		buffer.append("\n<play");
		
		String id=spec.getId();
		if(id!=null && validator.isValid("play.id" ,id))
			buffer.append(" id=\""+id+"\"");
		//write the interval attribute
		if(validator.isValid("play.interval" , new Long(spec.getInterval())))
			buffer.append(" interval=\""+spec.getInterval()+"ms\"");
		
		
		//Write the iterations attribute.
		if(validator.isValid("play.iterate" , new Long(spec.getIterations()))){
			String iterate=(spec.getIterations()==Integer.MAX_VALUE)?"forever":spec.getIterations()+"";
			buffer.append(" iterate=\""+iterate+"\"");
		}
		//Set initial attribute
		if(spec.getInitial()!=null && validator.isValid("play.initial" ,spec.getInitial()) )
			buffer.append(" initial=\""+spec.getInitial()+"\"");
		
		//@Start
		//This is added to achieve the following use case:
		//User will be hearing the announcement for the time period mentioned
		//by this attribute
		//Write the max time attribute
		if(validator.isValid("play.duration" , new Long(spec.getDuration()))){
			buffer.append(" maxtime=\"");
			buffer.append(spec.getDuration());
			buffer.append("ms\"");
		}
		//@End
		
		//Write the barge tag.
		if(validator.isValid("play.barge","play.barge"))
		buffer.append(" barge=\""+spec.isBarge()+"\"");
		
		if(validator.isValid("play.cleardb","play.cleardb"))
		buffer.append(" cleardb=\""+spec.isClearDigitBuffer()+"\"");
		
		String offset=spec.getOffset();
		if(offset!=null && validator.isValid("play.offset" , offset))
			buffer.append(" offset=\""+offset+"\"");
		
		int skip=spec.getSkip();
		if(skip!=0 && validator.isValid("play.skip" ,skip))
			buffer.append(" skip=\""+skip+"s\"");
		
		if(validator.isValid("play.language" , spec.getLanguage())){
			buffer.append(" xml:lang=\"");
			buffer.append(spec.getLanguage());
			buffer.append("\"");
		}
				
		//End of play attributes.
		buffer.append(" >");
		
		
		if (spec.getMedia_Audio() != null || spec.getMedia_Video() != null && validator.isValid("play.media" ,"play.media")) {
			buffer.append("\n<media>");
			if (spec.getMedia_Audio() != null && validator.isValid("play.audio" ,"play.audio"))
				this.generateAudioTag(spec.getMedia_Audio(),buffer);
			if (spec.getMedia_Video() != null && validator.isValid("play.video" ,"play.video"))
				this.generateVideoTag(spec.getMedia_Video(),buffer);
			buffer.append("\n</media>");
		}
		
		Iterator iterator = spec.getPlayList();
		for(;iterator.hasNext();){
			Object temp = iterator.next();
			if (temp instanceof URI) {
				MsPlayAudio audio = new MsPlayAudio();
				audio.setURI((URI) temp);
				if(validator.isValid("play.audio" ,"play.audio"))
				this.generateAudioTag(audio, buffer);
			} else if (temp instanceof String) {
				MsPlayAudio audio = new MsPlayAudio();
				try {
					audio.setURI(new URI((String) temp));
					if(validator.isValid("play.audio" ,"play.audio"))
					this.generateAudioTag(audio, buffer);
				} catch (URISyntaxException e) {
					_logger.debug("String uri syntex is not correct so not adding it in xml");
				}
			} else if (temp instanceof MsPlayAudio){
				if(validator.isValid("play.audio" ,"play.audio"))
				this.generateAudioTag((MsPlayAudio) temp, buffer);
			}
			else if (temp instanceof MsPlayVideo)
				{
					if(validator.isValid("play.video" ,"play.video"))
					this.generateVideoTag((MsPlayVideo) temp, buffer);
				}
			else if (temp instanceof MsVarAnnouncement) {
				if(validator.isValid("play.var" ,"play.var"))
				this.generateVarTag((MsVarAnnouncement)temp, buffer);
			}
		}
	
		MsSendSpec playexit=spec.getPlayExit();
		 if(playexit!=null && validator.isValid("play.playexit", "play.playexit"))
			{
			buffer.append("\n<playexit>");
			this.generateSendTag(playexit, buffer);
			buffer.append("\n</playexit>");
			}
		//End of play element.
		buffer.append("\n</play>");		
	}
	
	/**
	 * This method adds "audio" element with it's attributes and child elements in msml request 
	 * as a child element of "play" element  to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	private void generateAudioTag(MsPlayAudio spec,StringBuffer buffer) throws MediaServerException{
		buffer.append("\n<audio");
		if (spec.getURI() != null) {
			if(validator.isValid("audio.uri" , spec.getURI()))
				buffer.append(" uri=\""+spec.getURI()+ "\"");
		}
		
		String format=spec.getFormat();		
		if(format!=null && validator.isValid("audio.format" , format))
			buffer.append(" format=\""+format+"\"");
		
		if(validator.isValid("audio.audiosamplerate" , spec.getAudioSampleRate()))
			buffer.append(" audiosamplerate=\""+spec.getAudioSampleRate()+"\"");

		if(validator.isValid("audio.audiosamplesize" , spec.getAudioSampleSize()))
			buffer.append(" audiosamplesize=\""+spec.getAudioSampleSize()+"\"");
		
		 if( validator.isValid("audio.iterate",spec.getIterate())){
		    	String iterate=(spec.getIterate()==Integer.MAX_VALUE)?"forever":spec.getIterate()+"";
		    	buffer.append(" iterate=\""+iterate+"\"");
		    }
		 
		 if(validator.isValid("audio.language" , spec.getLanguage())){
				buffer.append(" xml:lang=\"");
				buffer.append(spec.getLanguage());
				buffer.append("\"");
			}
		 buffer.append("/>");
	}
	
	/**
	 * This method adds "video" element with it's attributes and child elements in msml request 
	 * as a child element of "play" element  to be generated by the Adaptor
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	private void generateVideoTag(MsPlayVideo spec,StringBuffer buffer) throws MediaServerException{
		buffer.append("\n<video");
		if(validator.isValid("video.uri" , spec.getURI()))
			buffer.append(" uri=\""+spec.getURI()+"\"");
		
		if(spec.getFormat()!=null && validator.isValid("video.format" , spec.getFormat()))
			buffer.append(" format=\""+spec.getFormat()+"\"");
			
		if(validator.isValid("video.audiosamplerate" , spec.getAudioSampleRate()))
			buffer.append(" audiosamplerate=\""+spec.getAudioSampleRate()+"\"");

		if(validator.isValid("video.audiosamplesize" , spec.getAudioSampleSize()))
			buffer.append(" audiosamplesize=\""+spec.getAudioSampleSize()+"\"");
		
		if(spec.getCodecconfig()!=null && validator.isValid("video.codecconfig" , spec.getCodecconfig()))
			buffer.append(" codecconfig=\""+spec.getCodecconfig()+"\"");
		
		if(spec.getProfile()!=null && validator.isValid("video.profile" , spec.getProfile()))
			buffer.append(" profile=\""+spec.getProfile()+"\"");

		if(spec.getLevel()!=null && validator.isValid("video.level" , spec.getLevel()))
			buffer.append(" level=\""+spec.getLevel()+"\"");

		if(spec.getImagewidth()!=0 && validator.isValid("video.imagewidth" , spec.getImagewidth()))
			buffer.append(" imagewidth=\""+spec.getImagewidth()+"\"");

		if(spec.getImageheight()!=0 && validator.isValid("video.imageheight" , spec.getImageheight()))
			buffer.append(" imageheight=\""+spec.getImageheight()+"\"");		

		if(spec.getMaxbitrate()!=0 && validator.isValid("video.maxbitrate" , spec.getMaxbitrate()))
			buffer.append(" maxbitrate=\""+spec.getMaxbitrate()+"\"");

		if(spec.getFramerate()!=0 && validator.isValid("video.framerate" , spec.getFramerate()))
			buffer.append(" framerate=\""+spec.getFramerate()+"\"");
		
		 if( validator.isValid("video.iterate",spec.getIterate())){
		    	String iterate=(spec.getIterate()==Integer.MAX_VALUE)?"forever":spec.getIterate()+"";
		    	buffer.append(" iterate=\""+iterate+"\"");
		    }
		buffer.append("/>");		
	}
	
	/**
	 * This method adds "var" element with it's attributes and child elements in msml request 
	 * as a child element of "play" element  to be generated by the Adaptor
	 * @param var
	 * @param buffer
	 * @throws MediaServerException
	 */
	
protected void generateVarTag(MsVarAnnouncement var, StringBuffer buffer) throws MediaServerException{
		
		//Start the var element.
		buffer.append("\n<var");
		
		//Set the type attribute.
		String type=var.getType();
		
		// MSML and MSCML compatibility fix
		if(type!=null && type.startsWith("digit")){
			type="digits";
		}

	
		if(validator.isValid("var.type" ,type)){
			buffer.append(" type=\"");
			buffer.append(type);
			buffer.append("\"");
		}
		
		//Set the subtype attribute
		if(validator.isValid("var.subtype."+type, var.getSubType())){
			buffer.append(" subtype=\"");
			buffer.append(var.getSubType());
			buffer.append("\"");
		}
		
		//Set the subtype attribute
		if(validator.isValid("var.value" , var.getValue())){
			
			String value=var.getValue();
			
			if (type.equals("silence")) {
				
			
				double varval = Double.parseDouble(var.getValue());
				varval = Math.ceil(varval / 100);
				value ="" + (int) varval;
				
	            if(_logger.isDebugEnabled()){
					_logger.debug(" the cieling value for silence as unit of 100ms is "+ value);
				}
			}
			buffer.append(" value=\"");
			buffer.append(value);
			buffer.append("\"");
		}
		
		//Set the language.
		String language=validator.getMappedLanguage(var.getLanguage());
		if(validator.isValid("var.language" ,language)){
			buffer.append(" xml:lang=\"");
			buffer.append(language);
			buffer.append("\"");
		}
		
		//End the var element.
		buffer.append(" />");
	}

	/**
	 * This method adds "record" element with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	public void generateRecordSpec(MsRecordSpec spec, StringBuffer buffer) throws MediaServerException{
		//Start the record element...
		buffer.append("\n<record");
		String id=spec.getRecordId();
		if(id!=null && validator.isValid("record.id" ,id))
			buffer.append(" id=\""+id+"\"");
		
		if(spec.getRecordingDestination()==null && spec.getAudiorecordingDestination()==null && spec.getVideorecordingDestination()==null)
			throw new MediaServerException("None of dest,audiodest or videodest specified for recording, at least one of them needs to be specified for recording");
		
		URI uri=spec.getRecordingDestination();
		if(uri!=null && validator.isValid("record.dest" , uri))
			buffer.append(" dest=\""+uri+"\"");
		
		uri= spec.getAudiorecordingDestination();
		if(uri!=null && validator.isValid("record.audiodest" ,uri))
			buffer.append(" audiodest=\""+uri+"\"");
		
		uri=spec.getVideorecordingDestination();
		if(uri!=null && validator.isValid("record.videodest" , uri))
			buffer.append(" videodest=\""+uri+"\"");
		
		// Set the 'append' attribute 
		if(validator.isValid("record.append", "record.append")&& spec.getRecordingDestination() != null && 
			!"http".equals(spec.getRecordingDestination().getScheme())){
			buffer.append(" append=\"");
			buffer.append(String.valueOf(spec.getAppend()));
			buffer.append("\"");
		}
		
		//Set the Recording format mandatory
		String format=spec.getRecordingFormat();
		String codecconfig=spec.getCodecconfig();
		int audioSampleRate=spec.getAudioSampleRate();
		int audioSampleSize=spec.getAudioSampleSize();
		String profile=spec.getProfile();
		String level=spec.getLevel();
		int imageWidth=spec.getImageWidth();
		int imageHeight=spec.getImageHeight();
		int maxBitRate=spec.getMaxBitrate();
		int frameRate=spec.getFrameRate();
		String initial=spec.getInitial();
		String termKey=spec.getTerminationKey();
		boolean beep=spec.isBeep();
		
		if(validator.isValid("record.beep" , beep))
			buffer.append(" beep=\""+beep+"\"");
		
		if(validator.isValid("record.format" , format))
			buffer.append(" format=\""+format+"\"");
		
		if(codecconfig!=null && validator.isValid("record.codecconfig" , codecconfig))
			buffer.append(" codecconfig=\""+codecconfig+"\"");
		
		if(validator.isValid("record.audiosamplerate" , audioSampleRate))
			buffer.append(" audiosamplerate=\""+audioSampleRate+"\"");
		
		if(validator.isValid("record.audiosamplesize" , audioSampleSize))
			buffer.append(" audiosamplesize=\""+audioSampleSize+"\"");
		
		if(profile!=null && validator.isValid("record.profile" ,profile))
			buffer.append(" profile=\""+profile+"\"");
		
		if(level!=null && validator.isValid("record.level" ,level))
			buffer.append(" level=\""+level+"\"");
		
		if(imageWidth!=0 && validator.isValid("record.imagewidth" , imageWidth))
			buffer.append(" imagewidth=\""+imageWidth+"\"");
		
		if(imageHeight!=0 && validator.isValid("record.imageheight" , imageHeight))
			buffer.append(" imageheight=\""+imageHeight+"\"");		

		if(maxBitRate!=0 && validator.isValid("record.maxbitrate" , maxBitRate))  
			buffer.append(" maxbitrate=\""+maxBitRate+"\"");
		
		if(frameRate!=0 && validator.isValid("record.framerate" , frameRate))
			buffer.append(" framerate=\""+frameRate+"\"");
		
		if(initial!=null && validator.isValid("record.initial" , initial))
			buffer.append(" initial=\""+initial+"\"");
		
		
		//Set the Max Recoring time mandatory
		
		if(validator.isValid("record.maxtime" , new Long(spec.getMaxRecordingTime()))){
			buffer.append(" maxtime=\"");
			buffer.append(spec.getMaxRecordingTime());
			buffer.append("s\""); // changing from ms to s
		}
		
		if(validator.isValid("record.prespeech" , new Long(spec.getPreSpeechTimer())))
			buffer.append(" prespeech=\""+spec.getPreSpeechTimer()+"s\""); // changed from pre-speech to prespeech
		
		//Get the post speach timer value.
		if(validator.isValid("record.postspeech" , new Long(spec.getPostSpeechTimer())))
			buffer.append(" postspeech=\""+spec.getPostSpeechTimer()+"s\"");	// chnaged from post-speech to postspeech	
		
		//Set the termination key.
		if(termKey!=null && validator.isValid("record.term" , termKey))
			buffer.append(" termkey=\""+termKey+"\"");		
		buffer.append(" >");
		if(spec.getChildPlayElement()!=null && validator.isValid("record.play","record.play"))
				this.generatePlaySpec(spec.getChildPlayElement(), buffer);
		
		if(spec.getRecordExit()!=null && validator.isValid("record.recordexit", "record.recordexit"))
		{
			buffer.append("\n<recordexit>");
			this.generateSendTag(spec.getRecordExit(), buffer);
			buffer.append("\n</recordexit>");
		}
		buffer.append("\n</record>");
	}

	/**
	 * This method adds "dtmf" element with it's attributes and child
	 * elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateCollectSpec(MsCollectSpec spec, StringBuffer buffer) throws MediaServerException{
		
		buffer.append("\n<dtmf");
		String id=spec.getId();
		String iterate;
		if(id!=null && validator.isValid("dtmf.id", id))
			buffer.append(" id=\""+spec.getId()+"\"");
		
		if(validator.isValid("dtmf.cleardb","dtmf.cleardb"))
			buffer.append(" cleardb=\""+spec.isClearDigitBuffer()+"\"");
		
		if(validator.isValid("dtmf.fdt" , new Long(spec.getFirstDigitTimer())))
			buffer.append(" fdt=\""+spec.getFirstDigitTimer()+"ms\"");
		
		
		//Set the inter digit timer
		if(validator.isValid("dtmf.idt" , new Long(spec.getInterDigitTimer())))
			buffer.append(" idt=\""+spec.getInterDigitTimer()+"ms\"");
		

		//Set the extra digit timer
		if(validator.isValid("dtmf.edt" , new Long(spec.getExtraDigitTimer())))
			buffer.append(" edt=\""+spec.getExtraDigitTimer()+"ms\"");
	
	    if(spec.isStarttimer() && validator.isValid("dtmf.starttimer","dtmf.starttimer"))
	    	buffer.append(" starttimer=\""+spec.isStarttimer()+"\"");
	    
	    if(_logger.isDebugEnabled()){
			_logger.debug(" the startimer flag is  "+ spec.isStarttimer());
		}
	    
	    if( validator.isValid("dtmf.iterate",spec.getIterate())){
	    	iterate=(spec.getIterate()==MsCollectSpec.ITERATE_FOREVER)?"forever":spec.getIterate()+"";
	    	buffer.append(" iterate=\""+iterate+"\"");
	    }
		if(validator.isValid("dtmf.ldd" , new Long(spec.getLongDigitTimer())))
			buffer.append(" ldd=\""+spec.getLongDigitTimer()+"ms\"");
	    //
	    //End the dtmf attributes.
		buffer.append(">");
		
		if(spec.getChildPlayElement()!=null && validator.isValid("dtmf.play" ,"dtmf.play"))
			this.generatePlaySpec(spec.getChildPlayElement(), buffer);
		
	    ArrayList<MsCollectPattern> patternList=spec.getPatternList();
	    
	    for(int i=0;i<patternList.size();i++)
	    {
	    	MsCollectPattern pattern=patternList.get(i);
	    	String digits=pattern.getDigits();
	    	
			if (spec.getEscapeKey() != null && digits.indexOf("cancel") == -1 && !spec.getEscapeKey().equalsIgnoreCase("Z")) {
				digits += ";cancel=" + spec.getEscapeKey();
			}
	    	String format=pattern.getFormat();
	    	MsSendSpec senttag=pattern.getSendTag();
	    	buffer.append("\n<pattern");
	    	if(validator.isValid("pattern.digits",digits))
	    	buffer.append(" digits=\""+digits+"\"");
	    	
	    	if(format!=null && validator.isValid("pattern.format" ,format))
	    		buffer.append(" format=\""+format+"\"");
	    	
	    	 if( validator.isValid("pattern.iterate",pattern.getIterate())){
	 	    	iterate=(pattern.getIterate()==MsCollectSpec.ITERATE_FOREVER)?"forever":pattern.getIterate()+"";
	 	    	buffer.append(" iterate=\""+iterate+"\"");
	 	    }
	  	    buffer.append(">");
	  	    if(senttag!=null)
	  	    	this.generateSendTag(senttag, buffer);
	  	    buffer.append("\n</pattern>");
	    }
	    
	    if(spec.getDetect_send()!=null && validator.isValid("detect.send" ,"detect.send"))
		    {
		    	buffer.append("\n<detect>");
		    	this.generateSendTag(spec.getDetect_send(), buffer);
		    	buffer.append("\n</detect>");
		    }
		    
			buffer.append("\n<noinput");
			 if( validator.isValid("noinput.iterate",spec.getNoInput_iterate())){
			    	iterate=(spec.getNoInput_iterate()==MsCollectSpec.ITERATE_FOREVER)?"forever":spec.getNoInput_iterate()+"";
			    	buffer.append(" iterate=\""+iterate+"\"");
			    }
		    buffer.append(">");
	  	    if(spec.getNoInput_send()!=null && validator.isValid("noinput.send" ,"noinput.send"))
	  	    	this.generateSendTag(spec.getNoInput_send(), buffer);
	  	    
	  	    buffer.append("\n</noinput>");
			
			buffer.append("\n<nomatch");
			 if( validator.isValid("nomatch.iterate",spec.getNoMatch_iterate())){
			    	iterate=(spec.getNoMatch_iterate()==MsCollectSpec.ITERATE_FOREVER)?"forever":spec.getNoMatch_iterate()+"";
			    	buffer.append(" iterate=\""+iterate+"\"");
			    }
		    buffer.append(">");
		    if(spec.getNoMatch_send()!=null && validator.isValid("noinput.send" ,"noinput.send"))
	  	    	this.generateSendTag(spec.getNoMatch_send(), buffer);
	  	    buffer.append("\n</nomatch>");
	  	    
	  	    if(spec.getDtmfExit_send()!=null && validator.isValid("dtmf.dtmfexit" ,"dtmf.dtmfexit")){
	  	    	buffer.append("\n<dtmfexit>");
	  	    	this.generateSendTag(spec.getDtmfExit_send(), buffer);
	  	    	buffer.append("\n</dtmfexit>");
	  	    }
			buffer.append("\n</dtmf>");
	  	}
	/**
	 * This method adds "vad" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "vad" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateVadSpec(MsVadSpec spec, StringBuffer buffer) throws MediaServerException{
		if(validator.isValid("dialog.vad", "dialog.vad")){
		buffer.append("\n<vad");
		String id = spec.getId();
		MsSendSpec send;
		if (id != null && validator.isValid("vad.id", id))
			buffer.append(" id=\"" + id + "\"");
		if(validator.isValid("vad.starttimer", "vad.starttimer"))
		buffer.append(" starttimer=\""+spec.isStarttimer()+"\">");			
		if (spec.getVoice_len() != null && validator.isValid("vad.voice", "vad.voice")) {
			buffer.append("\n<voice len=\"" + spec.getVoice_len() + "\"");
			if (spec.getVoice_sen() != null)
				buffer.append(" sen=\"" + spec.getVoice_sen() + "\"");
			buffer.append(">");
			send = spec.getSendForVoice();
			if (send != null)
				this.generateSendTag(send, buffer);
			buffer.append("\n</voice>");
		}
		if (spec.getTvoice_len() != null  && validator.isValid("vad.tvoice", "vad.tvoice")) {
			buffer.append("\n<tvoice len=\"" + spec.getTvoice_len() + "\"");
			if (spec.getTvoice_sen() != null)
				buffer.append(" sen=\"" + spec.getTvoice_sen() + "\"");
			buffer.append(">");
			send = spec.getSendForTvoice();
			if (send != null)
				this.generateSendTag(send, buffer);
			buffer.append("\n</tvoice>");
		}
		if (spec.getSilence_len() != null && validator.isValid("vad.silence", "vad.silence")) {
			buffer.append("\n<silence len=\"" + spec.getSilence_len() + "\"");
			if (spec.getSilence_sen() != null)
				buffer.append(" sen=\"" + spec.getSilence_sen() + "\"");
			buffer.append(">");
			send = spec.getSendForSilence();
			if (send != null)
				this.generateSendTag(send, buffer);
			buffer.append("\n</silence>");
		}
		if (spec.getTsilence_len() != null && validator.isValid("vad.tsilence", "vad.tsilence")) {
			buffer.append("\n<tsilence len=\"" + spec.getTsilence_len() + "\"");
			if (spec.getTsilence_sen() != null)
				buffer.append(" sen=\"" + spec.getTsilence_sen() + "\"");
			buffer.append(">");
			send = spec.getSendForTsilence();
			if (send != null)
				this.generateSendTag(send, buffer);
			buffer.append("\n</tsilence>");
		}
		send=spec.getSendForVad();
		if(send!=null)
			this.generateSendTag(send, buffer);
		
		buffer.append("\n</vad>");
		}
	}
	/**
	 * This method adds "gain" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "gain" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateGainSpec(MsGainSpec spec, StringBuffer buffer) throws MediaServerException{
		if(validator.isValid("dialog.gain", "dialog.gain")){
			buffer.append("\n<gain");		
		String id = spec.getId();
		if (id != null && validator.isValid("dialog.gain.id", id))
			buffer.append(" id=\"" + id + "\"");
		
		if (validator.isValid("dialog.gain.incr", spec.getIncr()))
		buffer.append(" incr=\""+spec.getIncr()+"\"");
		
		if(validator.isValid("dialog.gain.amt", spec.getAmt()))
		buffer.append(" amt=\""+spec.getAmt()+"\">");
		
		MsSendSpec send=spec.getSendForGain();
		if(send!=null)
			this.generateSendTag(send, buffer);
		
		buffer.append("\n</gain>");
	}
	}
	/**
	 * This method adds "agc" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "agc" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateAgcSpec(MsAgcSpec spec, StringBuffer buffer)
			throws MediaServerException {
		if(validator.isValid("dialog.agc", "dialog.agc")){
		buffer.append("\n<agc");
		String id = spec.getId();
		if (id != null && validator.isValid("dialog.agc.id", id))
			buffer.append(" id=\"" + id + "\"");
		
		if (validator.isValid("dialog.agc.tgtlvl", spec.getTargetLevel()))
		buffer.append(" tgtlvl=\""+spec.getTargetLevel()+"\"");
		
		if (validator.isValid("dialog.agc.maxgain", spec.getMaxGain()))
		buffer.append(" maxgain=\""+spec.getMaxGain()+"\">");
		
		MsSendSpec send=spec.getSendForAgc();
		if(send!=null)
			this.generateSendTag(send, buffer);		
		buffer.append("\n</agc>");
		}
	}
	/**
	 * This method adds "gate" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "gate" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateGateSpec(MsGateSpec spec, StringBuffer buffer) throws MediaServerException{
		if(validator.isValid("dialog.gate", "dialog.gate")){
		buffer.append("\n<gate");
		String id = spec.getId();
		if (id != null && validator.isValid("gate.id", id))
			buffer.append(" id=\"" + id + "\"");
		if(spec.isInitial())
			buffer.append(" initial=\"pass\">");
		else
			buffer.append(" initial=\"halt\">");
		MsSendSpec send=spec.getSendForGate();
		if(send!=null)
			this.generateSendTag(send, buffer);
		buffer.append("\n</gate>");
		}
	}
	/**
	 * This method adds "clamp" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "clamp" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateClampSpec(MsClampSpec spec, StringBuffer buffer)
			throws MediaServerException {
		if(validator.isValid("dialog.clamp", "dialog.clamp")){
		buffer.append("\n<clamp");
		String id = spec.getId();
		if (id != null && validator.isValid("dialog.clamp.id", id))
			buffer.append(" id=\"" + id + "\"");
		buffer.append("/>");
		}
	}
	/**
	 * This method adds "relay" element of dialog transform package with it's attributes and 
	 * child elements in msml request to be generated by the Adaptor.
	 * "relay" element can child element of dialogstart.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateRelaySpec(MsRelaySpec spec, StringBuffer buffer)
			throws MediaServerException {
		if (validator.isValid("dialog.relay", "dialog.relay")) {
			buffer.append("\n<relay");
			String id = spec.getId();
			if (id != null && validator.isValid("dialog.relay.id", id))
				buffer.append(" id=\"" + id + "\"");
			buffer.append("/>");
		}
	}
	/**
	 * This method generate send tag of msml and add it to String buffer.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException 
	 */
	public void generateSendTag(MsSendSpec spec, StringBuffer buffer)
			throws MediaServerException {

		String target = spec.getTarget();
		String event = spec.getEvent();
		String namelist = spec.getNamelist();
		if (target != null && event!=null) {
			String attribname;
			if (target.equals("play"))
				attribname = "play.event";
			else if (target.equals("record"))
				attribname = "record.event";
			else if (target.equals("dtmf"))
				attribname = "dtmf.event";
			else if (target.equals("collect"))
				attribname = "dtmf.event";
			else if (target.equals("dialog"))
				attribname = "dialog.event";
			else if (target.equals("group"))
				attribname = "group.event";
			else if (target.equals("vad"))
				attribname = "vad.event";
			else if (target.equals("agc"))
				attribname = "agc.event";
			else if (target.equals("gate"))
				attribname = "gate.event";
			else if (target.equals("gain"))
				attribname = "gain.event";
			else
				attribname = "send.event";

			if(validator.isValid(attribname, event)){
				buffer.append("\n<send");
				buffer.append(" target=\"" + target + "\" event=\"" + event
						+ "\"");
				if (namelist != null)
					buffer.append(" namelist=\"" + namelist + "\"");
				buffer.append("/>");
			}else{
				_logger.error("Invalid event for target....");
				throw new MediaServerException("Invalid event name for target:"+target);
			}
			
		}else {
			_logger.info("In <send> either event or target is null so not including it in msml xml");
				return; // Return if mandatory attributes are not set
		}
	}
	
	/**
	 * This method adds conference core package elements 
	 * with their attributes and child elements in msml request 
	 * to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateConfSpec(MsConfSpec spec, StringBuffer buffer) throws MediaServerException{
		_logger.debug("Inside generateConfSpec().....");
		
		if (spec.hasOperation(MsConfSpec.OP_CODE_CREATE_CONF)) {
			this.generateCreateConfElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_UPDATE_CONF)) {
			this.generateUpdateConfElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_JOIN_PARTICIPANT)) {
			this.generateJoinElement(spec, buffer);
		}	
		if (spec.hasOperation(MsConfSpec.OP_CODE_JOIN_MONITOR_STREAM)) {
			this.generateMonitorElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_MODIFY_STREAM)) {
			this.generateModifyStreamElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_UNJOIN_PARTICIPANT)) {
			this.generateUnjoinElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_UNJOIN_STREAM)) {
			generateUnjoinStreamElement(spec, buffer);
		}
		if (spec.hasOperation(MsConfSpec.OP_CODE_UNJOIN_MONITOR_STREAM)) {
			generateUnjoinMonitorElement(spec, buffer);
		}	
		if (spec.hasOperation(MsConfSpec.OP_CODE_DESTROY_CONF)) {
			this.generateDestroyElement(spec, buffer);
		}
			_logger.debug("Exitting generateConfSpec().....");
	}
	
	/**
	 * This method generate "monitor" msml tag with it's attributes and child elements
	 * in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateMonitorElement(MsConfSpec spec, StringBuffer buffer) throws MediaServerException {
		_logger.debug("Inside generateMonitorElement().....");
		if (!validator.isValid("msml.monitor", "msml.monitor")) {
			_logger.debug("Exitting generateMonitorElement(): Not suppored by media server");
			return;
		}
		ArrayList<MsMonitorSpec> monitorStreams=spec.getMonitorStreamList();
		for(int i=0;i<monitorStreams.size();i++){
			MsMonitorSpec monitorSpec=monitorStreams.get(i);
			 String id1=monitorSpec.getMonitorId();
			 String id2=monitorSpec.getMonitoringId();
			 buffer.append("\n<monitor");
			if (validator.isValid("monitor.id1", id1))
				buffer.append(" id1=\"" + id1 + "\"");
			if (validator.isValid("monitor.id2", id2))
				buffer.append(" id2=\"" + id2 + "\"");			
			if(monitorSpec.isCompressed() && validator.isValid("monitor.compressed","monitor.compressed"))
				buffer.append(" compressed=\"true\"");			
			String mark=monitorSpec.getMark();
			if(mark!=null && validator.isValid("monitor.mark",mark)){
				buffer.append(" mark=\""+mark+"\"");
			}
			buffer.append("/>");	
		}
		_logger.debug("Exitting generateMonitorElement().....");		
	}
	
	/**
	 * This method generate "unjoin" msml tag with it's attributes and child elements for monitor type of join
	 * in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateUnjoinMonitorElement(MsConfSpec spec,StringBuffer buffer) throws MediaServerException {
		_logger.debug("Inside generateUnjoinMonitorElement().....");	
		ArrayList<MsMonitorSpec> streams=spec.getMonitorStreamList();
		for(int i=0;i<streams.size();i++){
			MsMonitorSpec monitorSpec=streams.get(i);
			 String id1=monitorSpec.getMonitorId();
			 String id2=monitorSpec.getMonitoringId();
			 buffer.append("\n<unjoin");
			if (validator.isValid("unjoin.id1", id1))
				buffer.append(" id1=\"" + id1 + "\"");

			if (validator.isValid("unjoin.id2", id2))
				buffer.append(" id2=\"" + id2 + "\">");
			String mark=monitorSpec.getMark();
			if(mark!=null && validator.isValid("unjoin.mark",mark)){
				buffer.append(" mark=\""+mark+"\"");
			}
			buffer.append("/>");	
		}
		_logger.debug("Exitting generateUnjoinMonitorElement().....");	
	}
	
	/**
	 * This method generate "modifystream" msml tag with it's attributes and child elements
	 * in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateModifyStreamElement(MsConfSpec spec,StringBuffer buffer) throws MediaServerException {
		_logger.debug("Inside generateModifyStreamElement().....");
		ArrayList<MsConferenceStream> streams=spec.getModifyStreamList();
		for(int i=0;i<streams.size();i++){
			MsConferenceStream modStream=streams.get(i);
			 String media=modStream.getMedia();
			 String id1=modStream.getId1();
			 String id2=modStream.getId2();
			 String mark=modStream.getMark();
			 String gain_amt=modStream.getGain_amt();
			 String direction=modStream.getDirection();
			 String display_Region_Id=modStream.getDisplay_Region_Id();
			 int tgtlvl=modStream.getTargetLevel();
			 int maxgain=modStream.getMaxgain();
			buffer.append("\n<modifystream");

			if (validator.isValid("modifystream.id1", id1))
				buffer.append(" id1=\"" + id1 + "\"");

			if (validator.isValid("modifystream.id2", id2))
				buffer.append(" id2=\"" + id2 + "\"");
			
			if (mark!=null && validator.isValid("modifystream.mark", mark))
				buffer.append(" mark=\"" + mark + "\"");
			
			buffer.append(">");
			if(validator.isValid("stream.media", media))
			buffer.append("\n<stream media=\"" + media + "\"");
			
			if(validator.isValid("stream.dir", direction))
				buffer.append(" dir=\""+ direction + "\"");
			
			if(validator.isValid("stream.compressed","stream.compressed"))
				buffer.append(" compressed=\""+modStream.isCompressed()+"\"");
			
			if(media==MsConferenceStream.AUDIO_MEDIA){
				boolean preferred=modStream.isPreffered();
				if(validator.isValid("stream.preffered",preferred+""))
					buffer.append(" preferred=\""+preferred+"\"");	
					buffer.append(">");
					String gain_id=modStream.getGain_id();
					if (gain_amt != null){
						buffer.append("\n<gain");	
						if(gain_id!=null && validator.isValid("stream.gain.id",gain_id ))
							buffer.append(" id=\""+gain_id+"\"");
						if(gain_amt.equals(MsConferenceStream.UNMUTE) || gain_amt.equals(MsConferenceStream.MUTE))
							buffer.append(" amt=\"" + gain_amt + "\"/>");						
					else {
						int amt = -1;
						try {
							amt = Integer.valueOf(gain_amt);
						} catch (Exception e) {
							_logger.debug("Incorrect value for gain amount so ignoring it .... ");
						}
						if (validator.isValid("stream.gain.amt", Integer.valueOf(gain_amt)))
							buffer.append(" amt=\"" + gain_amt + "\"/>");
					}
				}//End If Block for gain amount....
					else if (gain_amt == null && modStream.isAutomaticGainControl() && validator.isValid("stream.gain.agc",true)){
						buffer.append("\n<gain");
						if(gain_id!=null && validator.isValid("stream.gain.id",gain_id ))
							buffer.append(" id=\""+gain_id+"\"");
						buffer.append(" agc=\"true\"");
						if(validator.isValid("gain.agc.tgtlvl",tgtlvl ) && validator.isValid("gain.agc.maxgain",maxgain ))
						buffer.append(" tgtlvl=\"" + tgtlvl+ "\" maxgain=\"" + maxgain + "\"");
						buffer.append("/>");
					}					
					if (validator.isValid("stream.clamp","stream.clamp") && (modStream.isClamp_dtmf() || modStream.isClamp_tone())) {
						buffer.append("\n<clamp");
						if (modStream.isClamp_dtmf())
							buffer.append(" dtmf=\"true\"");
						if (modStream.isClamp_tone())
							buffer.append(" tone=\"true\"");
						buffer.append("/>");
				}

			} else {
				if (display_Region_Id != null) {
					buffer.append(" display=\"" + display_Region_Id + "\"");
				}
				
				boolean override=modStream.isOverride();
				if(validator.isValid("stream.override",override+""))
					buffer.append(" override=\""+override+"\"");	
				
				buffer.append(">");
				if(modStream.getVisual()!=null && validator.isValid("stream.visual","stream.visual"))
				{
					ArrayList<MsRegionSpec> visual=new ArrayList<MsRegionSpec>();
					visual.add(modStream.getVisual());
					this.generateRegionTags(visual, buffer,true);
				}
			}
			buffer.append("\n</stream>");
			buffer.append("\n</modifystream>");	
		}//for loop ends					
		_logger.debug("Exitting generateModifyStreamElement().....");		
	}
	/**
	 * This method generate "destroyconference" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateDestroyElement(MsConfSpec spec, StringBuffer buffer) throws MediaServerException{
		_logger.debug("Inside generateDestroyElement() for conference id :"+spec.getId());
		if(validator.isValid("conf.id", spec.getConnectionId()))
		buffer.append("\n<destroyconference id=\""+spec.getConnectionId()+"\"");
		String mark=spec.getMark();
		if(mark!=null && validator.isValid("destroyconf.mark",mark)){
			buffer.append(" mark=\""+mark+"\"");
		}
		buffer.append("/>");
		}
	
	/**
	 * This method generate "unjoin" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException 
	 */
	protected void generateUnjoinElement(MsConfSpec spec, StringBuffer buffer) throws MediaServerException{
		_logger.debug("Inside generateUnjoinElement().....");
		Iterator it = spec.getLeavingParticipants();
		for(;it.hasNext();){
			String id = (String)it.next();			
			buffer.append("\n<unjoin ");			
			if(validator.isValid("unjoin.id1", id))
				buffer.append("id1=\""+id+"\" ");		
			if(validator.isValid("unjoin.id2", spec.getConnectionId()))
				buffer.append("id2=\""+spec.getConnectionId()+"\" ");			
			buffer.append("/>");
		}	
	}
	
	/**
	 * This method generate "unjoin" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor for a particular stream.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
 	protected void generateUnjoinStreamElement(MsConfSpec spec, StringBuffer buffer) throws MediaServerException{
		ArrayList<MsConferenceStream> streams = spec.getUnjoinStreamList();
		for (int i = 0; i < streams.size(); i++) {
			MsConferenceStream unjoinStream = streams.get(i);
			String media = unjoinStream.getMedia();
			String id1 = unjoinStream.getId1();
			String id2 = unjoinStream.getId2();
			String direction=unjoinStream.getDirection();			
			buffer.append("\n<unjoin ");			
			if (validator.isValid("unjoin.id1", id1))
				buffer.append("id1=\"" + id1 + "\" ");
			if (validator.isValid("unjoin.id2", id2))
				buffer.append("id2=\"" + id2+"\"");				
			buffer.append(">");
			if(validator.isValid("stream.media", media) && validator.isValid("stream.dir", direction))
			buffer.append("\n<stream media=\"" + media + "\" dir=\""+ direction + "\"/>");
			buffer.append("\n</unjoin>");			
		}
 	}
 	
 	/**
	 * This method generate "join" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	protected void generateJoinElement(MsConfSpec spec, StringBuffer buffer)  throws MediaServerException{
		_logger.debug("Inside generateJoinElement().....");
		Iterator it = spec.getJoiningParticipants();
		int counter=1;
		for(;it.hasNext();){
			String id = (String)it.next();
			String mode = spec.getJoiningMode(id);
			buffer.append("\n<join ");
		
			buffer.append("mark=\"" + id + "\" ");
			
			if(validator.isValid("join.id1", id))
				buffer.append("id1=\"" + id + "\" ");
			
			if(validator.isValid("join.id2", spec.getConnectionId())){
				buffer.append("id2=\"" + spec.getConnectionId() + "\">");	
			//	buffer.append("id2=\"" + "conf:dlgcjmc-1820540652121616134"+"\">");
			}
			
			if(mode != null){				
				if(mode.equals(ConferenceController.MODE_LISTEN_ONLY)){
					buffer.append("\n<stream media=\"audio\" dir=\"to-id1\"/>");
				}
				else if(mode.equals(ConferenceController.MODE_LISTEN_AND_TALK)){
					buffer.append("\n<stream media=\"audio\"/>");
				}
				else if(mode.equals(ConferenceController.MODE_LISTEN_AND_TALK_VIDEO_IN)){				
					buffer.append("\n<stream media=\"audio\"/>");
					buffer.append("\n<stream media=\"video\" dir=\"to-id1\"/>");
				}else if(mode.equals(ConferenceController.MODE_LISTEN_AND_TALK_VIDEO_IN_OUT)){
					buffer.append("\n<stream media=\"audio\" dir=\"to-id1\"/>");
					buffer.append("\n<stream media=\"audio\" dir=\"from-id1\"/>");
					String display=spec.getDisplayRegionId(id);
					
				//	if(display!=null){
					//  buffer.append("\n<stream media=\"video\" dir=\"from-id1\" display=\""+display+"\"/>");	
					  buffer.append("\n<stream media=\"video\" dir=\"from-id1\"/>");
					  buffer.append("\n<stream media=\"video\" dir=\"to-id1\"/>");
					//}else{
					//	buffer.append("\n<stream media=\"video\"/>");
					//}
				}
			}
			
			buffer.append("\n</join>");
		}
		_logger.debug("Exitting generateJoinElement().....");
	}

	/**
	 * This method generate "modifyconference" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	public void generateUpdateConfElement(MsConfSpec spec, StringBuffer buffer)throws MediaServerException {
		_logger.debug("Inside generateUpdateConfElement().....");
		buffer.append("\n<modifyconference");
		if(validator.isValid("conf.id", spec.getConnectionId())){
			buffer.append(" id=\"");
			buffer.append(spec.getConnectionId());
			buffer.append("\"");
			
			String mark=spec.getMark();
			if(mark!=null && validator.isValid("conf.mark",mark)){
				buffer.append(" mark=\""+mark+"\"");
			}
			buffer.append(">");
			
			buffer.append("\n<audiomix");
			if(spec.getAudiomixId()!=null && validator.isValid("audiomix.id" ,spec.getAudiomixId()))
				buffer.append(" id=\""+spec.getAudiomixId()+"\"");
			
			if(spec.getAudiomixSampleRate()!=8000 && validator.isValid("audiomix.samplerate" ,spec.getAudiomixSampleRate()))
				buffer.append(" samplerate=\""+spec.getAudiomixSampleRate()+"\"");
			buffer.append(">");			
			if(validator.isValid("nloudest.n", new Long(spec.getMaxActiveSpeakers())))
				buffer.append("\n<n-loudest n=\""+spec.getMaxActiveSpeakers()+"\"/>");
			if(validator.isValid("asn.ri", new Long(spec.getNotificationInterval()))){	
				buffer.append("\n<asn ri=\""+spec.getNotificationInterval()+"s\"");
				if(validator.isValid("asn.asth", spec.getActiveSpeakerThreashold()))
					buffer.append(" asth=\"" + spec.getActiveSpeakerThreashold() + "\"");
						buffer.append("/>");
			}
			
			buffer.append("\n</audiomix>");
			MsVideoConferenceSpec conferenceSpec=spec.getMsVideoConferenceSpec();
			if(spec.getConferenceType()==MsConfSpec.VIDEO_TYPE&& conferenceSpec!=null){	
				conferenceSpec=spec.getMsVideoConferenceSpec();	
				this.generateVideoLayoutTag(conferenceSpec,buffer);	
			}
			
			buffer.append("\n</modifyconference>");	
		}
		_logger.debug("Exitting generateUpdateConfElement().....");
	}

	/**
	 * This method generate "createconference" msml tag with it's attributes and child elements in msml request to be generated by the Adaptor.
	 * @param spec
	 * @param buffer
	 * @throws MediaServerException
	 */
	public void generateCreateConfElement(MsConfSpec spec, StringBuffer buffer) throws MediaServerException {
		_logger.debug("Inside generateCreateConfElement().....");
		buffer.append("\n<createconference");
		if(validator.isValid("conf.id", spec.getId())){
			buffer.append(" name=\"");
			buffer.append(spec.getId());
			buffer.append("\"");
			if(spec.getDeleteConfFlag() == MsConfSpec.DELETE_ON_NOCONTROL)
				buffer.append(" deletewhen=\"nocontrol\"");
			else if(spec.getDeleteConfFlag() == MsConfSpec.DELETE_ON_NEVER)
				buffer.append(" deletewhen=\"never\"");
			else if(spec.getDeleteConfFlag() == MsConfSpec.DELETE_ON_NOMEDIA)
				buffer.append(" deletewhen=\"nomedia\"");
			if (!spec.isTerm())
				buffer.append(" term=\"false\"");
			if (spec.getMark() != null)
				buffer.append(" mark=\"" + spec.getMark() + "\"");
			buffer.append(">");
			
			buffer.append("\n<audiomix");
			if(spec.getAudiomixId()!=null && validator.isValid("audiomix.id" ,spec.getAudiomixId()))
				buffer.append(" id=\""+spec.getAudiomixId()+"\"");
			
			if(spec.getAudiomixSampleRate()!=8000 && validator.isValid("audiomix.samplerate" ,spec.getAudiomixSampleRate()))
				buffer.append(" samplerate=\""+spec.getAudiomixSampleRate()+"\"");
			buffer.append(">");			
			if(validator.isValid("nloudest.n", new Long(spec.getMaxActiveSpeakers())))
				buffer.append("\n<n-loudest n=\""+spec.getMaxActiveSpeakers()+"\"/>");
			if(validator.isValid("asn.ri", new Long(spec.getNotificationInterval()))){	
				buffer.append("\n<asn ri=\""+spec.getNotificationInterval()+"s\"");
				if(validator.isValid("asn.asth", spec.getActiveSpeakerThreashold()))
					buffer.append(" asth=\"" + spec.getActiveSpeakerThreashold() + "\"");
						buffer.append("/>");
			}			
			buffer.append("\n</audiomix>");
			if(spec.getConferenceType()==MsConfSpec.VIDEO_TYPE){
			MsVideoConferenceSpec conferenceSpec=spec.getMsVideoConferenceSpec();	
			this.generateVideoLayoutTag(conferenceSpec,buffer);	
			}			
			buffer.append("\n</createconference>");
		}	
		_logger.debug("Exitting generateCreateConfElement().....");
	}
	
	private void generateVideoLayoutTag(MsVideoConferenceSpec conferenceSpec,StringBuffer buffer) throws MediaServerException {
		String id=conferenceSpec.getId();
		 buffer.append("\n<videolayout dlgc:layout=\""+"auto"+"\">"); //buffer.append("\n<videolayout");		
		if(id!=null && validator.isValid("videolayout.id" ,id))
		buffer.append(" id=\""+id+"\"");
		//buffer.append(">");	
		MsRootSpec rootSpec=conferenceSpec.getRootSpec();
		boolean selectorRoot=false;
		MsSelectorSpec msSelectorSpec=conferenceSpec.getSelectorSpec();
		if(msSelectorSpec==null && conferenceSpec.getRegionList().size()==0){	
			_logger.debug("Creating default video layout....");
			generateRootTag(rootSpec,buffer);			
//		int layout_size=conferenceSpec.getLayoutSize();
//		int num_row=(int)Math.ceil(Math.sqrt(layout_size));			
//		for (int i = 0; i < layout_size; i++) {
//			Double left=((i%num_row)*100)/(num_row*1.0000);				
//			Double top=((((int)(i/num_row)))*100)/(num_row*1.0000);
//			DecimalFormat decimalFormat = new DecimalFormat("####.####");
//			left= Double.valueOf(decimalFormat.format(left));
//			top= Double.valueOf(decimalFormat.format(top));
//			buffer.append("\n<region id=\""+(i+1)+"\" left=\""+left+"%\" top=\""+top+"%\" relativesize=\"1/"+num_row+"\"/>");
//		}
		}
		else
		{
			_logger.debug("Creating custom video layout....");
			
			if(msSelectorSpec!=null && msSelectorSpec.getRootSpec()!=null )
			{
				rootSpec=msSelectorSpec.getRootSpec();
				selectorRoot=true;
				conferenceSpec.clearRegionList();	
			}
			
			if (!selectorRoot) {			
				generateRootTag(rootSpec,buffer);
			}
				if(msSelectorSpec!=null && validator.isValid("videolayout.selector", "selector")){
				buffer.append("\n<selector");
				if (msSelectorSpec.getId() != null && validator.isValid("selector.id", msSelectorSpec.getId()))
					buffer.append(" id=\"" + msSelectorSpec.getId() + "\"");
				if (msSelectorSpec.getMethod() != null  && validator.isValid("selector.method", msSelectorSpec.getMethod()))
					buffer.append(" method=\"" + msSelectorSpec.getMethod()+ "\"");
				if (msSelectorSpec.getStatus() != null && validator.isValid("selector.status", msSelectorSpec.getStatus()))
					buffer.append(" status=\"" + msSelectorSpec.getStatus()+ "\"");
				boolean blankothers=msSelectorSpec.isBlankOthers();
				if (validator.isValid("selector.blankothers","selector.blankothers"))
					buffer.append(" blankothers=\""+blankothers+"\"");
				buffer.append(">");
				String speakersees=msSelectorSpec.getSpeakerSees();
				String si=msSelectorSpec.getSwitchingInterval();
				if (validator.isValid("selector.vas","selector.vas") && (speakersees != null || si != null)) {
					buffer.append("\n<vas");
					if (si != null && validator.isValid("vas.si",si))
						buffer.append(" si=\"" + si + "\"");
					if (speakersees != null && validator.isValid("vas.speakersees", speakersees))
						buffer.append(" speakersees=\"" + speakersees + "\"");
					buffer.append(">\n</vas>");
				}
				if(selectorRoot){
					generateRootTag(rootSpec,buffer);
				}
				
				if (validator.isValid("selector.region","selector.region"))
				this.generateRegionTags(msSelectorSpec.getRegionList(),buffer,false);
				
				buffer.append("\n</selector>");
				}				
				this.generateRegionTags(conferenceSpec.getRegionList(),buffer,false);
			}					
		buffer.append("\n</videolayout>");
		
	}
	
	private void generateRootTag(MsRootSpec rootSpec,StringBuffer buffer) throws MediaServerException {
		if(rootSpec!=null){
			String rootSize=rootSpec.getRootSize();
			MsColorSpec backgroundcolor=rootSpec.getBackgroundColor();
			URI backgroundImage=rootSpec.getBackgroundImage();
			buffer.append("\n<root");
			if(rootSize!=null && validator.isValid("videolayout.rootsize", rootSize))
				buffer.append(" size=\""+rootSize+"\"");
			if(backgroundcolor!=null && backgroundcolor.isValidColor() && validator.isValid("root.backgroundcolor", rootSize))
				buffer.append(" backgroundcolor=\""+backgroundcolor.getColor()+"\"");
			if(backgroundImage!=null && validator.isValid("root.backgroundimage", backgroundImage))
				buffer.append(" backgroundimage=\""+backgroundImage+"\"");
			buffer.append("/>");
		}
	}
	
	/**
	 * This method generate region tag of msml for selector or videolayout 
	 * @param message
	 */
	private void generateRegionTags(ArrayList<MsRegionSpec> regionList,StringBuffer buffer,boolean isVisual) throws MediaServerException {
		int size=regionList.size();
			for (int i = 0; i < size; i++) {
			MsRegionSpec msRegionSpec=regionList.get(i);
			String id=msRegionSpec.getId();
			Double top=msRegionSpec.getTop();
			Double left=msRegionSpec.getLeft();
			String relativesize=msRegionSpec.getRelativesize();
			Double priority=msRegionSpec.getPriority();
			String title=msRegionSpec.getTitle();
			MsColorSpec titletextcolor=msRegionSpec.getTitleBackgroundColor();
			MsColorSpec titlebackgroundcolor=msRegionSpec.getTitleTextColor();
			MsColorSpec bordercolor=msRegionSpec.getBorderColor();
			int borderwidth=msRegionSpec.getBorderWidth();
			URI logo=msRegionSpec.getLogo();
			if(isVisual)
				buffer.append("\n<visual");
			else
				buffer.append("\n<region");
			if(validator.isValid("region.id", id))
				buffer.append(" id=\""+id+"\"");			
			if(validator.isValid("region.left", left))
			buffer.append(" left=\""+left+"%\"");			
			if(validator.isValid("region.top", top))
			buffer.append(" top=\""+top+"%\""); 			
			if(validator.isValid("region.relativesize", relativesize))
			buffer.append(" relativesize=\""+relativesize+"\"");			
			if(validator.isValid("region.priority", priority))
				buffer.append(" priority=\""+priority+"\"");			
			if(title!=null && validator.isValid("region.title", title))
				buffer.append(" title=\""+title+"\"");
			if(titletextcolor!=null && titletextcolor.isValidColor() && validator.isValid("region.titletextcolor", "region.titletextcolor"))
				buffer.append(" titletextcolor=\""+titletextcolor.getColor()+"\"");
			if(titlebackgroundcolor!=null && titlebackgroundcolor.isValidColor() && validator.isValid("region.titlebackgroundcolor", "region.titlebackgroundcolor"))
				buffer.append(" titlebackgroundcolor=\""+titlebackgroundcolor.getColor()+"\"");
			if(bordercolor!=null && bordercolor.isValidColor() && validator.isValid("region.bordercolor", "region.bordercolor"))
				buffer.append(" bordercolor=\""+bordercolor.getColor()+"\"");
			if(validator.isValid("region.borderwidth", borderwidth))
				buffer.append(" borderwidth=\""+borderwidth+"\"");
			if(logo!=null && validator.isValid("region.logo", logo))
				buffer.append(" logo=\""+logo+"\"");
			if(validator.isValid("region.freeze", "region.freeze"))
				buffer.append(" freeze=\""+msRegionSpec.isFreeze()+"\"");
			if(validator.isValid("region.blank","region.blank"))
				buffer.append(" blank=\""+msRegionSpec.isBlank()+"\"");
			buffer.append("/>");
		}
	}
	/**
	 * It parse the message and return the MsOperationResult object from the message. 
	 * @param message
	 */
	public MsOperationResult parseMessage(SipServletMessage message) throws MediaServerException{
		// Check whether it is a valid message or not. If not, return NULL.
		if (!(message.getContentType().equals(MSML_MESSAGE_TYPE)|| message.getContentType().equals(MSML_XML_MESSAGE_TYPE))) {
			return null;
		}

		String content = null;
		
			try{
				if (_logger.isDebugEnabled()) {
					_logger.debug("parseMessage(): Parsing message received from media server...");

				if (message.getContent() == null) {
					_logger.debug("parseMessage(): Message has no content.");
				} else {
					_logger.debug("parseMessage(): Message content is of type: "+ message.getContent().getClass().getName());
				}
			}

			if (message.getContent() instanceof byte[]) {
				content = new String((byte[]) message.getContent());
			} else if (message.getContent() != null) {
				content = message.getContent().toString();
			}
		}catch(IOException e){
			String msg = "Error occurred while parsing message received from media server: " + e.getMessage();
			_logger.error(msg, e);
			throw new MediaServerException(msg, e);
		}
		
		return content != null ? this.parseMessage(content, null) : null;
	}
	
	synchronized protected MsOperationResult parseMessage(String message, MsOperationSpec spec) throws MediaServerException{
		MsmlResult result = null;
		
		try {
			StringReader strReader = new StringReader(message);
			result = new MsmlResult();
			result.setOperationSpec(spec);
			saxParser.parse(new InputSource(strReader), result);
		} catch(IOException e) {
			throw new MediaServerException(e.getMessage(), e);
		} catch(SAXException e) {
			throw new MediaServerException(e.getMessage(), e);
		}
		return result;
	}
	
	public boolean isMatchingResult(String eventId, String connectionId, String operationId, MsOperationResult result){
		boolean matching = false;
		if(result instanceof MsmlResult){
			matching = ((MsmlResult)result).isMatching(eventId, connectionId, operationId);
		}
		
		return matching;
	}
	
	/**
	 * It parse the message and return the MsOperationResult object from the message.  
	 * @param message
	 */
	public MsOperationResult parseMessage(SipServletMessage message,MsOperationSpec spec) throws MediaServerException {

		// Check whether it is a valid message or not. If not, return NULL.
		if (!(message.getContentType().equals(MSML_MESSAGE_TYPE)|| message.getContentType().equals(MSML_XML_MESSAGE_TYPE))) {
			return null;
		}

		String content = null;

		try {
			if (_logger.isDebugEnabled()) {
				_logger.debug("parseMessage(): Parsing message received from media server...");

				if (message.getContent() == null) {
					_logger.debug("parseMessage(): Message has no content.");
				} else {
					_logger.debug("parseMessage(): Message content is of type: "+ message.getContent().getClass().getName());
				}
			}
			if (message.getContent() instanceof byte[]) {
				content = new String((byte[])message.getContent());
			} else if (message.getContent() != null) {
				content = message.getContent().toString();
			}
		}catch(IOException e){
			String msg = "Error occurred while parsing message received from media server: " + e.getMessage();
			_logger.error(msg, e);
			throw new MediaServerException(msg, e);
		}		
		return content != null ? this.parseMessage(content, spec) : null;

	}

//	public static void main(String[] args){
//		
//		try{
//			long start = System.currentTimeMillis();
//			
//			
//			
//			MsConfSpec confSpec = new MsConfSpec();
//			confSpec.setId("conf123");
//			confSpec.setConnectionId("conf:conf123");
//			confSpec.setDeleteConfFlag(MsConfSpec.DELETE_ON_NOCONTROL);
//			confSpec.setMaxActiveSpeakers(3);
//			confSpec.setNotifyActiveSpeaker(true);
//			confSpec.setNotificationInterval(4000);
//			MsVideoConferenceSpec conferenceSpec=new MsVideoConferenceSpec();
//			conferenceSpec.setLayoutSize(4);
//			conferenceSpec.setRootSize(MsVideoConferenceSpec.VGA);
//			confSpec.setMsVideoConferenceSpec(conferenceSpec);
//			confSpec.setConferenceType(MsConfSpec.VIDEO_TYPE);
//			confSpec.setOperation(MsConfSpec.OP_CODE_CREATE_CONF | MsConfSpec.OP_CODE_DESTROY_CONF);
//			
//			MsmlAdaptor handler = new Adaptor();
//			StringBuffer buffer  = new StringBuffer();
//			handler.generateSpec(confSpec, buffer);
//			System.out.println(buffer.toString());
//			System.out.println("Processing time :" + (System.currentTimeMillis() -start));
//			
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
}
