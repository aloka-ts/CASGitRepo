<%@ jet package = "com.baypackets.ase.soa.codegenerator " imports = "java.util.* java.lang.reflect.*;" class = "ClientListenerProxyGenerator" %>

<%
	//This will generate Listener Proxy on service side for co-resident service
	// and it will use Local Listener Proxy generated by LocalListenerProxyGenerator
	Map argsMap = (HashMap)argument;
    ClassInspector classInspector = (ClassInspector)argsMap.get("ClassInspector");
    String listenerUri = null;
	if(argsMap.get("URI") != null)	{
		listenerUri = (String)argsMap.get("URI");
	}
    String parentClassPkg= classInspector.getPackageName();
    String parentClassName= classInspector.getClassName();
	StringBuffer strBuf = new StringBuffer();
    strBuf.append("\"");
    strBuf.append(parentClassPkg);
    strBuf.append(".");
    strBuf.append(parentClassName);
    strBuf.append("\"");
    String interfaceClassName =  strBuf.toString();
                                                                                                                        
%>

package <%= parentClassPkg %>;

import com.baypackets.ase.soa.codegenerator.proxy.BaseProxy;
import java.net.URI;
import com.baypackets.ase.soa.SoaMeasurementUtil;
import com.baypackets.ase.soa.ListenerRegistry;
import com.baypackets.ase.soa.fw.SoaFrameworkContext;
import com.baypackets.ase.common.Registry;
import com.baypackets.ase.util.Constants;
import com.baypackets.ase.soa.util.ReflectiveClone;
import java.util.*;
import java.lang.reflect.*;
import org.apache.log4j.*;



public class <%= parentClassName %>ClientProxy implements <%= parentClassName %>,BaseProxy {
	private static Logger m_logger = Logger.getLogger(<%= parentClassName %>ClientProxy.class);
    private String m_uri = null;
    private <%= parentClassName %> impl = null;

    public <%= parentClassName %>ClientProxy()    {
		<%
		if(listenerUri != null)	{
		%>
			m_uri = "<%= listenerUri %>";
		<%
		}
		%>
                                                                                                                        
    }
                                                                                                                        
    public void setImpl(Object impl)    {

    }
                                                                                                                        
    public void setURI(String uri)  {
		if(m_logger.isDebugEnabled())	{
			m_logger.debug("Setting URI in ListenerProxy: " + uri);
		}
        m_uri = uri;
    }
	public String getInterface()    {
		return <%= interfaceClassName %>;
    }

	 public Object getImpl() {
        return null;
    }
                                                                                                                             
    public Object clone() throws CloneNotSupportedException {
        try {
            return super.clone();
        }catch(CloneNotSupportedException exp)  {
			m_logger.error("Failed to create clone of this Object"+exp.getMessage(),exp);
            throw exp;
        }
    }


<%
    String name = "";
    String returnType = "";
	boolean isPrimitive = false;
    String modifiers = "";
    Method[] methods = classInspector.getMethods();
    for(int i=0;i<methods.length;i++)   {
        Method m = methods[i];
        name = m.getName();
        Class retType = m.getReturnType();
		isPrimitive = retType.isPrimitive();
        modifiers = Modifier.toString((m.getModifiers()));
        returnType = retType.getName();
        Class[] params = m.getParameterTypes();
        StringBuffer methodArguments = new StringBuffer();
        StringBuffer implArguments = new StringBuffer();
		StringBuffer parameterTypes = new StringBuffer();
        for(int j=0;j<params.length;j++)    {
            Class paramType = params[j];
			if(paramType.isPrimitive()) {
                methodArguments.append(paramType.getName());
                parameterTypes.append(paramType.getName());
                parameterTypes.append(".class");
            }else if(!(paramType.isArray())) {
                methodArguments.append(paramType.getName());
                parameterTypes.append(paramType.getName());
                parameterTypes.append(".class");
            }else if(paramType.isArray())   {
                methodArguments.append(paramType.getComponentType().getName());
                parameterTypes.append(paramType.getComponentType().getName());
                methodArguments.append("[]");
                parameterTypes.append("[]");
                parameterTypes.append(".class");
            }
			methodArguments.append(" arg"+j);
			implArguments.append(" arg"+j);
			methodArguments.append(",");
            implArguments.append(",");
			parameterTypes.append(",");
        }
		int index = methodArguments.length();
		if(index > 0)
        	methodArguments.deleteCharAt(index -1);
        index = implArguments.length();
		if(index > 0)
        	implArguments.deleteCharAt(index -1);
		index = parameterTypes.length();
        if(index > 0)   {
            parameterTypes.deleteCharAt(index -1);
        }

        Class[] exps = m.getExceptionTypes();
        StringBuffer exceptions = new StringBuffer();
		if(exps.length > 0)	{
        	exceptions.append("throws ");
        	for(int k=0;k<exps.length;k++)  {
            	exceptions.append(exps[k].getName());
            	if(k< (exps.length -2)) {
                	exceptions.append(",");
            	}
        	}
			index = exceptions.length();
            if(index > 0)   {
                exceptions.deleteCharAt(index -1);
            }

		}
                                                                                                                        
%>
    public <%= returnType %> <%= name %> (<%= methodArguments.toString() %> ) <%= exceptions.toString() %> {
		String methodName = "<%= name %>";
        Object implObject = null;
        Object retValue = null;
        Method implMethod = null;
        String currentMethodName = null;
        Method method = null;
        <%
        if(!isPrimitive) {
        %>
            <%= returnType %> retVal = null;
        <%
        }
        %>
        <%
        if(returnType.equals("int"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
        <%
        if(returnType.equals("short"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
        <%
        if(returnType.equals("long"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
        <%
        if(returnType.equals("float"))  {
        %>
            <%= returnType %> retVal = 0.0f;
        <%
        }
        %>
		<%
        if(returnType.equals("double"))  {
        %>
            <%= returnType %> retVal = 0.0;
        <%
        }
        %>
        <%
        if(returnType.equals("boolean"))  {
        %>
            <%= returnType %> retVal = false;
        <%
        }
        %>
        <%
        if(returnType.equals("char"))  {
        %>
            <%= returnType %> retVal =  '\u0000';
        <%
        }
        %>
        <%
        if(returnType.equals("byte"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
		 SoaMeasurementUtil.incrementOutgoingCallbacks();
        if(m_uri != null)    {
            if(m_logger.isDebugEnabled())   {
                m_logger.debug("Current URI set in this object is: " + m_uri);
            }
			URI uri = null;
			try	{
				uri = new URI(m_uri);
			}catch(Exception e)	{
				 m_logger.error("Exceptionn creating URI from m_uri: " +e.getMessage(),e);
			}
            SoaFrameworkContext soaFw = (SoaFrameworkContext)Registry.lookup(Constants.NAME_SOA_FW_CONTEXT);
            ListenerRegistry lsnrRegistry = soaFw.getListenerRegistry();
            implObject = lsnrRegistry.findListener(uri);
            if(m_logger.isDebugEnabled())   {
                m_logger.debug("Local ListenerProxy Retrieved from ListenerRegistry: "+ implObject);
            }
			Class[] parameters = null;
			Class c = null;
			Object[] arguments = null;
            if(implObject != null)  {
                try {
                    parameters = new Class[]{<%= parameterTypes.toString() %>};
                    c = implObject.getClass();
                    implMethod = c.getMethod(methodName, parameters);
                    arguments = new Object[]{<%= implArguments.toString() %>};
                    retValue = implMethod.invoke(implObject,arguments);
                } catch (NoSuchMethodException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("NoSuchMethodException: " +e.getMessage(),e);
                } catch (IllegalAccessException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("IllegalAccessException: " +e.getMessage(),e);
                } catch (InvocationTargetException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("InvocationTargetException: " +e.getMessage(),e);
                }catch(Exception e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("Exception: " +e.getMessage(),e);
                }
                                                                                                                              
            }else	{
				//If implObject is null then get remotelistenerproxy .
            	//To get remotelistenerproxy invoke LNR.findservice(uri,interface class name)
				//Invoke setURI() on  remotelistenerproxy object using reflection
				// Invoke actual method as above
				implObject = lsnrRegistry.findRemoteListener(uri,<%= interfaceClassName %>);
            	if(m_logger.isDebugEnabled())   {
                	m_logger.debug("Remote ListenerProxy  object Retrieved from ListenerRegistry: "+ implObject);
            	}
				if(implObject == null) {
            		m_logger.error("No Listener proxy found for URI: " + m_uri );
            		throw new IllegalArgumentException("Listener proxy not found for URI: " + m_uri);
        		}

				try {
                    c = implObject.getClass();
					parameters = new Class[]{<%= parameterTypes.toString() %>};
                    implMethod = c.getMethod(methodName, parameters);
                    arguments = new Object[]{<%= implArguments.toString() %>};
                    retValue = implMethod.invoke(implObject,arguments);
                } catch (NoSuchMethodException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("NoSuchMethodException: " +e.getMessage(),e);
                } catch (IllegalAccessException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("IllegalAccessException: " +e.getMessage(),e);
                } catch (InvocationTargetException e) {
                    SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                    m_logger.error("InvocationTargetException: " +e.getMessage(),e);
            	}catch(Exception e) {
                	SoaMeasurementUtil.incrementOutgoingCallbacksFailed();
                	m_logger.error("Exception: " +e.getMessage(),e);
            	}
			}
			<%
        	if(!returnType.equals("void"))   {
        	%>
           	 	<%
            	if(!isPrimitive) {
            	%>
                	Object retObj = ReflectiveClone.clone(retValue,this.getClass().getClassLoader());
                	if(m_logger.isDebugEnabled())   {
                    	m_logger.debug("ClassLoader of Proxy object: " + this.getClass().getClassLoader());
                    	m_logger.debug("ClassLoader of object retObj returned by ReflectiveClone: "+retObj.getClass().getClassLoader());
                    	m_logger.debug("Class name for object retObj: " + retObj.getClass().getName());
                	}
                	retVal = (<%= returnType %>)retObj;
            	<%
            	}
            	%>
        	<%
        	}
        	%>

                                                                                                                              
        }else   {
            //m_uri == null;
			m_logger.error("m_uri is null on this proxy object so can't send notification: ");
                                                                                                                              
        }
		<%
		if(isPrimitive)    {
		%>
        <%
        if(returnType.equals("int"))  {
        %>
             retVal = new Integer(retValue.toString()).intValue();
        <%
        }
        %>
        <%
        if(returnType.equals("short"))  {
        %>
             retVal = new Short(retValue.toString()).shortValue();
        <%
        }
        %>
         <%
        if(returnType.equals("long"))  {
        %>
             retVal = new Long(retValue.toString()).longValue();
        <%
        }
        %>
        <%
        if(returnType.equals("float"))  {
        %>
             retVal = new Float(retValue.toString()).floatValue();
        <%
        }
        %>
		<%
        if(returnType.equals("double"))  {
        %>
             retVal = new Double(retValue.toString()).doubleValue();
        <%
        }
        %>
        <%
        if(returnType.equals("boolean"))  {
        %>
             retVal = new Boolean(retValue.toString()).booleanValue();
        <%
        }
        %>
        <%
        if(returnType.equals("char"))  {
        %>
             retVal =  new Character(retValue.toString()).charValue();
        <%
        }
        %>
        <%
        if(returnType.equals("byte"))  {
        %>
             retVal = new Byte(retValue.toString()).byteValue();
        <%
        }
        %>
        <%                                                                                                                      
        }
		%>
        <%
        if(!returnType.equals("void"))   {
        %>
            return retVal;
        <%
        }
        %>
		 }
    <%
   }
    %>
}

