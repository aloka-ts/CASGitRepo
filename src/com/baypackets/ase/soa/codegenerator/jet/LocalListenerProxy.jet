<%@ jet package = "com.baypackets.ase.soa.codegenerator " imports = "java.util.* java.lang.reflect.* org.apache.log4j.*;" class = "LocalListenerProxyGenerator" %>

<% 	
	Map argsMap = (HashMap)argument;
    ClassInspector classInspector = (ClassInspector)argsMap.get("ClassInspector");
    String implClassName = (String)argsMap.get("ImplClass");
	String parentClassPkg= classInspector.getPackageName();
 	String parentClassName= classInspector.getClassName();
	String fqdn = parentClassPkg+"."+parentClassName;
	StringBuffer strBuf = new StringBuffer();
	strBuf.append("\"");
	strBuf.append(parentClassPkg);
	strBuf.append(".");
	strBuf.append(parentClassName);
	strBuf.append("\"");
	String interfaceClassName =  strBuf.toString();

 	
%>

package <%= parentClassPkg %>;

import com.baypackets.ase.soa.codegenerator.proxy.BaseProxy;
import com.baypackets.ase.soa.ServiceMap;
import com.baypackets.ase.soa.fw.SoaFrameworkContext;
import com.baypackets.ase.soa.SoaMeasurementUtil;
import com.baypackets.ase.common.Registry;
import com.baypackets.ase.util.Constants;
import java.util.*;
import java.lang.reflect.*;
import org.apache.log4j.*;

public class <%= parentClassName %>LocalProxy implements <%= parentClassName %>,BaseProxy {
	private static Logger m_logger = Logger.getLogger(<%= parentClassName %>LocalProxy.class);
    private <%= implClassName %> impl = null;
    private String m_uri;
                                                                                                                                   
    public <%= parentClassName %>LocalProxy()    {
		impl = new <%= implClassName %>();                                                                                                                                   
    }
                                                                                                                                   
    public <%= parentClassName %>LocalProxy(<%= implClassName %> svcImpl)    {
        impl = svcImpl;
                                                                                                                                   
    }
    public void setImpl(Object implObj) {
		if(m_logger.isDebugEnabled())	{
			m_logger.debug("ListenerImpl Object passesd: " + implObj);
			if(implObj != null)	{
				m_logger.debug("ListenerImpl object class: " + implObj.getClass().getName());
			}
		}
        if(implObj instanceof <%= implClassName %>) {
			if(m_logger.isDebugEnabled())   {
				m_logger.debug("Assign passed argument to impl");
			}
            impl = (<%= implClassName %>)implObj;
        }
		if(m_logger.isDebugEnabled())   {
         	m_logger.debug("Exiting setImpl()");
       	}

    }
                                                                                                                                   
    public void setURI(String uri)  {
        m_uri = uri;
    }
                                                                                                                                   
    public Object getImpl() {
        return impl;
    }

	 public String getInterface()    {
		return <%= interfaceClassName %>;

   	 }


	public Object clone() throws CloneNotSupportedException	{
		try	{
			return super.clone();
		}catch(CloneNotSupportedException exp)	{
			throw exp;
		}
	}
<%	
	String name = "";
	String returnType = "";
	boolean isPrimitive = false;
	String modifiers = "";
	Method[] methods = classInspector.getMethods();
	for(int i=0;i<methods.length;i++)	{
		Method m = methods[i];
		name = m.getName();
		Class retType = m.getReturnType();
		isPrimitive = retType.isPrimitive();
		modifiers = Modifier.toString((m.getModifiers()));
		returnType = retType.getName();
		Class[] params = m.getParameterTypes();
		StringBuffer methodArguments = new StringBuffer();
		StringBuffer implArguments = new StringBuffer();
		for(int j=0;j<params.length;j++)	{
			Class paramType = params[j];
			if(paramType.isPrimitive()) {
                methodArguments.append(paramType.getName());
            }else if(!(paramType.isArray())) {
                methodArguments.append(paramType.getName());
            }else if(paramType.isArray())   {
                methodArguments.append(paramType.getComponentType().getName());
                methodArguments.append("[]");
            }
			methodArguments.append(" arg"+j);
            implArguments.append(" arg"+j);
			methodArguments.append(",");
            implArguments.append(",");
		}
		int index = methodArguments.length();
		if(index > 0)
        	methodArguments.deleteCharAt(index -1);
        index = implArguments.length();
		if(index > 0)
        	implArguments.deleteCharAt(index -1);
		Class[] exps = m.getExceptionTypes();
		StringBuffer exceptions = new StringBuffer();
		if(exps.length > 0)	{
			exceptions.append("throws ");
			for(int k=0;k<exps.length;k++)	{
				exceptions.append(exps[k].getName());
				if(k< (exps.length -2))	{
					exceptions.append(",");
				}
			}
		}

%>
	public <%= returnType %> <%= name %> (<%= methodArguments.toString() %> ) <%= exceptions.toString() %> {
		<%
        if(!isPrimitive) {
        %>
            <%= returnType %> retVal = null;
        <%
        }
        %>
        <%
        if(returnType.equals("int"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
        <%
        if(returnType.equals("short"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
        <%
        if(returnType.equals("long"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
		<%
        if(returnType.equals("float"))  {
        %>
            <%= returnType %> retVal = 0.0f;
        <%
        }
        %>
        <%
        if(returnType.equals("double"))  {
        %>
            <%= returnType %> retVal = 0.0;
        <%
        }
        %>
        <%
        if(returnType.equals("boolean"))  {
        %>
            <%= returnType %> retVal = false;
        <%
        }
        %>
        <%
        if(returnType.equals("char"))  {
        %>
            <%= returnType %> retVal =  '\u0000';
        <%
        }
        %>
		<%
        if(returnType.equals("byte"))  {
        %>
            <%= returnType %> retVal = 0;
        <%
        }
        %>
	SoaMeasurementUtil.incrementIncomingCallbacks();
    try {
        <%
        if(!returnType.equals("void"))  {
        %>
            retVal = impl.<%= name %>(<%= implArguments.toString() %>);
        <%
        }else   {
        %>
            impl.<%= name %>(<%= implArguments.toString() %>);
        <%
        }
        %>
    }catch(Exception e) {
		SoaMeasurementUtil.incrementIncomingCallbacksFailed();
        m_logger.error("Error in invoking "+"<%= name %>"+"("+"<%= implArguments.toString() %>" +") on Proxy ",e);
    }
      <%
    if(!returnType.equals("void"))  {
     %>
        return (<%= returnType %>)retVal;
<%
    }
%>
                                                                                                                              
    }
<%
        }
%>
}
